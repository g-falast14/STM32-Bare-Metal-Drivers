/*
 * tim.c
 *
 *  Created on: Sep 26, 2025
 *      Author: garrettfalast
 */

#include "stm32f4xx.h"

#define TIM2EN		(1U<<0)
#define TIME3EN 	(1U<<1)
#define CR1_CEN		(1U<<0)
#define OC_TOGGLE	((1U<<4) | (1U<<5))
#define CCER_CC1E	(1U<<0)
#define GPIOAEN 	(1U<<0)
#define AFR5_TIM	(1U<<20)
#define AFR6_TIM	(1U<<25)
#define CCER_CC1S	(1U<<0)


void tim2_1hz_init(void) {
	// enable clock access to timer2
	RCC->APB1ENR |= TIM2EN;

	// set prescalar value
	TIM2->PSC = 1600 - 1; // 16mhz / 1600 = 10000

	// set auto-reload value
	TIM2->ARR = 10000 - 1;


	// clear timer counter
	TIM2->CNT = 0;

	// enable the timer
	TIM2->CR1 |= CR1_CEN;


}

void tim2_pa5_output_compare(void) {

	// configure PA5
	// enable clock access to GPIOA
	RCC->APB1ENR |= GPIOAEN;

	// set PA5 mode to alternate function mode
	GPIOA->MODER &= ~(1U<<10);
	GPIOA->MODER |=  (1U<<11);

	// set alternate function type to TIM2->CH1 (AF01)
	GPIOA->AFR[0] |= AFR5_TIM;

	// enable clock access to timer2
	RCC->APB1ENR |= TIM2EN;

	// set prescalar value
	TIM2->PSC = 1600 - 1; // 16mhz / 1600 = 10000

	// set auto-reload value
	TIM2->ARR = 10000 - 1;

	// set output compare toggle mode
	TIM2->CCMR1 = OC_TOGGLE;

	// enable timer 2 channel 1 compare mode
	TIM2->CCER |= CCER_CC1E;

	// clear timer counter
	TIM2->CNT = 0;

	// enable the timer
	TIM2->CR1 |= CR1_CEN;
}

void tim3_pa6_input_capture(void) {
	// enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;

	// set PA6 mode to alternate function
	GPIOA->MODER &= ~(1U<<12);
	GPIOA->MODER |=  (1U<<13);

	// set PA6 alternate function type to TIM3_CH1 (AF02)
	GPIOA->AFR[0] |= AFR6_TIM;

	// enable clock access to tim3
	RCC->APB1ENR |= TIME3EN;

	// set prescalar
	TIM3->PSC = 16000 - 1; // 16mhz / 16000

	// set CH1 to input capture mode
	TIM3->CCMR1 = CCER_CC1S;

	// set ch1 to capture rising edge
	TIM3->CCER = CCER_CC1E;


	// enable tim3
}




