
6_uart_prinft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c40  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000dd8  08000dd8  00001dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dec  08000dec  0000205c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000dec  08000dec  0000205c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000dec  08000dec  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dec  08000dec  00001dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000df0  08000df0  00001df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000df4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000e50  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000e50  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c8f  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003ff  00000000  00000000  00002d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00003120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d7  00000000  00000000  00003258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fa40  00000000  00000000  0000332f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014dc  00000000  00000000  00012d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055acd  00000000  00000000  0001424b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00069d18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a5c  00000000  00000000  00069d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0006a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000dc0 	.word	0x08000dc0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08000dc0 	.word	0x08000dc0

080001d8 <main>:





int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	uart2_tx_init();
 80001dc:	f000 f806 	bl	80001ec <uart2_tx_init>



	while (1) {
		printf("Hello from STM32F4\n");
 80001e0:	4801      	ldr	r0, [pc, #4]	@ (80001e8 <main+0x10>)
 80001e2:	f000 fa59 	bl	8000698 <puts>
 80001e6:	e7fb      	b.n	80001e0 <main+0x8>
 80001e8:	08000dd8 	.word	0x08000dd8

080001ec <uart2_tx_init>:
int __io__putchar(int ch) {
	uart2_write(ch);
	return ch;
}

void uart2_tx_init(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	// configure the uart gpio pin
		// enable clock access to gpioa
		RCC->AHB1ENR |= GPIOAEN;
 80001f0:	4b20      	ldr	r3, [pc, #128]	@ (8000274 <uart2_tx_init+0x88>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000274 <uart2_tx_init+0x88>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6313      	str	r3, [r2, #48]	@ 0x30

		// set PA2 mode to alternate function mode
		GPIOA->MODER &= ~(1U<<4);
 80001fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000278 <uart2_tx_init+0x8c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a1d      	ldr	r2, [pc, #116]	@ (8000278 <uart2_tx_init+0x8c>)
 8000202:	f023 0310 	bic.w	r3, r3, #16
 8000206:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (1U<<5);
 8000208:	4b1b      	ldr	r3, [pc, #108]	@ (8000278 <uart2_tx_init+0x8c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a1a      	ldr	r2, [pc, #104]	@ (8000278 <uart2_tx_init+0x8c>)
 800020e:	f043 0320 	orr.w	r3, r3, #32
 8000212:	6013      	str	r3, [r2, #0]

		// set PA2 alternate function type to UART_TX (AF07)
		GPIOA->AFR[0] |= (1U<<8);
 8000214:	4b18      	ldr	r3, [pc, #96]	@ (8000278 <uart2_tx_init+0x8c>)
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	4a17      	ldr	r2, [pc, #92]	@ (8000278 <uart2_tx_init+0x8c>)
 800021a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800021e:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<9);
 8000220:	4b15      	ldr	r3, [pc, #84]	@ (8000278 <uart2_tx_init+0x8c>)
 8000222:	6a1b      	ldr	r3, [r3, #32]
 8000224:	4a14      	ldr	r2, [pc, #80]	@ (8000278 <uart2_tx_init+0x8c>)
 8000226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800022a:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<10);
 800022c:	4b12      	ldr	r3, [pc, #72]	@ (8000278 <uart2_tx_init+0x8c>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a11      	ldr	r2, [pc, #68]	@ (8000278 <uart2_tx_init+0x8c>)
 8000232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000236:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<11);
 8000238:	4b0f      	ldr	r3, [pc, #60]	@ (8000278 <uart2_tx_init+0x8c>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a0e      	ldr	r2, [pc, #56]	@ (8000278 <uart2_tx_init+0x8c>)
 800023e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000242:	6213      	str	r3, [r2, #32]

	// configure uart module
		// enable clock access to uart2
		RCC->APB1ENR |= UART2EN;
 8000244:	4b0b      	ldr	r3, [pc, #44]	@ (8000274 <uart2_tx_init+0x88>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000248:	4a0a      	ldr	r2, [pc, #40]	@ (8000274 <uart2_tx_init+0x88>)
 800024a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800024e:	6413      	str	r3, [r2, #64]	@ 0x40

		// configure baudrate
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000254:	4909      	ldr	r1, [pc, #36]	@ (800027c <uart2_tx_init+0x90>)
 8000256:	480a      	ldr	r0, [pc, #40]	@ (8000280 <uart2_tx_init+0x94>)
 8000258:	f000 f814 	bl	8000284 <uart_set_baudrate>

		// configure the transfer direction
		USART2->CR1 = CR1_TE;
 800025c:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <uart2_tx_init+0x94>)
 800025e:	2208      	movs	r2, #8
 8000260:	60da      	str	r2, [r3, #12]

		// enable the uart module
		USART2->CR1 |= CR1_UE;
 8000262:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <uart2_tx_init+0x94>)
 8000264:	68db      	ldr	r3, [r3, #12]
 8000266:	4a06      	ldr	r2, [pc, #24]	@ (8000280 <uart2_tx_init+0x94>)
 8000268:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800026c:	60d3      	str	r3, [r2, #12]
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020000 	.word	0x40020000
 800027c:	00f42400 	.word	0x00f42400
 8000280:	40004400 	.word	0x40004400

08000284 <uart_set_baudrate>:
	USART2->DR = (ch & 0xFF);

}


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate) {
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	60b9      	str	r1, [r7, #8]
 800028e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000290:	6879      	ldr	r1, [r7, #4]
 8000292:	68b8      	ldr	r0, [r7, #8]
 8000294:	f000 f808 	bl	80002a8 <compute_uart_bd>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	609a      	str	r2, [r3, #8]
}
 80002a0:	bf00      	nop
 80002a2:	3710      	adds	r7, #16
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	085a      	lsrs	r2, r3, #1
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	441a      	add	r2, r3
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	b29b      	uxth	r3, r3
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b086      	sub	sp, #24
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	60f8      	str	r0, [r7, #12]
 80002d6:	60b9      	str	r1, [r7, #8]
 80002d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e00a      	b.n	80002f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002e0:	f3af 8000 	nop.w
 80002e4:	4601      	mov	r1, r0
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	1c5a      	adds	r2, r3, #1
 80002ea:	60ba      	str	r2, [r7, #8]
 80002ec:	b2ca      	uxtb	r2, r1
 80002ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	3301      	adds	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	697a      	ldr	r2, [r7, #20]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	dbf0      	blt.n	80002e0 <_read+0x12>
  }

  return len;
 80002fe:	687b      	ldr	r3, [r7, #4]
}
 8000300:	4618      	mov	r0, r3
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	e009      	b.n	800032e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	1c5a      	adds	r2, r3, #1
 800031e:	60ba      	str	r2, [r7, #8]
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	4618      	mov	r0, r3
 8000324:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	3301      	adds	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	697a      	ldr	r2, [r7, #20]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	429a      	cmp	r2, r3
 8000334:	dbf1      	blt.n	800031a <_write+0x12>
  }
  return len;
 8000336:	687b      	ldr	r3, [r7, #4]
}
 8000338:	4618      	mov	r0, r3
 800033a:	3718      	adds	r7, #24
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <_close>:

int _close(int file)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800034c:	4618      	mov	r0, r3
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000368:	605a      	str	r2, [r3, #4]
  return 0;
 800036a:	2300      	movs	r3, #0
}
 800036c:	4618      	mov	r0, r3
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <_isatty>:

int _isatty(int file)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000380:	2301      	movs	r3, #1
}
 8000382:	4618      	mov	r0, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800038e:	b480      	push	{r7}
 8000390:	b085      	sub	sp, #20
 8000392:	af00      	add	r7, sp, #0
 8000394:	60f8      	str	r0, [r7, #12]
 8000396:	60b9      	str	r1, [r7, #8]
 8000398:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800039a:	2300      	movs	r3, #0
}
 800039c:	4618      	mov	r0, r3
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003b0:	4a14      	ldr	r2, [pc, #80]	@ (8000404 <_sbrk+0x5c>)
 80003b2:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <_sbrk+0x60>)
 80003b4:	1ad3      	subs	r3, r2, r3
 80003b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003bc:	4b13      	ldr	r3, [pc, #76]	@ (800040c <_sbrk+0x64>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d102      	bne.n	80003ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003c4:	4b11      	ldr	r3, [pc, #68]	@ (800040c <_sbrk+0x64>)
 80003c6:	4a12      	ldr	r2, [pc, #72]	@ (8000410 <_sbrk+0x68>)
 80003c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003ca:	4b10      	ldr	r3, [pc, #64]	@ (800040c <_sbrk+0x64>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4413      	add	r3, r2
 80003d2:	693a      	ldr	r2, [r7, #16]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d207      	bcs.n	80003e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003d8:	f000 f96e 	bl	80006b8 <__errno>
 80003dc:	4603      	mov	r3, r0
 80003de:	220c      	movs	r2, #12
 80003e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003e6:	e009      	b.n	80003fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <_sbrk+0x64>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003ee:	4b07      	ldr	r3, [pc, #28]	@ (800040c <_sbrk+0x64>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4413      	add	r3, r2
 80003f6:	4a05      	ldr	r2, [pc, #20]	@ (800040c <_sbrk+0x64>)
 80003f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003fa:	68fb      	ldr	r3, [r7, #12]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3718      	adds	r7, #24
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20020000 	.word	0x20020000
 8000408:	00000400 	.word	0x00000400
 800040c:	20000078 	.word	0x20000078
 8000410:	200001c8 	.word	0x200001c8

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	@ (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000418:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	@ (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	@ (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	@ (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	@ (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	@ (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 f93f 	bl	80006c4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000446:	f7ff fec7 	bl	80001d8 <main>

0800044a <LoopForever>:

LoopForever:
  b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000458:	08000df4 	.word	0x08000df4
  ldr r2, =_sbss
 800045c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000460:	200001c8 	.word	0x200001c8

08000464 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_IRQHandler>
	...

08000468 <std>:
 8000468:	2300      	movs	r3, #0
 800046a:	b510      	push	{r4, lr}
 800046c:	4604      	mov	r4, r0
 800046e:	e9c0 3300 	strd	r3, r3, [r0]
 8000472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000476:	6083      	str	r3, [r0, #8]
 8000478:	8181      	strh	r1, [r0, #12]
 800047a:	6643      	str	r3, [r0, #100]	@ 0x64
 800047c:	81c2      	strh	r2, [r0, #14]
 800047e:	6183      	str	r3, [r0, #24]
 8000480:	4619      	mov	r1, r3
 8000482:	2208      	movs	r2, #8
 8000484:	305c      	adds	r0, #92	@ 0x5c
 8000486:	f000 f90f 	bl	80006a8 <memset>
 800048a:	4b0d      	ldr	r3, [pc, #52]	@ (80004c0 <std+0x58>)
 800048c:	6263      	str	r3, [r4, #36]	@ 0x24
 800048e:	4b0d      	ldr	r3, [pc, #52]	@ (80004c4 <std+0x5c>)
 8000490:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000492:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <std+0x60>)
 8000494:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000496:	4b0d      	ldr	r3, [pc, #52]	@ (80004cc <std+0x64>)
 8000498:	6323      	str	r3, [r4, #48]	@ 0x30
 800049a:	4b0d      	ldr	r3, [pc, #52]	@ (80004d0 <std+0x68>)
 800049c:	6224      	str	r4, [r4, #32]
 800049e:	429c      	cmp	r4, r3
 80004a0:	d006      	beq.n	80004b0 <std+0x48>
 80004a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80004a6:	4294      	cmp	r4, r2
 80004a8:	d002      	beq.n	80004b0 <std+0x48>
 80004aa:	33d0      	adds	r3, #208	@ 0xd0
 80004ac:	429c      	cmp	r4, r3
 80004ae:	d105      	bne.n	80004bc <std+0x54>
 80004b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80004b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004b8:	f000 b928 	b.w	800070c <__retarget_lock_init_recursive>
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	bf00      	nop
 80004c0:	080009c9 	.word	0x080009c9
 80004c4:	080009eb 	.word	0x080009eb
 80004c8:	08000a23 	.word	0x08000a23
 80004cc:	08000a47 	.word	0x08000a47
 80004d0:	2000007c 	.word	0x2000007c

080004d4 <stdio_exit_handler>:
 80004d4:	4a02      	ldr	r2, [pc, #8]	@ (80004e0 <stdio_exit_handler+0xc>)
 80004d6:	4903      	ldr	r1, [pc, #12]	@ (80004e4 <stdio_exit_handler+0x10>)
 80004d8:	4803      	ldr	r0, [pc, #12]	@ (80004e8 <stdio_exit_handler+0x14>)
 80004da:	f000 b869 	b.w	80005b0 <_fwalk_sglue>
 80004de:	bf00      	nop
 80004e0:	20000000 	.word	0x20000000
 80004e4:	08000961 	.word	0x08000961
 80004e8:	20000010 	.word	0x20000010

080004ec <cleanup_stdio>:
 80004ec:	6841      	ldr	r1, [r0, #4]
 80004ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <cleanup_stdio+0x34>)
 80004f0:	4299      	cmp	r1, r3
 80004f2:	b510      	push	{r4, lr}
 80004f4:	4604      	mov	r4, r0
 80004f6:	d001      	beq.n	80004fc <cleanup_stdio+0x10>
 80004f8:	f000 fa32 	bl	8000960 <_fflush_r>
 80004fc:	68a1      	ldr	r1, [r4, #8]
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <cleanup_stdio+0x38>)
 8000500:	4299      	cmp	r1, r3
 8000502:	d002      	beq.n	800050a <cleanup_stdio+0x1e>
 8000504:	4620      	mov	r0, r4
 8000506:	f000 fa2b 	bl	8000960 <_fflush_r>
 800050a:	68e1      	ldr	r1, [r4, #12]
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <cleanup_stdio+0x3c>)
 800050e:	4299      	cmp	r1, r3
 8000510:	d004      	beq.n	800051c <cleanup_stdio+0x30>
 8000512:	4620      	mov	r0, r4
 8000514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000518:	f000 ba22 	b.w	8000960 <_fflush_r>
 800051c:	bd10      	pop	{r4, pc}
 800051e:	bf00      	nop
 8000520:	2000007c 	.word	0x2000007c
 8000524:	200000e4 	.word	0x200000e4
 8000528:	2000014c 	.word	0x2000014c

0800052c <global_stdio_init.part.0>:
 800052c:	b510      	push	{r4, lr}
 800052e:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <global_stdio_init.part.0+0x30>)
 8000530:	4c0b      	ldr	r4, [pc, #44]	@ (8000560 <global_stdio_init.part.0+0x34>)
 8000532:	4a0c      	ldr	r2, [pc, #48]	@ (8000564 <global_stdio_init.part.0+0x38>)
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	4620      	mov	r0, r4
 8000538:	2200      	movs	r2, #0
 800053a:	2104      	movs	r1, #4
 800053c:	f7ff ff94 	bl	8000468 <std>
 8000540:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000544:	2201      	movs	r2, #1
 8000546:	2109      	movs	r1, #9
 8000548:	f7ff ff8e 	bl	8000468 <std>
 800054c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000550:	2202      	movs	r2, #2
 8000552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000556:	2112      	movs	r1, #18
 8000558:	f7ff bf86 	b.w	8000468 <std>
 800055c:	200001b4 	.word	0x200001b4
 8000560:	2000007c 	.word	0x2000007c
 8000564:	080004d5 	.word	0x080004d5

08000568 <__sfp_lock_acquire>:
 8000568:	4801      	ldr	r0, [pc, #4]	@ (8000570 <__sfp_lock_acquire+0x8>)
 800056a:	f000 b8d0 	b.w	800070e <__retarget_lock_acquire_recursive>
 800056e:	bf00      	nop
 8000570:	200001b9 	.word	0x200001b9

08000574 <__sfp_lock_release>:
 8000574:	4801      	ldr	r0, [pc, #4]	@ (800057c <__sfp_lock_release+0x8>)
 8000576:	f000 b8cb 	b.w	8000710 <__retarget_lock_release_recursive>
 800057a:	bf00      	nop
 800057c:	200001b9 	.word	0x200001b9

08000580 <__sinit>:
 8000580:	b510      	push	{r4, lr}
 8000582:	4604      	mov	r4, r0
 8000584:	f7ff fff0 	bl	8000568 <__sfp_lock_acquire>
 8000588:	6a23      	ldr	r3, [r4, #32]
 800058a:	b11b      	cbz	r3, 8000594 <__sinit+0x14>
 800058c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000590:	f7ff bff0 	b.w	8000574 <__sfp_lock_release>
 8000594:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <__sinit+0x28>)
 8000596:	6223      	str	r3, [r4, #32]
 8000598:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <__sinit+0x2c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1f5      	bne.n	800058c <__sinit+0xc>
 80005a0:	f7ff ffc4 	bl	800052c <global_stdio_init.part.0>
 80005a4:	e7f2      	b.n	800058c <__sinit+0xc>
 80005a6:	bf00      	nop
 80005a8:	080004ed 	.word	0x080004ed
 80005ac:	200001b4 	.word	0x200001b4

080005b0 <_fwalk_sglue>:
 80005b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005b4:	4607      	mov	r7, r0
 80005b6:	4688      	mov	r8, r1
 80005b8:	4614      	mov	r4, r2
 80005ba:	2600      	movs	r6, #0
 80005bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80005c0:	f1b9 0901 	subs.w	r9, r9, #1
 80005c4:	d505      	bpl.n	80005d2 <_fwalk_sglue+0x22>
 80005c6:	6824      	ldr	r4, [r4, #0]
 80005c8:	2c00      	cmp	r4, #0
 80005ca:	d1f7      	bne.n	80005bc <_fwalk_sglue+0xc>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80005d2:	89ab      	ldrh	r3, [r5, #12]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d907      	bls.n	80005e8 <_fwalk_sglue+0x38>
 80005d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80005dc:	3301      	adds	r3, #1
 80005de:	d003      	beq.n	80005e8 <_fwalk_sglue+0x38>
 80005e0:	4629      	mov	r1, r5
 80005e2:	4638      	mov	r0, r7
 80005e4:	47c0      	blx	r8
 80005e6:	4306      	orrs	r6, r0
 80005e8:	3568      	adds	r5, #104	@ 0x68
 80005ea:	e7e9      	b.n	80005c0 <_fwalk_sglue+0x10>

080005ec <_puts_r>:
 80005ec:	6a03      	ldr	r3, [r0, #32]
 80005ee:	b570      	push	{r4, r5, r6, lr}
 80005f0:	6884      	ldr	r4, [r0, #8]
 80005f2:	4605      	mov	r5, r0
 80005f4:	460e      	mov	r6, r1
 80005f6:	b90b      	cbnz	r3, 80005fc <_puts_r+0x10>
 80005f8:	f7ff ffc2 	bl	8000580 <__sinit>
 80005fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80005fe:	07db      	lsls	r3, r3, #31
 8000600:	d405      	bmi.n	800060e <_puts_r+0x22>
 8000602:	89a3      	ldrh	r3, [r4, #12]
 8000604:	0598      	lsls	r0, r3, #22
 8000606:	d402      	bmi.n	800060e <_puts_r+0x22>
 8000608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800060a:	f000 f880 	bl	800070e <__retarget_lock_acquire_recursive>
 800060e:	89a3      	ldrh	r3, [r4, #12]
 8000610:	0719      	lsls	r1, r3, #28
 8000612:	d502      	bpl.n	800061a <_puts_r+0x2e>
 8000614:	6923      	ldr	r3, [r4, #16]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d135      	bne.n	8000686 <_puts_r+0x9a>
 800061a:	4621      	mov	r1, r4
 800061c:	4628      	mov	r0, r5
 800061e:	f000 fa55 	bl	8000acc <__swsetup_r>
 8000622:	b380      	cbz	r0, 8000686 <_puts_r+0x9a>
 8000624:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000628:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800062a:	07da      	lsls	r2, r3, #31
 800062c:	d405      	bmi.n	800063a <_puts_r+0x4e>
 800062e:	89a3      	ldrh	r3, [r4, #12]
 8000630:	059b      	lsls	r3, r3, #22
 8000632:	d402      	bmi.n	800063a <_puts_r+0x4e>
 8000634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000636:	f000 f86b 	bl	8000710 <__retarget_lock_release_recursive>
 800063a:	4628      	mov	r0, r5
 800063c:	bd70      	pop	{r4, r5, r6, pc}
 800063e:	2b00      	cmp	r3, #0
 8000640:	da04      	bge.n	800064c <_puts_r+0x60>
 8000642:	69a2      	ldr	r2, [r4, #24]
 8000644:	429a      	cmp	r2, r3
 8000646:	dc17      	bgt.n	8000678 <_puts_r+0x8c>
 8000648:	290a      	cmp	r1, #10
 800064a:	d015      	beq.n	8000678 <_puts_r+0x8c>
 800064c:	6823      	ldr	r3, [r4, #0]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	6022      	str	r2, [r4, #0]
 8000652:	7019      	strb	r1, [r3, #0]
 8000654:	68a3      	ldr	r3, [r4, #8]
 8000656:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800065a:	3b01      	subs	r3, #1
 800065c:	60a3      	str	r3, [r4, #8]
 800065e:	2900      	cmp	r1, #0
 8000660:	d1ed      	bne.n	800063e <_puts_r+0x52>
 8000662:	2b00      	cmp	r3, #0
 8000664:	da11      	bge.n	800068a <_puts_r+0x9e>
 8000666:	4622      	mov	r2, r4
 8000668:	210a      	movs	r1, #10
 800066a:	4628      	mov	r0, r5
 800066c:	f000 f9ef 	bl	8000a4e <__swbuf_r>
 8000670:	3001      	adds	r0, #1
 8000672:	d0d7      	beq.n	8000624 <_puts_r+0x38>
 8000674:	250a      	movs	r5, #10
 8000676:	e7d7      	b.n	8000628 <_puts_r+0x3c>
 8000678:	4622      	mov	r2, r4
 800067a:	4628      	mov	r0, r5
 800067c:	f000 f9e7 	bl	8000a4e <__swbuf_r>
 8000680:	3001      	adds	r0, #1
 8000682:	d1e7      	bne.n	8000654 <_puts_r+0x68>
 8000684:	e7ce      	b.n	8000624 <_puts_r+0x38>
 8000686:	3e01      	subs	r6, #1
 8000688:	e7e4      	b.n	8000654 <_puts_r+0x68>
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	6022      	str	r2, [r4, #0]
 8000690:	220a      	movs	r2, #10
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e7ee      	b.n	8000674 <_puts_r+0x88>
	...

08000698 <puts>:
 8000698:	4b02      	ldr	r3, [pc, #8]	@ (80006a4 <puts+0xc>)
 800069a:	4601      	mov	r1, r0
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	f7ff bfa5 	b.w	80005ec <_puts_r>
 80006a2:	bf00      	nop
 80006a4:	2000000c 	.word	0x2000000c

080006a8 <memset>:
 80006a8:	4402      	add	r2, r0
 80006aa:	4603      	mov	r3, r0
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d100      	bne.n	80006b2 <memset+0xa>
 80006b0:	4770      	bx	lr
 80006b2:	f803 1b01 	strb.w	r1, [r3], #1
 80006b6:	e7f9      	b.n	80006ac <memset+0x4>

080006b8 <__errno>:
 80006b8:	4b01      	ldr	r3, [pc, #4]	@ (80006c0 <__errno+0x8>)
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2000000c 	.word	0x2000000c

080006c4 <__libc_init_array>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	4d0d      	ldr	r5, [pc, #52]	@ (80006fc <__libc_init_array+0x38>)
 80006c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000700 <__libc_init_array+0x3c>)
 80006ca:	1b64      	subs	r4, r4, r5
 80006cc:	10a4      	asrs	r4, r4, #2
 80006ce:	2600      	movs	r6, #0
 80006d0:	42a6      	cmp	r6, r4
 80006d2:	d109      	bne.n	80006e8 <__libc_init_array+0x24>
 80006d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000704 <__libc_init_array+0x40>)
 80006d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000708 <__libc_init_array+0x44>)
 80006d8:	f000 fb72 	bl	8000dc0 <_init>
 80006dc:	1b64      	subs	r4, r4, r5
 80006de:	10a4      	asrs	r4, r4, #2
 80006e0:	2600      	movs	r6, #0
 80006e2:	42a6      	cmp	r6, r4
 80006e4:	d105      	bne.n	80006f2 <__libc_init_array+0x2e>
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ec:	4798      	blx	r3
 80006ee:	3601      	adds	r6, #1
 80006f0:	e7ee      	b.n	80006d0 <__libc_init_array+0xc>
 80006f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f6:	4798      	blx	r3
 80006f8:	3601      	adds	r6, #1
 80006fa:	e7f2      	b.n	80006e2 <__libc_init_array+0x1e>
 80006fc:	08000dec 	.word	0x08000dec
 8000700:	08000dec 	.word	0x08000dec
 8000704:	08000dec 	.word	0x08000dec
 8000708:	08000df0 	.word	0x08000df0

0800070c <__retarget_lock_init_recursive>:
 800070c:	4770      	bx	lr

0800070e <__retarget_lock_acquire_recursive>:
 800070e:	4770      	bx	lr

08000710 <__retarget_lock_release_recursive>:
 8000710:	4770      	bx	lr
	...

08000714 <sbrk_aligned>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	4e0f      	ldr	r6, [pc, #60]	@ (8000754 <sbrk_aligned+0x40>)
 8000718:	460c      	mov	r4, r1
 800071a:	6831      	ldr	r1, [r6, #0]
 800071c:	4605      	mov	r5, r0
 800071e:	b911      	cbnz	r1, 8000726 <sbrk_aligned+0x12>
 8000720:	f000 fac0 	bl	8000ca4 <_sbrk_r>
 8000724:	6030      	str	r0, [r6, #0]
 8000726:	4621      	mov	r1, r4
 8000728:	4628      	mov	r0, r5
 800072a:	f000 fabb 	bl	8000ca4 <_sbrk_r>
 800072e:	1c43      	adds	r3, r0, #1
 8000730:	d103      	bne.n	800073a <sbrk_aligned+0x26>
 8000732:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000736:	4620      	mov	r0, r4
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	1cc4      	adds	r4, r0, #3
 800073c:	f024 0403 	bic.w	r4, r4, #3
 8000740:	42a0      	cmp	r0, r4
 8000742:	d0f8      	beq.n	8000736 <sbrk_aligned+0x22>
 8000744:	1a21      	subs	r1, r4, r0
 8000746:	4628      	mov	r0, r5
 8000748:	f000 faac 	bl	8000ca4 <_sbrk_r>
 800074c:	3001      	adds	r0, #1
 800074e:	d1f2      	bne.n	8000736 <sbrk_aligned+0x22>
 8000750:	e7ef      	b.n	8000732 <sbrk_aligned+0x1e>
 8000752:	bf00      	nop
 8000754:	200001bc 	.word	0x200001bc

08000758 <_malloc_r>:
 8000758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800075c:	1ccd      	adds	r5, r1, #3
 800075e:	f025 0503 	bic.w	r5, r5, #3
 8000762:	3508      	adds	r5, #8
 8000764:	2d0c      	cmp	r5, #12
 8000766:	bf38      	it	cc
 8000768:	250c      	movcc	r5, #12
 800076a:	2d00      	cmp	r5, #0
 800076c:	4606      	mov	r6, r0
 800076e:	db01      	blt.n	8000774 <_malloc_r+0x1c>
 8000770:	42a9      	cmp	r1, r5
 8000772:	d904      	bls.n	800077e <_malloc_r+0x26>
 8000774:	230c      	movs	r3, #12
 8000776:	6033      	str	r3, [r6, #0]
 8000778:	2000      	movs	r0, #0
 800077a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800077e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000854 <_malloc_r+0xfc>
 8000782:	f000 f915 	bl	80009b0 <__malloc_lock>
 8000786:	f8d8 3000 	ldr.w	r3, [r8]
 800078a:	461c      	mov	r4, r3
 800078c:	bb44      	cbnz	r4, 80007e0 <_malloc_r+0x88>
 800078e:	4629      	mov	r1, r5
 8000790:	4630      	mov	r0, r6
 8000792:	f7ff ffbf 	bl	8000714 <sbrk_aligned>
 8000796:	1c43      	adds	r3, r0, #1
 8000798:	4604      	mov	r4, r0
 800079a:	d158      	bne.n	800084e <_malloc_r+0xf6>
 800079c:	f8d8 4000 	ldr.w	r4, [r8]
 80007a0:	4627      	mov	r7, r4
 80007a2:	2f00      	cmp	r7, #0
 80007a4:	d143      	bne.n	800082e <_malloc_r+0xd6>
 80007a6:	2c00      	cmp	r4, #0
 80007a8:	d04b      	beq.n	8000842 <_malloc_r+0xea>
 80007aa:	6823      	ldr	r3, [r4, #0]
 80007ac:	4639      	mov	r1, r7
 80007ae:	4630      	mov	r0, r6
 80007b0:	eb04 0903 	add.w	r9, r4, r3
 80007b4:	f000 fa76 	bl	8000ca4 <_sbrk_r>
 80007b8:	4581      	cmp	r9, r0
 80007ba:	d142      	bne.n	8000842 <_malloc_r+0xea>
 80007bc:	6821      	ldr	r1, [r4, #0]
 80007be:	1a6d      	subs	r5, r5, r1
 80007c0:	4629      	mov	r1, r5
 80007c2:	4630      	mov	r0, r6
 80007c4:	f7ff ffa6 	bl	8000714 <sbrk_aligned>
 80007c8:	3001      	adds	r0, #1
 80007ca:	d03a      	beq.n	8000842 <_malloc_r+0xea>
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	442b      	add	r3, r5
 80007d0:	6023      	str	r3, [r4, #0]
 80007d2:	f8d8 3000 	ldr.w	r3, [r8]
 80007d6:	685a      	ldr	r2, [r3, #4]
 80007d8:	bb62      	cbnz	r2, 8000834 <_malloc_r+0xdc>
 80007da:	f8c8 7000 	str.w	r7, [r8]
 80007de:	e00f      	b.n	8000800 <_malloc_r+0xa8>
 80007e0:	6822      	ldr	r2, [r4, #0]
 80007e2:	1b52      	subs	r2, r2, r5
 80007e4:	d420      	bmi.n	8000828 <_malloc_r+0xd0>
 80007e6:	2a0b      	cmp	r2, #11
 80007e8:	d917      	bls.n	800081a <_malloc_r+0xc2>
 80007ea:	1961      	adds	r1, r4, r5
 80007ec:	42a3      	cmp	r3, r4
 80007ee:	6025      	str	r5, [r4, #0]
 80007f0:	bf18      	it	ne
 80007f2:	6059      	strne	r1, [r3, #4]
 80007f4:	6863      	ldr	r3, [r4, #4]
 80007f6:	bf08      	it	eq
 80007f8:	f8c8 1000 	streq.w	r1, [r8]
 80007fc:	5162      	str	r2, [r4, r5]
 80007fe:	604b      	str	r3, [r1, #4]
 8000800:	4630      	mov	r0, r6
 8000802:	f000 f8db 	bl	80009bc <__malloc_unlock>
 8000806:	f104 000b 	add.w	r0, r4, #11
 800080a:	1d23      	adds	r3, r4, #4
 800080c:	f020 0007 	bic.w	r0, r0, #7
 8000810:	1ac2      	subs	r2, r0, r3
 8000812:	bf1c      	itt	ne
 8000814:	1a1b      	subne	r3, r3, r0
 8000816:	50a3      	strne	r3, [r4, r2]
 8000818:	e7af      	b.n	800077a <_malloc_r+0x22>
 800081a:	6862      	ldr	r2, [r4, #4]
 800081c:	42a3      	cmp	r3, r4
 800081e:	bf0c      	ite	eq
 8000820:	f8c8 2000 	streq.w	r2, [r8]
 8000824:	605a      	strne	r2, [r3, #4]
 8000826:	e7eb      	b.n	8000800 <_malloc_r+0xa8>
 8000828:	4623      	mov	r3, r4
 800082a:	6864      	ldr	r4, [r4, #4]
 800082c:	e7ae      	b.n	800078c <_malloc_r+0x34>
 800082e:	463c      	mov	r4, r7
 8000830:	687f      	ldr	r7, [r7, #4]
 8000832:	e7b6      	b.n	80007a2 <_malloc_r+0x4a>
 8000834:	461a      	mov	r2, r3
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	42a3      	cmp	r3, r4
 800083a:	d1fb      	bne.n	8000834 <_malloc_r+0xdc>
 800083c:	2300      	movs	r3, #0
 800083e:	6053      	str	r3, [r2, #4]
 8000840:	e7de      	b.n	8000800 <_malloc_r+0xa8>
 8000842:	230c      	movs	r3, #12
 8000844:	6033      	str	r3, [r6, #0]
 8000846:	4630      	mov	r0, r6
 8000848:	f000 f8b8 	bl	80009bc <__malloc_unlock>
 800084c:	e794      	b.n	8000778 <_malloc_r+0x20>
 800084e:	6005      	str	r5, [r0, #0]
 8000850:	e7d6      	b.n	8000800 <_malloc_r+0xa8>
 8000852:	bf00      	nop
 8000854:	200001c0 	.word	0x200001c0

08000858 <__sflush_r>:
 8000858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800085c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000860:	0716      	lsls	r6, r2, #28
 8000862:	4605      	mov	r5, r0
 8000864:	460c      	mov	r4, r1
 8000866:	d454      	bmi.n	8000912 <__sflush_r+0xba>
 8000868:	684b      	ldr	r3, [r1, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	dc02      	bgt.n	8000874 <__sflush_r+0x1c>
 800086e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000870:	2b00      	cmp	r3, #0
 8000872:	dd48      	ble.n	8000906 <__sflush_r+0xae>
 8000874:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000876:	2e00      	cmp	r6, #0
 8000878:	d045      	beq.n	8000906 <__sflush_r+0xae>
 800087a:	2300      	movs	r3, #0
 800087c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000880:	682f      	ldr	r7, [r5, #0]
 8000882:	6a21      	ldr	r1, [r4, #32]
 8000884:	602b      	str	r3, [r5, #0]
 8000886:	d030      	beq.n	80008ea <__sflush_r+0x92>
 8000888:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800088a:	89a3      	ldrh	r3, [r4, #12]
 800088c:	0759      	lsls	r1, r3, #29
 800088e:	d505      	bpl.n	800089c <__sflush_r+0x44>
 8000890:	6863      	ldr	r3, [r4, #4]
 8000892:	1ad2      	subs	r2, r2, r3
 8000894:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000896:	b10b      	cbz	r3, 800089c <__sflush_r+0x44>
 8000898:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800089a:	1ad2      	subs	r2, r2, r3
 800089c:	2300      	movs	r3, #0
 800089e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80008a0:	6a21      	ldr	r1, [r4, #32]
 80008a2:	4628      	mov	r0, r5
 80008a4:	47b0      	blx	r6
 80008a6:	1c43      	adds	r3, r0, #1
 80008a8:	89a3      	ldrh	r3, [r4, #12]
 80008aa:	d106      	bne.n	80008ba <__sflush_r+0x62>
 80008ac:	6829      	ldr	r1, [r5, #0]
 80008ae:	291d      	cmp	r1, #29
 80008b0:	d82b      	bhi.n	800090a <__sflush_r+0xb2>
 80008b2:	4a2a      	ldr	r2, [pc, #168]	@ (800095c <__sflush_r+0x104>)
 80008b4:	40ca      	lsrs	r2, r1
 80008b6:	07d6      	lsls	r6, r2, #31
 80008b8:	d527      	bpl.n	800090a <__sflush_r+0xb2>
 80008ba:	2200      	movs	r2, #0
 80008bc:	6062      	str	r2, [r4, #4]
 80008be:	04d9      	lsls	r1, r3, #19
 80008c0:	6922      	ldr	r2, [r4, #16]
 80008c2:	6022      	str	r2, [r4, #0]
 80008c4:	d504      	bpl.n	80008d0 <__sflush_r+0x78>
 80008c6:	1c42      	adds	r2, r0, #1
 80008c8:	d101      	bne.n	80008ce <__sflush_r+0x76>
 80008ca:	682b      	ldr	r3, [r5, #0]
 80008cc:	b903      	cbnz	r3, 80008d0 <__sflush_r+0x78>
 80008ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80008d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80008d2:	602f      	str	r7, [r5, #0]
 80008d4:	b1b9      	cbz	r1, 8000906 <__sflush_r+0xae>
 80008d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80008da:	4299      	cmp	r1, r3
 80008dc:	d002      	beq.n	80008e4 <__sflush_r+0x8c>
 80008de:	4628      	mov	r0, r5
 80008e0:	f000 fa24 	bl	8000d2c <_free_r>
 80008e4:	2300      	movs	r3, #0
 80008e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80008e8:	e00d      	b.n	8000906 <__sflush_r+0xae>
 80008ea:	2301      	movs	r3, #1
 80008ec:	4628      	mov	r0, r5
 80008ee:	47b0      	blx	r6
 80008f0:	4602      	mov	r2, r0
 80008f2:	1c50      	adds	r0, r2, #1
 80008f4:	d1c9      	bne.n	800088a <__sflush_r+0x32>
 80008f6:	682b      	ldr	r3, [r5, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d0c6      	beq.n	800088a <__sflush_r+0x32>
 80008fc:	2b1d      	cmp	r3, #29
 80008fe:	d001      	beq.n	8000904 <__sflush_r+0xac>
 8000900:	2b16      	cmp	r3, #22
 8000902:	d11e      	bne.n	8000942 <__sflush_r+0xea>
 8000904:	602f      	str	r7, [r5, #0]
 8000906:	2000      	movs	r0, #0
 8000908:	e022      	b.n	8000950 <__sflush_r+0xf8>
 800090a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800090e:	b21b      	sxth	r3, r3
 8000910:	e01b      	b.n	800094a <__sflush_r+0xf2>
 8000912:	690f      	ldr	r7, [r1, #16]
 8000914:	2f00      	cmp	r7, #0
 8000916:	d0f6      	beq.n	8000906 <__sflush_r+0xae>
 8000918:	0793      	lsls	r3, r2, #30
 800091a:	680e      	ldr	r6, [r1, #0]
 800091c:	bf08      	it	eq
 800091e:	694b      	ldreq	r3, [r1, #20]
 8000920:	600f      	str	r7, [r1, #0]
 8000922:	bf18      	it	ne
 8000924:	2300      	movne	r3, #0
 8000926:	eba6 0807 	sub.w	r8, r6, r7
 800092a:	608b      	str	r3, [r1, #8]
 800092c:	f1b8 0f00 	cmp.w	r8, #0
 8000930:	dde9      	ble.n	8000906 <__sflush_r+0xae>
 8000932:	6a21      	ldr	r1, [r4, #32]
 8000934:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000936:	4643      	mov	r3, r8
 8000938:	463a      	mov	r2, r7
 800093a:	4628      	mov	r0, r5
 800093c:	47b0      	blx	r6
 800093e:	2800      	cmp	r0, #0
 8000940:	dc08      	bgt.n	8000954 <__sflush_r+0xfc>
 8000942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800094a:	81a3      	strh	r3, [r4, #12]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000954:	4407      	add	r7, r0
 8000956:	eba8 0800 	sub.w	r8, r8, r0
 800095a:	e7e7      	b.n	800092c <__sflush_r+0xd4>
 800095c:	20400001 	.word	0x20400001

08000960 <_fflush_r>:
 8000960:	b538      	push	{r3, r4, r5, lr}
 8000962:	690b      	ldr	r3, [r1, #16]
 8000964:	4605      	mov	r5, r0
 8000966:	460c      	mov	r4, r1
 8000968:	b913      	cbnz	r3, 8000970 <_fflush_r+0x10>
 800096a:	2500      	movs	r5, #0
 800096c:	4628      	mov	r0, r5
 800096e:	bd38      	pop	{r3, r4, r5, pc}
 8000970:	b118      	cbz	r0, 800097a <_fflush_r+0x1a>
 8000972:	6a03      	ldr	r3, [r0, #32]
 8000974:	b90b      	cbnz	r3, 800097a <_fflush_r+0x1a>
 8000976:	f7ff fe03 	bl	8000580 <__sinit>
 800097a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f3      	beq.n	800096a <_fflush_r+0xa>
 8000982:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000984:	07d0      	lsls	r0, r2, #31
 8000986:	d404      	bmi.n	8000992 <_fflush_r+0x32>
 8000988:	0599      	lsls	r1, r3, #22
 800098a:	d402      	bmi.n	8000992 <_fflush_r+0x32>
 800098c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800098e:	f7ff febe 	bl	800070e <__retarget_lock_acquire_recursive>
 8000992:	4628      	mov	r0, r5
 8000994:	4621      	mov	r1, r4
 8000996:	f7ff ff5f 	bl	8000858 <__sflush_r>
 800099a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800099c:	07da      	lsls	r2, r3, #31
 800099e:	4605      	mov	r5, r0
 80009a0:	d4e4      	bmi.n	800096c <_fflush_r+0xc>
 80009a2:	89a3      	ldrh	r3, [r4, #12]
 80009a4:	059b      	lsls	r3, r3, #22
 80009a6:	d4e1      	bmi.n	800096c <_fflush_r+0xc>
 80009a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80009aa:	f7ff feb1 	bl	8000710 <__retarget_lock_release_recursive>
 80009ae:	e7dd      	b.n	800096c <_fflush_r+0xc>

080009b0 <__malloc_lock>:
 80009b0:	4801      	ldr	r0, [pc, #4]	@ (80009b8 <__malloc_lock+0x8>)
 80009b2:	f7ff beac 	b.w	800070e <__retarget_lock_acquire_recursive>
 80009b6:	bf00      	nop
 80009b8:	200001b8 	.word	0x200001b8

080009bc <__malloc_unlock>:
 80009bc:	4801      	ldr	r0, [pc, #4]	@ (80009c4 <__malloc_unlock+0x8>)
 80009be:	f7ff bea7 	b.w	8000710 <__retarget_lock_release_recursive>
 80009c2:	bf00      	nop
 80009c4:	200001b8 	.word	0x200001b8

080009c8 <__sread>:
 80009c8:	b510      	push	{r4, lr}
 80009ca:	460c      	mov	r4, r1
 80009cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009d0:	f000 f956 	bl	8000c80 <_read_r>
 80009d4:	2800      	cmp	r0, #0
 80009d6:	bfab      	itete	ge
 80009d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80009da:	89a3      	ldrhlt	r3, [r4, #12]
 80009dc:	181b      	addge	r3, r3, r0
 80009de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80009e2:	bfac      	ite	ge
 80009e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80009e6:	81a3      	strhlt	r3, [r4, #12]
 80009e8:	bd10      	pop	{r4, pc}

080009ea <__swrite>:
 80009ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ee:	461f      	mov	r7, r3
 80009f0:	898b      	ldrh	r3, [r1, #12]
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	4605      	mov	r5, r0
 80009f6:	460c      	mov	r4, r1
 80009f8:	4616      	mov	r6, r2
 80009fa:	d505      	bpl.n	8000a08 <__swrite+0x1e>
 80009fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a00:	2302      	movs	r3, #2
 8000a02:	2200      	movs	r2, #0
 8000a04:	f000 f92a 	bl	8000c5c <_lseek_r>
 8000a08:	89a3      	ldrh	r3, [r4, #12]
 8000a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a12:	81a3      	strh	r3, [r4, #12]
 8000a14:	4632      	mov	r2, r6
 8000a16:	463b      	mov	r3, r7
 8000a18:	4628      	mov	r0, r5
 8000a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1e:	f000 b951 	b.w	8000cc4 <_write_r>

08000a22 <__sseek>:
 8000a22:	b510      	push	{r4, lr}
 8000a24:	460c      	mov	r4, r1
 8000a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a2a:	f000 f917 	bl	8000c5c <_lseek_r>
 8000a2e:	1c43      	adds	r3, r0, #1
 8000a30:	89a3      	ldrh	r3, [r4, #12]
 8000a32:	bf15      	itete	ne
 8000a34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a3e:	81a3      	strheq	r3, [r4, #12]
 8000a40:	bf18      	it	ne
 8000a42:	81a3      	strhne	r3, [r4, #12]
 8000a44:	bd10      	pop	{r4, pc}

08000a46 <__sclose>:
 8000a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a4a:	f000 b94d 	b.w	8000ce8 <_close_r>

08000a4e <__swbuf_r>:
 8000a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a50:	460e      	mov	r6, r1
 8000a52:	4614      	mov	r4, r2
 8000a54:	4605      	mov	r5, r0
 8000a56:	b118      	cbz	r0, 8000a60 <__swbuf_r+0x12>
 8000a58:	6a03      	ldr	r3, [r0, #32]
 8000a5a:	b90b      	cbnz	r3, 8000a60 <__swbuf_r+0x12>
 8000a5c:	f7ff fd90 	bl	8000580 <__sinit>
 8000a60:	69a3      	ldr	r3, [r4, #24]
 8000a62:	60a3      	str	r3, [r4, #8]
 8000a64:	89a3      	ldrh	r3, [r4, #12]
 8000a66:	071a      	lsls	r2, r3, #28
 8000a68:	d501      	bpl.n	8000a6e <__swbuf_r+0x20>
 8000a6a:	6923      	ldr	r3, [r4, #16]
 8000a6c:	b943      	cbnz	r3, 8000a80 <__swbuf_r+0x32>
 8000a6e:	4621      	mov	r1, r4
 8000a70:	4628      	mov	r0, r5
 8000a72:	f000 f82b 	bl	8000acc <__swsetup_r>
 8000a76:	b118      	cbz	r0, 8000a80 <__swbuf_r+0x32>
 8000a78:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000a7c:	4638      	mov	r0, r7
 8000a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	6922      	ldr	r2, [r4, #16]
 8000a84:	1a98      	subs	r0, r3, r2
 8000a86:	6963      	ldr	r3, [r4, #20]
 8000a88:	b2f6      	uxtb	r6, r6
 8000a8a:	4283      	cmp	r3, r0
 8000a8c:	4637      	mov	r7, r6
 8000a8e:	dc05      	bgt.n	8000a9c <__swbuf_r+0x4e>
 8000a90:	4621      	mov	r1, r4
 8000a92:	4628      	mov	r0, r5
 8000a94:	f7ff ff64 	bl	8000960 <_fflush_r>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d1ed      	bne.n	8000a78 <__swbuf_r+0x2a>
 8000a9c:	68a3      	ldr	r3, [r4, #8]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	60a3      	str	r3, [r4, #8]
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	6022      	str	r2, [r4, #0]
 8000aa8:	701e      	strb	r6, [r3, #0]
 8000aaa:	6962      	ldr	r2, [r4, #20]
 8000aac:	1c43      	adds	r3, r0, #1
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d004      	beq.n	8000abc <__swbuf_r+0x6e>
 8000ab2:	89a3      	ldrh	r3, [r4, #12]
 8000ab4:	07db      	lsls	r3, r3, #31
 8000ab6:	d5e1      	bpl.n	8000a7c <__swbuf_r+0x2e>
 8000ab8:	2e0a      	cmp	r6, #10
 8000aba:	d1df      	bne.n	8000a7c <__swbuf_r+0x2e>
 8000abc:	4621      	mov	r1, r4
 8000abe:	4628      	mov	r0, r5
 8000ac0:	f7ff ff4e 	bl	8000960 <_fflush_r>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d0d9      	beq.n	8000a7c <__swbuf_r+0x2e>
 8000ac8:	e7d6      	b.n	8000a78 <__swbuf_r+0x2a>
	...

08000acc <__swsetup_r>:
 8000acc:	b538      	push	{r3, r4, r5, lr}
 8000ace:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <__swsetup_r+0xa8>)
 8000ad0:	4605      	mov	r5, r0
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	460c      	mov	r4, r1
 8000ad6:	b118      	cbz	r0, 8000ae0 <__swsetup_r+0x14>
 8000ad8:	6a03      	ldr	r3, [r0, #32]
 8000ada:	b90b      	cbnz	r3, 8000ae0 <__swsetup_r+0x14>
 8000adc:	f7ff fd50 	bl	8000580 <__sinit>
 8000ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ae4:	0719      	lsls	r1, r3, #28
 8000ae6:	d422      	bmi.n	8000b2e <__swsetup_r+0x62>
 8000ae8:	06da      	lsls	r2, r3, #27
 8000aea:	d407      	bmi.n	8000afc <__swsetup_r+0x30>
 8000aec:	2209      	movs	r2, #9
 8000aee:	602a      	str	r2, [r5, #0]
 8000af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000af4:	81a3      	strh	r3, [r4, #12]
 8000af6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000afa:	e033      	b.n	8000b64 <__swsetup_r+0x98>
 8000afc:	0758      	lsls	r0, r3, #29
 8000afe:	d512      	bpl.n	8000b26 <__swsetup_r+0x5a>
 8000b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b02:	b141      	cbz	r1, 8000b16 <__swsetup_r+0x4a>
 8000b04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b08:	4299      	cmp	r1, r3
 8000b0a:	d002      	beq.n	8000b12 <__swsetup_r+0x46>
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f000 f90d 	bl	8000d2c <_free_r>
 8000b12:	2300      	movs	r3, #0
 8000b14:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b16:	89a3      	ldrh	r3, [r4, #12]
 8000b18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000b1c:	81a3      	strh	r3, [r4, #12]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	6063      	str	r3, [r4, #4]
 8000b22:	6923      	ldr	r3, [r4, #16]
 8000b24:	6023      	str	r3, [r4, #0]
 8000b26:	89a3      	ldrh	r3, [r4, #12]
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	81a3      	strh	r3, [r4, #12]
 8000b2e:	6923      	ldr	r3, [r4, #16]
 8000b30:	b94b      	cbnz	r3, 8000b46 <__swsetup_r+0x7a>
 8000b32:	89a3      	ldrh	r3, [r4, #12]
 8000b34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b3c:	d003      	beq.n	8000b46 <__swsetup_r+0x7a>
 8000b3e:	4621      	mov	r1, r4
 8000b40:	4628      	mov	r0, r5
 8000b42:	f000 f83f 	bl	8000bc4 <__smakebuf_r>
 8000b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b4a:	f013 0201 	ands.w	r2, r3, #1
 8000b4e:	d00a      	beq.n	8000b66 <__swsetup_r+0x9a>
 8000b50:	2200      	movs	r2, #0
 8000b52:	60a2      	str	r2, [r4, #8]
 8000b54:	6962      	ldr	r2, [r4, #20]
 8000b56:	4252      	negs	r2, r2
 8000b58:	61a2      	str	r2, [r4, #24]
 8000b5a:	6922      	ldr	r2, [r4, #16]
 8000b5c:	b942      	cbnz	r2, 8000b70 <__swsetup_r+0xa4>
 8000b5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000b62:	d1c5      	bne.n	8000af0 <__swsetup_r+0x24>
 8000b64:	bd38      	pop	{r3, r4, r5, pc}
 8000b66:	0799      	lsls	r1, r3, #30
 8000b68:	bf58      	it	pl
 8000b6a:	6962      	ldrpl	r2, [r4, #20]
 8000b6c:	60a2      	str	r2, [r4, #8]
 8000b6e:	e7f4      	b.n	8000b5a <__swsetup_r+0x8e>
 8000b70:	2000      	movs	r0, #0
 8000b72:	e7f7      	b.n	8000b64 <__swsetup_r+0x98>
 8000b74:	2000000c 	.word	0x2000000c

08000b78 <__swhatbuf_r>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	460c      	mov	r4, r1
 8000b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b80:	2900      	cmp	r1, #0
 8000b82:	b096      	sub	sp, #88	@ 0x58
 8000b84:	4615      	mov	r5, r2
 8000b86:	461e      	mov	r6, r3
 8000b88:	da0d      	bge.n	8000ba6 <__swhatbuf_r+0x2e>
 8000b8a:	89a3      	ldrh	r3, [r4, #12]
 8000b8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2340      	movne	r3, #64	@ 0x40
 8000b98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	6031      	str	r1, [r6, #0]
 8000ba0:	602b      	str	r3, [r5, #0]
 8000ba2:	b016      	add	sp, #88	@ 0x58
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	466a      	mov	r2, sp
 8000ba8:	f000 f8ae 	bl	8000d08 <_fstat_r>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	dbec      	blt.n	8000b8a <__swhatbuf_r+0x12>
 8000bb0:	9901      	ldr	r1, [sp, #4]
 8000bb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000bb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000bba:	4259      	negs	r1, r3
 8000bbc:	4159      	adcs	r1, r3
 8000bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bc2:	e7eb      	b.n	8000b9c <__swhatbuf_r+0x24>

08000bc4 <__smakebuf_r>:
 8000bc4:	898b      	ldrh	r3, [r1, #12]
 8000bc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000bc8:	079d      	lsls	r5, r3, #30
 8000bca:	4606      	mov	r6, r0
 8000bcc:	460c      	mov	r4, r1
 8000bce:	d507      	bpl.n	8000be0 <__smakebuf_r+0x1c>
 8000bd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000bd4:	6023      	str	r3, [r4, #0]
 8000bd6:	6123      	str	r3, [r4, #16]
 8000bd8:	2301      	movs	r3, #1
 8000bda:	6163      	str	r3, [r4, #20]
 8000bdc:	b003      	add	sp, #12
 8000bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be0:	ab01      	add	r3, sp, #4
 8000be2:	466a      	mov	r2, sp
 8000be4:	f7ff ffc8 	bl	8000b78 <__swhatbuf_r>
 8000be8:	9f00      	ldr	r7, [sp, #0]
 8000bea:	4605      	mov	r5, r0
 8000bec:	4639      	mov	r1, r7
 8000bee:	4630      	mov	r0, r6
 8000bf0:	f7ff fdb2 	bl	8000758 <_malloc_r>
 8000bf4:	b948      	cbnz	r0, 8000c0a <__smakebuf_r+0x46>
 8000bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bfa:	059a      	lsls	r2, r3, #22
 8000bfc:	d4ee      	bmi.n	8000bdc <__smakebuf_r+0x18>
 8000bfe:	f023 0303 	bic.w	r3, r3, #3
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	81a3      	strh	r3, [r4, #12]
 8000c08:	e7e2      	b.n	8000bd0 <__smakebuf_r+0xc>
 8000c0a:	89a3      	ldrh	r3, [r4, #12]
 8000c0c:	6020      	str	r0, [r4, #0]
 8000c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c12:	81a3      	strh	r3, [r4, #12]
 8000c14:	9b01      	ldr	r3, [sp, #4]
 8000c16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000c1a:	b15b      	cbz	r3, 8000c34 <__smakebuf_r+0x70>
 8000c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c20:	4630      	mov	r0, r6
 8000c22:	f000 f80b 	bl	8000c3c <_isatty_r>
 8000c26:	b128      	cbz	r0, 8000c34 <__smakebuf_r+0x70>
 8000c28:	89a3      	ldrh	r3, [r4, #12]
 8000c2a:	f023 0303 	bic.w	r3, r3, #3
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	81a3      	strh	r3, [r4, #12]
 8000c34:	89a3      	ldrh	r3, [r4, #12]
 8000c36:	431d      	orrs	r5, r3
 8000c38:	81a5      	strh	r5, [r4, #12]
 8000c3a:	e7cf      	b.n	8000bdc <__smakebuf_r+0x18>

08000c3c <_isatty_r>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	4d06      	ldr	r5, [pc, #24]	@ (8000c58 <_isatty_r+0x1c>)
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	4608      	mov	r0, r1
 8000c46:	602b      	str	r3, [r5, #0]
 8000c48:	f7ff fb96 	bl	8000378 <_isatty>
 8000c4c:	1c43      	adds	r3, r0, #1
 8000c4e:	d102      	bne.n	8000c56 <_isatty_r+0x1a>
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	b103      	cbz	r3, 8000c56 <_isatty_r+0x1a>
 8000c54:	6023      	str	r3, [r4, #0]
 8000c56:	bd38      	pop	{r3, r4, r5, pc}
 8000c58:	200001c4 	.word	0x200001c4

08000c5c <_lseek_r>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	4d07      	ldr	r5, [pc, #28]	@ (8000c7c <_lseek_r+0x20>)
 8000c60:	4604      	mov	r4, r0
 8000c62:	4608      	mov	r0, r1
 8000c64:	4611      	mov	r1, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	602a      	str	r2, [r5, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f7ff fb8f 	bl	800038e <_lseek>
 8000c70:	1c43      	adds	r3, r0, #1
 8000c72:	d102      	bne.n	8000c7a <_lseek_r+0x1e>
 8000c74:	682b      	ldr	r3, [r5, #0]
 8000c76:	b103      	cbz	r3, 8000c7a <_lseek_r+0x1e>
 8000c78:	6023      	str	r3, [r4, #0]
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
 8000c7c:	200001c4 	.word	0x200001c4

08000c80 <_read_r>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	4d07      	ldr	r5, [pc, #28]	@ (8000ca0 <_read_r+0x20>)
 8000c84:	4604      	mov	r4, r0
 8000c86:	4608      	mov	r0, r1
 8000c88:	4611      	mov	r1, r2
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	602a      	str	r2, [r5, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f7ff fb1d 	bl	80002ce <_read>
 8000c94:	1c43      	adds	r3, r0, #1
 8000c96:	d102      	bne.n	8000c9e <_read_r+0x1e>
 8000c98:	682b      	ldr	r3, [r5, #0]
 8000c9a:	b103      	cbz	r3, 8000c9e <_read_r+0x1e>
 8000c9c:	6023      	str	r3, [r4, #0]
 8000c9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ca0:	200001c4 	.word	0x200001c4

08000ca4 <_sbrk_r>:
 8000ca4:	b538      	push	{r3, r4, r5, lr}
 8000ca6:	4d06      	ldr	r5, [pc, #24]	@ (8000cc0 <_sbrk_r+0x1c>)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	4604      	mov	r4, r0
 8000cac:	4608      	mov	r0, r1
 8000cae:	602b      	str	r3, [r5, #0]
 8000cb0:	f7ff fb7a 	bl	80003a8 <_sbrk>
 8000cb4:	1c43      	adds	r3, r0, #1
 8000cb6:	d102      	bne.n	8000cbe <_sbrk_r+0x1a>
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	b103      	cbz	r3, 8000cbe <_sbrk_r+0x1a>
 8000cbc:	6023      	str	r3, [r4, #0]
 8000cbe:	bd38      	pop	{r3, r4, r5, pc}
 8000cc0:	200001c4 	.word	0x200001c4

08000cc4 <_write_r>:
 8000cc4:	b538      	push	{r3, r4, r5, lr}
 8000cc6:	4d07      	ldr	r5, [pc, #28]	@ (8000ce4 <_write_r+0x20>)
 8000cc8:	4604      	mov	r4, r0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	4611      	mov	r1, r2
 8000cce:	2200      	movs	r2, #0
 8000cd0:	602a      	str	r2, [r5, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f7ff fb18 	bl	8000308 <_write>
 8000cd8:	1c43      	adds	r3, r0, #1
 8000cda:	d102      	bne.n	8000ce2 <_write_r+0x1e>
 8000cdc:	682b      	ldr	r3, [r5, #0]
 8000cde:	b103      	cbz	r3, 8000ce2 <_write_r+0x1e>
 8000ce0:	6023      	str	r3, [r4, #0]
 8000ce2:	bd38      	pop	{r3, r4, r5, pc}
 8000ce4:	200001c4 	.word	0x200001c4

08000ce8 <_close_r>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4d06      	ldr	r5, [pc, #24]	@ (8000d04 <_close_r+0x1c>)
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	602b      	str	r3, [r5, #0]
 8000cf4:	f7ff fb24 	bl	8000340 <_close>
 8000cf8:	1c43      	adds	r3, r0, #1
 8000cfa:	d102      	bne.n	8000d02 <_close_r+0x1a>
 8000cfc:	682b      	ldr	r3, [r5, #0]
 8000cfe:	b103      	cbz	r3, 8000d02 <_close_r+0x1a>
 8000d00:	6023      	str	r3, [r4, #0]
 8000d02:	bd38      	pop	{r3, r4, r5, pc}
 8000d04:	200001c4 	.word	0x200001c4

08000d08 <_fstat_r>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	4d07      	ldr	r5, [pc, #28]	@ (8000d28 <_fstat_r+0x20>)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4608      	mov	r0, r1
 8000d12:	4611      	mov	r1, r2
 8000d14:	602b      	str	r3, [r5, #0]
 8000d16:	f7ff fb1f 	bl	8000358 <_fstat>
 8000d1a:	1c43      	adds	r3, r0, #1
 8000d1c:	d102      	bne.n	8000d24 <_fstat_r+0x1c>
 8000d1e:	682b      	ldr	r3, [r5, #0]
 8000d20:	b103      	cbz	r3, 8000d24 <_fstat_r+0x1c>
 8000d22:	6023      	str	r3, [r4, #0]
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop
 8000d28:	200001c4 	.word	0x200001c4

08000d2c <_free_r>:
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	4605      	mov	r5, r0
 8000d30:	2900      	cmp	r1, #0
 8000d32:	d041      	beq.n	8000db8 <_free_r+0x8c>
 8000d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d38:	1f0c      	subs	r4, r1, #4
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	bfb8      	it	lt
 8000d3e:	18e4      	addlt	r4, r4, r3
 8000d40:	f7ff fe36 	bl	80009b0 <__malloc_lock>
 8000d44:	4a1d      	ldr	r2, [pc, #116]	@ (8000dbc <_free_r+0x90>)
 8000d46:	6813      	ldr	r3, [r2, #0]
 8000d48:	b933      	cbnz	r3, 8000d58 <_free_r+0x2c>
 8000d4a:	6063      	str	r3, [r4, #4]
 8000d4c:	6014      	str	r4, [r2, #0]
 8000d4e:	4628      	mov	r0, r5
 8000d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d54:	f7ff be32 	b.w	80009bc <__malloc_unlock>
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	d908      	bls.n	8000d6e <_free_r+0x42>
 8000d5c:	6820      	ldr	r0, [r4, #0]
 8000d5e:	1821      	adds	r1, r4, r0
 8000d60:	428b      	cmp	r3, r1
 8000d62:	bf01      	itttt	eq
 8000d64:	6819      	ldreq	r1, [r3, #0]
 8000d66:	685b      	ldreq	r3, [r3, #4]
 8000d68:	1809      	addeq	r1, r1, r0
 8000d6a:	6021      	streq	r1, [r4, #0]
 8000d6c:	e7ed      	b.n	8000d4a <_free_r+0x1e>
 8000d6e:	461a      	mov	r2, r3
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	b10b      	cbz	r3, 8000d78 <_free_r+0x4c>
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	d9fa      	bls.n	8000d6e <_free_r+0x42>
 8000d78:	6811      	ldr	r1, [r2, #0]
 8000d7a:	1850      	adds	r0, r2, r1
 8000d7c:	42a0      	cmp	r0, r4
 8000d7e:	d10b      	bne.n	8000d98 <_free_r+0x6c>
 8000d80:	6820      	ldr	r0, [r4, #0]
 8000d82:	4401      	add	r1, r0
 8000d84:	1850      	adds	r0, r2, r1
 8000d86:	4283      	cmp	r3, r0
 8000d88:	6011      	str	r1, [r2, #0]
 8000d8a:	d1e0      	bne.n	8000d4e <_free_r+0x22>
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	6053      	str	r3, [r2, #4]
 8000d92:	4408      	add	r0, r1
 8000d94:	6010      	str	r0, [r2, #0]
 8000d96:	e7da      	b.n	8000d4e <_free_r+0x22>
 8000d98:	d902      	bls.n	8000da0 <_free_r+0x74>
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	602b      	str	r3, [r5, #0]
 8000d9e:	e7d6      	b.n	8000d4e <_free_r+0x22>
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	1821      	adds	r1, r4, r0
 8000da4:	428b      	cmp	r3, r1
 8000da6:	bf04      	itt	eq
 8000da8:	6819      	ldreq	r1, [r3, #0]
 8000daa:	685b      	ldreq	r3, [r3, #4]
 8000dac:	6063      	str	r3, [r4, #4]
 8000dae:	bf04      	itt	eq
 8000db0:	1809      	addeq	r1, r1, r0
 8000db2:	6021      	streq	r1, [r4, #0]
 8000db4:	6054      	str	r4, [r2, #4]
 8000db6:	e7ca      	b.n	8000d4e <_free_r+0x22>
 8000db8:	bd38      	pop	{r3, r4, r5, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001c0 	.word	0x200001c0

08000dc0 <_init>:
 8000dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc2:	bf00      	nop
 8000dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dc6:	bc08      	pop	{r3}
 8000dc8:	469e      	mov	lr, r3
 8000dca:	4770      	bx	lr

08000dcc <_fini>:
 8000dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dce:	bf00      	nop
 8000dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd2:	bc08      	pop	{r3}
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	4770      	bx	lr
