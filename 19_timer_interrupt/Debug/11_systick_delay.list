
11_systick_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800146c  0800146c  0000246c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014b8  080014b8  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080014b8  080014b8  000024b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080014c0  080014c0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014c0  080014c0  000024c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014c4  080014c4  000024c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080014c8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001524  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001524  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010e7  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e7  00000000  00000000  00004173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00004760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000104  00000000  00000000  000048e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002167  00000000  00000000  000049e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020d3  00000000  00000000  00006b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055bee  00000000  00000000  00008c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005e80c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c18  00000000  00000000  0005e850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0005f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001454 	.word	0x08001454

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001454 	.word	0x08001454

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#define PIN5			(1U<<5)
#define LED_PIN			PIN5



int main(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

	// enable clock access to led
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b11      	ldr	r3, [pc, #68]	@ (80002cc <main+0x4c>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a10      	ldr	r2, [pc, #64]	@ (80002cc <main+0x4c>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30

	// set PA5 as output pin
	GPIOA->MODER |= (1U<<10);
 8000290:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <main+0x50>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0e      	ldr	r2, [pc, #56]	@ (80002d0 <main+0x50>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 800029c:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <main+0x50>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0b      	ldr	r2, [pc, #44]	@ (80002d0 <main+0x50>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002a6:	6013      	str	r3, [r2, #0]


	uart2_tx_init();
 80002a8:	f000 f8e8 	bl	800047c <uart2_tx_init>


	while(1) {
		systick_delay_ms(1000);
 80002ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b0:	f000 f8b6 	bl	8000420 <systick_delay_ms>
		GPIOA->ODR ^= LED_PIN;
 80002b4:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <main+0x50>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a05      	ldr	r2, [pc, #20]	@ (80002d0 <main+0x50>)
 80002ba:	f083 0320 	eor.w	r3, r3, #32
 80002be:	6153      	str	r3, [r2, #20]
		printf("One second just passed\n\r");
 80002c0:	4804      	ldr	r0, [pc, #16]	@ (80002d4 <main+0x54>)
 80002c2:	f000 fa5d 	bl	8000780 <iprintf>
		systick_delay_ms(1000);
 80002c6:	bf00      	nop
 80002c8:	e7f0      	b.n	80002ac <main+0x2c>
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020000 	.word	0x40020000
 80002d4:	0800146c 	.word	0x0800146c

080002d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]
 80002e8:	e00a      	b.n	8000300 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002ea:	f3af 8000 	nop.w
 80002ee:	4601      	mov	r1, r0
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	1c5a      	adds	r2, r3, #1
 80002f4:	60ba      	str	r2, [r7, #8]
 80002f6:	b2ca      	uxtb	r2, r1
 80002f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	3301      	adds	r3, #1
 80002fe:	617b      	str	r3, [r7, #20]
 8000300:	697a      	ldr	r2, [r7, #20]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	429a      	cmp	r2, r3
 8000306:	dbf0      	blt.n	80002ea <_read+0x12>
  }

  return len;
 8000308:	687b      	ldr	r3, [r7, #4]
}
 800030a:	4618      	mov	r0, r3
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}

08000312 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000312:	b580      	push	{r7, lr}
 8000314:	b086      	sub	sp, #24
 8000316:	af00      	add	r7, sp, #0
 8000318:	60f8      	str	r0, [r7, #12]
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	e009      	b.n	8000338 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1c5a      	adds	r2, r3, #1
 8000328:	60ba      	str	r2, [r7, #8]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	4618      	mov	r0, r3
 800032e:	f000 f8f1 	bl	8000514 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	3301      	adds	r3, #1
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	697a      	ldr	r2, [r7, #20]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	429a      	cmp	r2, r3
 800033e:	dbf1      	blt.n	8000324 <_write+0x12>
  }
  return len;
 8000340:	687b      	ldr	r3, [r7, #4]
}
 8000342:	4618      	mov	r0, r3
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <_close>:

int _close(int file)
{
 800034a:	b480      	push	{r7}
 800034c:	b083      	sub	sp, #12
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000352:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000356:	4618      	mov	r0, r3
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000372:	605a      	str	r2, [r3, #4]
  return 0;
 8000374:	2300      	movs	r3, #0
}
 8000376:	4618      	mov	r0, r3
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <_isatty>:

int _isatty(int file)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800038a:	2301      	movs	r3, #1
}
 800038c:	4618      	mov	r0, r3
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3714      	adds	r7, #20
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003bc:	4a14      	ldr	r2, [pc, #80]	@ (8000410 <_sbrk+0x5c>)
 80003be:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <_sbrk+0x60>)
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003c8:	4b13      	ldr	r3, [pc, #76]	@ (8000418 <_sbrk+0x64>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d102      	bne.n	80003d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <_sbrk+0x64>)
 80003d2:	4a12      	ldr	r2, [pc, #72]	@ (800041c <_sbrk+0x68>)
 80003d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003d6:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <_sbrk+0x64>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	693a      	ldr	r2, [r7, #16]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d207      	bcs.n	80003f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e4:	f000 f9e6 	bl	80007b4 <__errno>
 80003e8:	4603      	mov	r3, r0
 80003ea:	220c      	movs	r2, #12
 80003ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003f2:	e009      	b.n	8000408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f4:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <_sbrk+0x64>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003fa:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <_sbrk+0x64>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	4a05      	ldr	r2, [pc, #20]	@ (8000418 <_sbrk+0x64>)
 8000404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000406:	68fb      	ldr	r3, [r7, #12]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20020000 	.word	0x20020000
 8000414:	00000400 	.word	0x00000400
 8000418:	20000078 	.word	0x20000078
 800041c:	200001c8 	.word	0x200001c8

08000420 <systick_delay_ms>:
#define CTRL_COUNTFLAG			(1U<<16)




void systick_delay_ms(int delay) {
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]

	// **configure systick**
	// reload with number of cycles/ms
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000428:	4b13      	ldr	r3, [pc, #76]	@ (8000478 <systick_delay_ms+0x58>)
 800042a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800042e:	605a      	str	r2, [r3, #4]

	// clear systick current value register
	SysTick->VAL = 0;
 8000430:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <systick_delay_ms+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]

	// enable systick
	SysTick->CTRL |= CTRL_ENABLE | CTRL_CLKSRC;
 8000436:	4b10      	ldr	r3, [pc, #64]	@ (8000478 <systick_delay_ms+0x58>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a0f      	ldr	r2, [pc, #60]	@ (8000478 <systick_delay_ms+0x58>)
 800043c:	f043 0305 	orr.w	r3, r3, #5
 8000440:	6013      	str	r3, [r2, #0]

	// select internal clock source
	for (int i = 0; i < delay; i++) {
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	e009      	b.n	800045c <systick_delay_ms+0x3c>
		// wait until the COUNTFLAG is set
		while (!(SysTick->CTRL & CTRL_COUNTFLAG)) {}
 8000448:	bf00      	nop
 800044a:	4b0b      	ldr	r3, [pc, #44]	@ (8000478 <systick_delay_ms+0x58>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <systick_delay_ms+0x2a>
	for (int i = 0; i < delay; i++) {
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3301      	adds	r3, #1
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	429a      	cmp	r2, r3
 8000462:	dbf1      	blt.n	8000448 <systick_delay_ms+0x28>
	}

	SysTick->CTRL = 0;
 8000464:	4b04      	ldr	r3, [pc, #16]	@ (8000478 <systick_delay_ms+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	e000e010 	.word	0xe000e010

0800047c <uart2_tx_init>:

		// enable the uart module
		USART2->CR1 |= CR1_UE;
}

void uart2_tx_init(void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0

	// configure the uart gpio pin
		// enable clock access to gpioa
		RCC->AHB1ENR |= GPIOAEN;
 8000480:	4b20      	ldr	r3, [pc, #128]	@ (8000504 <uart2_tx_init+0x88>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000484:	4a1f      	ldr	r2, [pc, #124]	@ (8000504 <uart2_tx_init+0x88>)
 8000486:	f043 0301 	orr.w	r3, r3, #1
 800048a:	6313      	str	r3, [r2, #48]	@ 0x30

		// set PA2 mode to alternate function mode
		GPIOA->MODER &= ~(1U<<4);
 800048c:	4b1e      	ldr	r3, [pc, #120]	@ (8000508 <uart2_tx_init+0x8c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a1d      	ldr	r2, [pc, #116]	@ (8000508 <uart2_tx_init+0x8c>)
 8000492:	f023 0310 	bic.w	r3, r3, #16
 8000496:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (1U<<5);
 8000498:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <uart2_tx_init+0x8c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a1a      	ldr	r2, [pc, #104]	@ (8000508 <uart2_tx_init+0x8c>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6013      	str	r3, [r2, #0]

		// set PA2 alternate function type to UART_TX (AF07)
		GPIOA->AFR[0] |= (1U<<8);
 80004a4:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <uart2_tx_init+0x8c>)
 80004a6:	6a1b      	ldr	r3, [r3, #32]
 80004a8:	4a17      	ldr	r2, [pc, #92]	@ (8000508 <uart2_tx_init+0x8c>)
 80004aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004ae:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<9);
 80004b0:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <uart2_tx_init+0x8c>)
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	4a14      	ldr	r2, [pc, #80]	@ (8000508 <uart2_tx_init+0x8c>)
 80004b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004ba:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<10);
 80004bc:	4b12      	ldr	r3, [pc, #72]	@ (8000508 <uart2_tx_init+0x8c>)
 80004be:	6a1b      	ldr	r3, [r3, #32]
 80004c0:	4a11      	ldr	r2, [pc, #68]	@ (8000508 <uart2_tx_init+0x8c>)
 80004c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004c6:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<11);
 80004c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <uart2_tx_init+0x8c>)
 80004ca:	6a1b      	ldr	r3, [r3, #32]
 80004cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000508 <uart2_tx_init+0x8c>)
 80004ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80004d2:	6213      	str	r3, [r2, #32]


		// configure uart module
		// enable clock access to uart2
		RCC->APB1ENR |= UART2EN;
 80004d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <uart2_tx_init+0x88>)
 80004d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000504 <uart2_tx_init+0x88>)
 80004da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004de:	6413      	str	r3, [r2, #64]	@ 0x40

		// configure baudrate
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80004e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004e4:	4909      	ldr	r1, [pc, #36]	@ (800050c <uart2_tx_init+0x90>)
 80004e6:	480a      	ldr	r0, [pc, #40]	@ (8000510 <uart2_tx_init+0x94>)
 80004e8:	f000 f838 	bl	800055c <uart_set_baudrate>

		// configure the transfer direction
		USART2->CR1 = CR1_TE;
 80004ec:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <uart2_tx_init+0x94>)
 80004ee:	2208      	movs	r2, #8
 80004f0:	60da      	str	r2, [r3, #12]

		// enable the uart module
		USART2->CR1 |= CR1_UE;
 80004f2:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <uart2_tx_init+0x94>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	4a06      	ldr	r2, [pc, #24]	@ (8000510 <uart2_tx_init+0x94>)
 80004f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004fc:	60d3      	str	r3, [r2, #12]
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40023800 	.word	0x40023800
 8000508:	40020000 	.word	0x40020000
 800050c:	00f42400 	.word	0x00f42400
 8000510:	40004400 	.word	0x40004400

08000514 <__io_putchar>:

int __io_putchar(int ch) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 f805 	bl	800052c <uart2_write>
	return ch;
 8000522:	687b      	ldr	r3, [r7, #4]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <uart2_write>:
	return USART2->DR;

}


void uart2_write(int ch) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

	// make sure transmit data register is empty
	while(!(USART2->SR & SR_TXE)) {}
 8000534:	bf00      	nop
 8000536:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <uart2_write+0x2c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0f9      	beq.n	8000536 <uart2_write+0xa>

	// write to transmit data register
	USART2->DR = (ch & 0xFF);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <uart2_write+0x2c>)
 8000546:	b2db      	uxtb	r3, r3
 8000548:	6053      	str	r3, [r2, #4]

}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40004400 	.word	0x40004400

0800055c <uart_set_baudrate>:


void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	68b8      	ldr	r0, [r7, #8]
 800056c:	f000 f808 	bl	8000580 <compute_uart_bd>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	609a      	str	r2, [r3, #8]
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <compute_uart_bd>:

uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	085a      	lsrs	r2, r3, #1
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	441a      	add	r2, r3
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	fbb2 f3f3 	udiv	r3, r2, r3
 8000598:	b29b      	uxth	r3, r3
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
	...

080005a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a8:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b2:	490d      	ldr	r1, [pc, #52]	@ (80005e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b4:	4a0d      	ldr	r2, [pc, #52]	@ (80005ec <LoopForever+0xe>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0a      	ldr	r2, [pc, #40]	@ (80005f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c8:	4c0a      	ldr	r4, [pc, #40]	@ (80005f4 <LoopForever+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80005d6:	f000 f8f3 	bl	80007c0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80005da:	f7ff fe51 	bl	8000280 <main>

080005de <LoopForever>:

LoopForever:
  b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
  ldr   r0, =_estack
 80005e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005ec:	080014c8 	.word	0x080014c8
  ldr r2, =_sbss
 80005f0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005f4:	200001c8 	.word	0x200001c8

080005f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC_IRQHandler>
	...

080005fc <std>:
 80005fc:	2300      	movs	r3, #0
 80005fe:	b510      	push	{r4, lr}
 8000600:	4604      	mov	r4, r0
 8000602:	e9c0 3300 	strd	r3, r3, [r0]
 8000606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800060a:	6083      	str	r3, [r0, #8]
 800060c:	8181      	strh	r1, [r0, #12]
 800060e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000610:	81c2      	strh	r2, [r0, #14]
 8000612:	6183      	str	r3, [r0, #24]
 8000614:	4619      	mov	r1, r3
 8000616:	2208      	movs	r2, #8
 8000618:	305c      	adds	r0, #92	@ 0x5c
 800061a:	f000 f8c3 	bl	80007a4 <memset>
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <std+0x58>)
 8000620:	6263      	str	r3, [r4, #36]	@ 0x24
 8000622:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <std+0x5c>)
 8000624:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <std+0x60>)
 8000628:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800062a:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <std+0x64>)
 800062c:	6323      	str	r3, [r4, #48]	@ 0x30
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <std+0x68>)
 8000630:	6224      	str	r4, [r4, #32]
 8000632:	429c      	cmp	r4, r3
 8000634:	d006      	beq.n	8000644 <std+0x48>
 8000636:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800063a:	4294      	cmp	r4, r2
 800063c:	d002      	beq.n	8000644 <std+0x48>
 800063e:	33d0      	adds	r3, #208	@ 0xd0
 8000640:	429c      	cmp	r4, r3
 8000642:	d105      	bne.n	8000650 <std+0x54>
 8000644:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800064c:	f000 b8dc 	b.w	8000808 <__retarget_lock_init_recursive>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	bf00      	nop
 8000654:	0800105d 	.word	0x0800105d
 8000658:	0800107f 	.word	0x0800107f
 800065c:	080010b7 	.word	0x080010b7
 8000660:	080010db 	.word	0x080010db
 8000664:	2000007c 	.word	0x2000007c

08000668 <stdio_exit_handler>:
 8000668:	4a02      	ldr	r2, [pc, #8]	@ (8000674 <stdio_exit_handler+0xc>)
 800066a:	4903      	ldr	r1, [pc, #12]	@ (8000678 <stdio_exit_handler+0x10>)
 800066c:	4803      	ldr	r0, [pc, #12]	@ (800067c <stdio_exit_handler+0x14>)
 800066e:	f000 b869 	b.w	8000744 <_fwalk_sglue>
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000
 8000678:	08000ff5 	.word	0x08000ff5
 800067c:	20000010 	.word	0x20000010

08000680 <cleanup_stdio>:
 8000680:	6841      	ldr	r1, [r0, #4]
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <cleanup_stdio+0x34>)
 8000684:	4299      	cmp	r1, r3
 8000686:	b510      	push	{r4, lr}
 8000688:	4604      	mov	r4, r0
 800068a:	d001      	beq.n	8000690 <cleanup_stdio+0x10>
 800068c:	f000 fcb2 	bl	8000ff4 <_fflush_r>
 8000690:	68a1      	ldr	r1, [r4, #8]
 8000692:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <cleanup_stdio+0x38>)
 8000694:	4299      	cmp	r1, r3
 8000696:	d002      	beq.n	800069e <cleanup_stdio+0x1e>
 8000698:	4620      	mov	r0, r4
 800069a:	f000 fcab 	bl	8000ff4 <_fflush_r>
 800069e:	68e1      	ldr	r1, [r4, #12]
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <cleanup_stdio+0x3c>)
 80006a2:	4299      	cmp	r1, r3
 80006a4:	d004      	beq.n	80006b0 <cleanup_stdio+0x30>
 80006a6:	4620      	mov	r0, r4
 80006a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ac:	f000 bca2 	b.w	8000ff4 <_fflush_r>
 80006b0:	bd10      	pop	{r4, pc}
 80006b2:	bf00      	nop
 80006b4:	2000007c 	.word	0x2000007c
 80006b8:	200000e4 	.word	0x200000e4
 80006bc:	2000014c 	.word	0x2000014c

080006c0 <global_stdio_init.part.0>:
 80006c0:	b510      	push	{r4, lr}
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <global_stdio_init.part.0+0x30>)
 80006c4:	4c0b      	ldr	r4, [pc, #44]	@ (80006f4 <global_stdio_init.part.0+0x34>)
 80006c6:	4a0c      	ldr	r2, [pc, #48]	@ (80006f8 <global_stdio_init.part.0+0x38>)
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	4620      	mov	r0, r4
 80006cc:	2200      	movs	r2, #0
 80006ce:	2104      	movs	r1, #4
 80006d0:	f7ff ff94 	bl	80005fc <std>
 80006d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006d8:	2201      	movs	r2, #1
 80006da:	2109      	movs	r1, #9
 80006dc:	f7ff ff8e 	bl	80005fc <std>
 80006e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006e4:	2202      	movs	r2, #2
 80006e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ea:	2112      	movs	r1, #18
 80006ec:	f7ff bf86 	b.w	80005fc <std>
 80006f0:	200001b4 	.word	0x200001b4
 80006f4:	2000007c 	.word	0x2000007c
 80006f8:	08000669 	.word	0x08000669

080006fc <__sfp_lock_acquire>:
 80006fc:	4801      	ldr	r0, [pc, #4]	@ (8000704 <__sfp_lock_acquire+0x8>)
 80006fe:	f000 b884 	b.w	800080a <__retarget_lock_acquire_recursive>
 8000702:	bf00      	nop
 8000704:	200001b9 	.word	0x200001b9

08000708 <__sfp_lock_release>:
 8000708:	4801      	ldr	r0, [pc, #4]	@ (8000710 <__sfp_lock_release+0x8>)
 800070a:	f000 b87f 	b.w	800080c <__retarget_lock_release_recursive>
 800070e:	bf00      	nop
 8000710:	200001b9 	.word	0x200001b9

08000714 <__sinit>:
 8000714:	b510      	push	{r4, lr}
 8000716:	4604      	mov	r4, r0
 8000718:	f7ff fff0 	bl	80006fc <__sfp_lock_acquire>
 800071c:	6a23      	ldr	r3, [r4, #32]
 800071e:	b11b      	cbz	r3, 8000728 <__sinit+0x14>
 8000720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000724:	f7ff bff0 	b.w	8000708 <__sfp_lock_release>
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <__sinit+0x28>)
 800072a:	6223      	str	r3, [r4, #32]
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <__sinit+0x2c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1f5      	bne.n	8000720 <__sinit+0xc>
 8000734:	f7ff ffc4 	bl	80006c0 <global_stdio_init.part.0>
 8000738:	e7f2      	b.n	8000720 <__sinit+0xc>
 800073a:	bf00      	nop
 800073c:	08000681 	.word	0x08000681
 8000740:	200001b4 	.word	0x200001b4

08000744 <_fwalk_sglue>:
 8000744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000748:	4607      	mov	r7, r0
 800074a:	4688      	mov	r8, r1
 800074c:	4614      	mov	r4, r2
 800074e:	2600      	movs	r6, #0
 8000750:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000754:	f1b9 0901 	subs.w	r9, r9, #1
 8000758:	d505      	bpl.n	8000766 <_fwalk_sglue+0x22>
 800075a:	6824      	ldr	r4, [r4, #0]
 800075c:	2c00      	cmp	r4, #0
 800075e:	d1f7      	bne.n	8000750 <_fwalk_sglue+0xc>
 8000760:	4630      	mov	r0, r6
 8000762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000766:	89ab      	ldrh	r3, [r5, #12]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d907      	bls.n	800077c <_fwalk_sglue+0x38>
 800076c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000770:	3301      	adds	r3, #1
 8000772:	d003      	beq.n	800077c <_fwalk_sglue+0x38>
 8000774:	4629      	mov	r1, r5
 8000776:	4638      	mov	r0, r7
 8000778:	47c0      	blx	r8
 800077a:	4306      	orrs	r6, r0
 800077c:	3568      	adds	r5, #104	@ 0x68
 800077e:	e7e9      	b.n	8000754 <_fwalk_sglue+0x10>

08000780 <iprintf>:
 8000780:	b40f      	push	{r0, r1, r2, r3}
 8000782:	b507      	push	{r0, r1, r2, lr}
 8000784:	4906      	ldr	r1, [pc, #24]	@ (80007a0 <iprintf+0x20>)
 8000786:	ab04      	add	r3, sp, #16
 8000788:	6808      	ldr	r0, [r1, #0]
 800078a:	f853 2b04 	ldr.w	r2, [r3], #4
 800078e:	6881      	ldr	r1, [r0, #8]
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	f000 f865 	bl	8000860 <_vfiprintf_r>
 8000796:	b003      	add	sp, #12
 8000798:	f85d eb04 	ldr.w	lr, [sp], #4
 800079c:	b004      	add	sp, #16
 800079e:	4770      	bx	lr
 80007a0:	2000000c 	.word	0x2000000c

080007a4 <memset>:
 80007a4:	4402      	add	r2, r0
 80007a6:	4603      	mov	r3, r0
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d100      	bne.n	80007ae <memset+0xa>
 80007ac:	4770      	bx	lr
 80007ae:	f803 1b01 	strb.w	r1, [r3], #1
 80007b2:	e7f9      	b.n	80007a8 <memset+0x4>

080007b4 <__errno>:
 80007b4:	4b01      	ldr	r3, [pc, #4]	@ (80007bc <__errno+0x8>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	2000000c 	.word	0x2000000c

080007c0 <__libc_init_array>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	4d0d      	ldr	r5, [pc, #52]	@ (80007f8 <__libc_init_array+0x38>)
 80007c4:	4c0d      	ldr	r4, [pc, #52]	@ (80007fc <__libc_init_array+0x3c>)
 80007c6:	1b64      	subs	r4, r4, r5
 80007c8:	10a4      	asrs	r4, r4, #2
 80007ca:	2600      	movs	r6, #0
 80007cc:	42a6      	cmp	r6, r4
 80007ce:	d109      	bne.n	80007e4 <__libc_init_array+0x24>
 80007d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000800 <__libc_init_array+0x40>)
 80007d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000804 <__libc_init_array+0x44>)
 80007d4:	f000 fe3e 	bl	8001454 <_init>
 80007d8:	1b64      	subs	r4, r4, r5
 80007da:	10a4      	asrs	r4, r4, #2
 80007dc:	2600      	movs	r6, #0
 80007de:	42a6      	cmp	r6, r4
 80007e0:	d105      	bne.n	80007ee <__libc_init_array+0x2e>
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e8:	4798      	blx	r3
 80007ea:	3601      	adds	r6, #1
 80007ec:	e7ee      	b.n	80007cc <__libc_init_array+0xc>
 80007ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f2:	4798      	blx	r3
 80007f4:	3601      	adds	r6, #1
 80007f6:	e7f2      	b.n	80007de <__libc_init_array+0x1e>
 80007f8:	080014c0 	.word	0x080014c0
 80007fc:	080014c0 	.word	0x080014c0
 8000800:	080014c0 	.word	0x080014c0
 8000804:	080014c4 	.word	0x080014c4

08000808 <__retarget_lock_init_recursive>:
 8000808:	4770      	bx	lr

0800080a <__retarget_lock_acquire_recursive>:
 800080a:	4770      	bx	lr

0800080c <__retarget_lock_release_recursive>:
 800080c:	4770      	bx	lr

0800080e <__sfputc_r>:
 800080e:	6893      	ldr	r3, [r2, #8]
 8000810:	3b01      	subs	r3, #1
 8000812:	2b00      	cmp	r3, #0
 8000814:	b410      	push	{r4}
 8000816:	6093      	str	r3, [r2, #8]
 8000818:	da08      	bge.n	800082c <__sfputc_r+0x1e>
 800081a:	6994      	ldr	r4, [r2, #24]
 800081c:	42a3      	cmp	r3, r4
 800081e:	db01      	blt.n	8000824 <__sfputc_r+0x16>
 8000820:	290a      	cmp	r1, #10
 8000822:	d103      	bne.n	800082c <__sfputc_r+0x1e>
 8000824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000828:	f000 bc5b 	b.w	80010e2 <__swbuf_r>
 800082c:	6813      	ldr	r3, [r2, #0]
 800082e:	1c58      	adds	r0, r3, #1
 8000830:	6010      	str	r0, [r2, #0]
 8000832:	7019      	strb	r1, [r3, #0]
 8000834:	4608      	mov	r0, r1
 8000836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800083a:	4770      	bx	lr

0800083c <__sfputs_r>:
 800083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083e:	4606      	mov	r6, r0
 8000840:	460f      	mov	r7, r1
 8000842:	4614      	mov	r4, r2
 8000844:	18d5      	adds	r5, r2, r3
 8000846:	42ac      	cmp	r4, r5
 8000848:	d101      	bne.n	800084e <__sfputs_r+0x12>
 800084a:	2000      	movs	r0, #0
 800084c:	e007      	b.n	800085e <__sfputs_r+0x22>
 800084e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000852:	463a      	mov	r2, r7
 8000854:	4630      	mov	r0, r6
 8000856:	f7ff ffda 	bl	800080e <__sfputc_r>
 800085a:	1c43      	adds	r3, r0, #1
 800085c:	d1f3      	bne.n	8000846 <__sfputs_r+0xa>
 800085e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000860 <_vfiprintf_r>:
 8000860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000864:	460d      	mov	r5, r1
 8000866:	b09d      	sub	sp, #116	@ 0x74
 8000868:	4614      	mov	r4, r2
 800086a:	4698      	mov	r8, r3
 800086c:	4606      	mov	r6, r0
 800086e:	b118      	cbz	r0, 8000878 <_vfiprintf_r+0x18>
 8000870:	6a03      	ldr	r3, [r0, #32]
 8000872:	b90b      	cbnz	r3, 8000878 <_vfiprintf_r+0x18>
 8000874:	f7ff ff4e 	bl	8000714 <__sinit>
 8000878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800087a:	07d9      	lsls	r1, r3, #31
 800087c:	d405      	bmi.n	800088a <_vfiprintf_r+0x2a>
 800087e:	89ab      	ldrh	r3, [r5, #12]
 8000880:	059a      	lsls	r2, r3, #22
 8000882:	d402      	bmi.n	800088a <_vfiprintf_r+0x2a>
 8000884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000886:	f7ff ffc0 	bl	800080a <__retarget_lock_acquire_recursive>
 800088a:	89ab      	ldrh	r3, [r5, #12]
 800088c:	071b      	lsls	r3, r3, #28
 800088e:	d501      	bpl.n	8000894 <_vfiprintf_r+0x34>
 8000890:	692b      	ldr	r3, [r5, #16]
 8000892:	b99b      	cbnz	r3, 80008bc <_vfiprintf_r+0x5c>
 8000894:	4629      	mov	r1, r5
 8000896:	4630      	mov	r0, r6
 8000898:	f000 fc62 	bl	8001160 <__swsetup_r>
 800089c:	b170      	cbz	r0, 80008bc <_vfiprintf_r+0x5c>
 800089e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80008a0:	07dc      	lsls	r4, r3, #31
 80008a2:	d504      	bpl.n	80008ae <_vfiprintf_r+0x4e>
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008a8:	b01d      	add	sp, #116	@ 0x74
 80008aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008ae:	89ab      	ldrh	r3, [r5, #12]
 80008b0:	0598      	lsls	r0, r3, #22
 80008b2:	d4f7      	bmi.n	80008a4 <_vfiprintf_r+0x44>
 80008b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80008b6:	f7ff ffa9 	bl	800080c <__retarget_lock_release_recursive>
 80008ba:	e7f3      	b.n	80008a4 <_vfiprintf_r+0x44>
 80008bc:	2300      	movs	r3, #0
 80008be:	9309      	str	r3, [sp, #36]	@ 0x24
 80008c0:	2320      	movs	r3, #32
 80008c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80008c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80008ca:	2330      	movs	r3, #48	@ 0x30
 80008cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000a7c <_vfiprintf_r+0x21c>
 80008d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80008d4:	f04f 0901 	mov.w	r9, #1
 80008d8:	4623      	mov	r3, r4
 80008da:	469a      	mov	sl, r3
 80008dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80008e0:	b10a      	cbz	r2, 80008e6 <_vfiprintf_r+0x86>
 80008e2:	2a25      	cmp	r2, #37	@ 0x25
 80008e4:	d1f9      	bne.n	80008da <_vfiprintf_r+0x7a>
 80008e6:	ebba 0b04 	subs.w	fp, sl, r4
 80008ea:	d00b      	beq.n	8000904 <_vfiprintf_r+0xa4>
 80008ec:	465b      	mov	r3, fp
 80008ee:	4622      	mov	r2, r4
 80008f0:	4629      	mov	r1, r5
 80008f2:	4630      	mov	r0, r6
 80008f4:	f7ff ffa2 	bl	800083c <__sfputs_r>
 80008f8:	3001      	adds	r0, #1
 80008fa:	f000 80a7 	beq.w	8000a4c <_vfiprintf_r+0x1ec>
 80008fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000900:	445a      	add	r2, fp
 8000902:	9209      	str	r2, [sp, #36]	@ 0x24
 8000904:	f89a 3000 	ldrb.w	r3, [sl]
 8000908:	2b00      	cmp	r3, #0
 800090a:	f000 809f 	beq.w	8000a4c <_vfiprintf_r+0x1ec>
 800090e:	2300      	movs	r3, #0
 8000910:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000918:	f10a 0a01 	add.w	sl, sl, #1
 800091c:	9304      	str	r3, [sp, #16]
 800091e:	9307      	str	r3, [sp, #28]
 8000920:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000924:	931a      	str	r3, [sp, #104]	@ 0x68
 8000926:	4654      	mov	r4, sl
 8000928:	2205      	movs	r2, #5
 800092a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800092e:	4853      	ldr	r0, [pc, #332]	@ (8000a7c <_vfiprintf_r+0x21c>)
 8000930:	f7ff fc56 	bl	80001e0 <memchr>
 8000934:	9a04      	ldr	r2, [sp, #16]
 8000936:	b9d8      	cbnz	r0, 8000970 <_vfiprintf_r+0x110>
 8000938:	06d1      	lsls	r1, r2, #27
 800093a:	bf44      	itt	mi
 800093c:	2320      	movmi	r3, #32
 800093e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000942:	0713      	lsls	r3, r2, #28
 8000944:	bf44      	itt	mi
 8000946:	232b      	movmi	r3, #43	@ 0x2b
 8000948:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800094c:	f89a 3000 	ldrb.w	r3, [sl]
 8000950:	2b2a      	cmp	r3, #42	@ 0x2a
 8000952:	d015      	beq.n	8000980 <_vfiprintf_r+0x120>
 8000954:	9a07      	ldr	r2, [sp, #28]
 8000956:	4654      	mov	r4, sl
 8000958:	2000      	movs	r0, #0
 800095a:	f04f 0c0a 	mov.w	ip, #10
 800095e:	4621      	mov	r1, r4
 8000960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000964:	3b30      	subs	r3, #48	@ 0x30
 8000966:	2b09      	cmp	r3, #9
 8000968:	d94b      	bls.n	8000a02 <_vfiprintf_r+0x1a2>
 800096a:	b1b0      	cbz	r0, 800099a <_vfiprintf_r+0x13a>
 800096c:	9207      	str	r2, [sp, #28]
 800096e:	e014      	b.n	800099a <_vfiprintf_r+0x13a>
 8000970:	eba0 0308 	sub.w	r3, r0, r8
 8000974:	fa09 f303 	lsl.w	r3, r9, r3
 8000978:	4313      	orrs	r3, r2
 800097a:	9304      	str	r3, [sp, #16]
 800097c:	46a2      	mov	sl, r4
 800097e:	e7d2      	b.n	8000926 <_vfiprintf_r+0xc6>
 8000980:	9b03      	ldr	r3, [sp, #12]
 8000982:	1d19      	adds	r1, r3, #4
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	9103      	str	r1, [sp, #12]
 8000988:	2b00      	cmp	r3, #0
 800098a:	bfbb      	ittet	lt
 800098c:	425b      	neglt	r3, r3
 800098e:	f042 0202 	orrlt.w	r2, r2, #2
 8000992:	9307      	strge	r3, [sp, #28]
 8000994:	9307      	strlt	r3, [sp, #28]
 8000996:	bfb8      	it	lt
 8000998:	9204      	strlt	r2, [sp, #16]
 800099a:	7823      	ldrb	r3, [r4, #0]
 800099c:	2b2e      	cmp	r3, #46	@ 0x2e
 800099e:	d10a      	bne.n	80009b6 <_vfiprintf_r+0x156>
 80009a0:	7863      	ldrb	r3, [r4, #1]
 80009a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80009a4:	d132      	bne.n	8000a0c <_vfiprintf_r+0x1ac>
 80009a6:	9b03      	ldr	r3, [sp, #12]
 80009a8:	1d1a      	adds	r2, r3, #4
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	9203      	str	r2, [sp, #12]
 80009ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80009b2:	3402      	adds	r4, #2
 80009b4:	9305      	str	r3, [sp, #20]
 80009b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000a8c <_vfiprintf_r+0x22c>
 80009ba:	7821      	ldrb	r1, [r4, #0]
 80009bc:	2203      	movs	r2, #3
 80009be:	4650      	mov	r0, sl
 80009c0:	f7ff fc0e 	bl	80001e0 <memchr>
 80009c4:	b138      	cbz	r0, 80009d6 <_vfiprintf_r+0x176>
 80009c6:	9b04      	ldr	r3, [sp, #16]
 80009c8:	eba0 000a 	sub.w	r0, r0, sl
 80009cc:	2240      	movs	r2, #64	@ 0x40
 80009ce:	4082      	lsls	r2, r0
 80009d0:	4313      	orrs	r3, r2
 80009d2:	3401      	adds	r4, #1
 80009d4:	9304      	str	r3, [sp, #16]
 80009d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009da:	4829      	ldr	r0, [pc, #164]	@ (8000a80 <_vfiprintf_r+0x220>)
 80009dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80009e0:	2206      	movs	r2, #6
 80009e2:	f7ff fbfd 	bl	80001e0 <memchr>
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d03f      	beq.n	8000a6a <_vfiprintf_r+0x20a>
 80009ea:	4b26      	ldr	r3, [pc, #152]	@ (8000a84 <_vfiprintf_r+0x224>)
 80009ec:	bb1b      	cbnz	r3, 8000a36 <_vfiprintf_r+0x1d6>
 80009ee:	9b03      	ldr	r3, [sp, #12]
 80009f0:	3307      	adds	r3, #7
 80009f2:	f023 0307 	bic.w	r3, r3, #7
 80009f6:	3308      	adds	r3, #8
 80009f8:	9303      	str	r3, [sp, #12]
 80009fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80009fc:	443b      	add	r3, r7
 80009fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a00:	e76a      	b.n	80008d8 <_vfiprintf_r+0x78>
 8000a02:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a06:	460c      	mov	r4, r1
 8000a08:	2001      	movs	r0, #1
 8000a0a:	e7a8      	b.n	800095e <_vfiprintf_r+0xfe>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	3401      	adds	r4, #1
 8000a10:	9305      	str	r3, [sp, #20]
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 0c0a 	mov.w	ip, #10
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a1e:	3a30      	subs	r2, #48	@ 0x30
 8000a20:	2a09      	cmp	r2, #9
 8000a22:	d903      	bls.n	8000a2c <_vfiprintf_r+0x1cc>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0c6      	beq.n	80009b6 <_vfiprintf_r+0x156>
 8000a28:	9105      	str	r1, [sp, #20]
 8000a2a:	e7c4      	b.n	80009b6 <_vfiprintf_r+0x156>
 8000a2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a30:	4604      	mov	r4, r0
 8000a32:	2301      	movs	r3, #1
 8000a34:	e7f0      	b.n	8000a18 <_vfiprintf_r+0x1b8>
 8000a36:	ab03      	add	r3, sp, #12
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	462a      	mov	r2, r5
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <_vfiprintf_r+0x228>)
 8000a3e:	a904      	add	r1, sp, #16
 8000a40:	4630      	mov	r0, r6
 8000a42:	f3af 8000 	nop.w
 8000a46:	4607      	mov	r7, r0
 8000a48:	1c78      	adds	r0, r7, #1
 8000a4a:	d1d6      	bne.n	80009fa <_vfiprintf_r+0x19a>
 8000a4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a4e:	07d9      	lsls	r1, r3, #31
 8000a50:	d405      	bmi.n	8000a5e <_vfiprintf_r+0x1fe>
 8000a52:	89ab      	ldrh	r3, [r5, #12]
 8000a54:	059a      	lsls	r2, r3, #22
 8000a56:	d402      	bmi.n	8000a5e <_vfiprintf_r+0x1fe>
 8000a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a5a:	f7ff fed7 	bl	800080c <__retarget_lock_release_recursive>
 8000a5e:	89ab      	ldrh	r3, [r5, #12]
 8000a60:	065b      	lsls	r3, r3, #25
 8000a62:	f53f af1f 	bmi.w	80008a4 <_vfiprintf_r+0x44>
 8000a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000a68:	e71e      	b.n	80008a8 <_vfiprintf_r+0x48>
 8000a6a:	ab03      	add	r3, sp, #12
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	462a      	mov	r2, r5
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <_vfiprintf_r+0x228>)
 8000a72:	a904      	add	r1, sp, #16
 8000a74:	4630      	mov	r0, r6
 8000a76:	f000 f91b 	bl	8000cb0 <_printf_i>
 8000a7a:	e7e4      	b.n	8000a46 <_vfiprintf_r+0x1e6>
 8000a7c:	08001485 	.word	0x08001485
 8000a80:	0800148f 	.word	0x0800148f
 8000a84:	00000000 	.word	0x00000000
 8000a88:	0800083d 	.word	0x0800083d
 8000a8c:	0800148b 	.word	0x0800148b

08000a90 <sbrk_aligned>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	4e0f      	ldr	r6, [pc, #60]	@ (8000ad0 <sbrk_aligned+0x40>)
 8000a94:	460c      	mov	r4, r1
 8000a96:	6831      	ldr	r1, [r6, #0]
 8000a98:	4605      	mov	r5, r0
 8000a9a:	b911      	cbnz	r1, 8000aa2 <sbrk_aligned+0x12>
 8000a9c:	f000 fc4c 	bl	8001338 <_sbrk_r>
 8000aa0:	6030      	str	r0, [r6, #0]
 8000aa2:	4621      	mov	r1, r4
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f000 fc47 	bl	8001338 <_sbrk_r>
 8000aaa:	1c43      	adds	r3, r0, #1
 8000aac:	d103      	bne.n	8000ab6 <sbrk_aligned+0x26>
 8000aae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	1cc4      	adds	r4, r0, #3
 8000ab8:	f024 0403 	bic.w	r4, r4, #3
 8000abc:	42a0      	cmp	r0, r4
 8000abe:	d0f8      	beq.n	8000ab2 <sbrk_aligned+0x22>
 8000ac0:	1a21      	subs	r1, r4, r0
 8000ac2:	4628      	mov	r0, r5
 8000ac4:	f000 fc38 	bl	8001338 <_sbrk_r>
 8000ac8:	3001      	adds	r0, #1
 8000aca:	d1f2      	bne.n	8000ab2 <sbrk_aligned+0x22>
 8000acc:	e7ef      	b.n	8000aae <sbrk_aligned+0x1e>
 8000ace:	bf00      	nop
 8000ad0:	200001bc 	.word	0x200001bc

08000ad4 <_malloc_r>:
 8000ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ad8:	1ccd      	adds	r5, r1, #3
 8000ada:	f025 0503 	bic.w	r5, r5, #3
 8000ade:	3508      	adds	r5, #8
 8000ae0:	2d0c      	cmp	r5, #12
 8000ae2:	bf38      	it	cc
 8000ae4:	250c      	movcc	r5, #12
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	4606      	mov	r6, r0
 8000aea:	db01      	blt.n	8000af0 <_malloc_r+0x1c>
 8000aec:	42a9      	cmp	r1, r5
 8000aee:	d904      	bls.n	8000afa <_malloc_r+0x26>
 8000af0:	230c      	movs	r3, #12
 8000af2:	6033      	str	r3, [r6, #0]
 8000af4:	2000      	movs	r0, #0
 8000af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000afa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bd0 <_malloc_r+0xfc>
 8000afe:	f000 faa1 	bl	8001044 <__malloc_lock>
 8000b02:	f8d8 3000 	ldr.w	r3, [r8]
 8000b06:	461c      	mov	r4, r3
 8000b08:	bb44      	cbnz	r4, 8000b5c <_malloc_r+0x88>
 8000b0a:	4629      	mov	r1, r5
 8000b0c:	4630      	mov	r0, r6
 8000b0e:	f7ff ffbf 	bl	8000a90 <sbrk_aligned>
 8000b12:	1c43      	adds	r3, r0, #1
 8000b14:	4604      	mov	r4, r0
 8000b16:	d158      	bne.n	8000bca <_malloc_r+0xf6>
 8000b18:	f8d8 4000 	ldr.w	r4, [r8]
 8000b1c:	4627      	mov	r7, r4
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d143      	bne.n	8000baa <_malloc_r+0xd6>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d04b      	beq.n	8000bbe <_malloc_r+0xea>
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	4639      	mov	r1, r7
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	eb04 0903 	add.w	r9, r4, r3
 8000b30:	f000 fc02 	bl	8001338 <_sbrk_r>
 8000b34:	4581      	cmp	r9, r0
 8000b36:	d142      	bne.n	8000bbe <_malloc_r+0xea>
 8000b38:	6821      	ldr	r1, [r4, #0]
 8000b3a:	1a6d      	subs	r5, r5, r1
 8000b3c:	4629      	mov	r1, r5
 8000b3e:	4630      	mov	r0, r6
 8000b40:	f7ff ffa6 	bl	8000a90 <sbrk_aligned>
 8000b44:	3001      	adds	r0, #1
 8000b46:	d03a      	beq.n	8000bbe <_malloc_r+0xea>
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	442b      	add	r3, r5
 8000b4c:	6023      	str	r3, [r4, #0]
 8000b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	bb62      	cbnz	r2, 8000bb0 <_malloc_r+0xdc>
 8000b56:	f8c8 7000 	str.w	r7, [r8]
 8000b5a:	e00f      	b.n	8000b7c <_malloc_r+0xa8>
 8000b5c:	6822      	ldr	r2, [r4, #0]
 8000b5e:	1b52      	subs	r2, r2, r5
 8000b60:	d420      	bmi.n	8000ba4 <_malloc_r+0xd0>
 8000b62:	2a0b      	cmp	r2, #11
 8000b64:	d917      	bls.n	8000b96 <_malloc_r+0xc2>
 8000b66:	1961      	adds	r1, r4, r5
 8000b68:	42a3      	cmp	r3, r4
 8000b6a:	6025      	str	r5, [r4, #0]
 8000b6c:	bf18      	it	ne
 8000b6e:	6059      	strne	r1, [r3, #4]
 8000b70:	6863      	ldr	r3, [r4, #4]
 8000b72:	bf08      	it	eq
 8000b74:	f8c8 1000 	streq.w	r1, [r8]
 8000b78:	5162      	str	r2, [r4, r5]
 8000b7a:	604b      	str	r3, [r1, #4]
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	f000 fa67 	bl	8001050 <__malloc_unlock>
 8000b82:	f104 000b 	add.w	r0, r4, #11
 8000b86:	1d23      	adds	r3, r4, #4
 8000b88:	f020 0007 	bic.w	r0, r0, #7
 8000b8c:	1ac2      	subs	r2, r0, r3
 8000b8e:	bf1c      	itt	ne
 8000b90:	1a1b      	subne	r3, r3, r0
 8000b92:	50a3      	strne	r3, [r4, r2]
 8000b94:	e7af      	b.n	8000af6 <_malloc_r+0x22>
 8000b96:	6862      	ldr	r2, [r4, #4]
 8000b98:	42a3      	cmp	r3, r4
 8000b9a:	bf0c      	ite	eq
 8000b9c:	f8c8 2000 	streq.w	r2, [r8]
 8000ba0:	605a      	strne	r2, [r3, #4]
 8000ba2:	e7eb      	b.n	8000b7c <_malloc_r+0xa8>
 8000ba4:	4623      	mov	r3, r4
 8000ba6:	6864      	ldr	r4, [r4, #4]
 8000ba8:	e7ae      	b.n	8000b08 <_malloc_r+0x34>
 8000baa:	463c      	mov	r4, r7
 8000bac:	687f      	ldr	r7, [r7, #4]
 8000bae:	e7b6      	b.n	8000b1e <_malloc_r+0x4a>
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	42a3      	cmp	r3, r4
 8000bb6:	d1fb      	bne.n	8000bb0 <_malloc_r+0xdc>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	6053      	str	r3, [r2, #4]
 8000bbc:	e7de      	b.n	8000b7c <_malloc_r+0xa8>
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	6033      	str	r3, [r6, #0]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	f000 fa44 	bl	8001050 <__malloc_unlock>
 8000bc8:	e794      	b.n	8000af4 <_malloc_r+0x20>
 8000bca:	6005      	str	r5, [r0, #0]
 8000bcc:	e7d6      	b.n	8000b7c <_malloc_r+0xa8>
 8000bce:	bf00      	nop
 8000bd0:	200001c0 	.word	0x200001c0

08000bd4 <_printf_common>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	4616      	mov	r6, r2
 8000bda:	4698      	mov	r8, r3
 8000bdc:	688a      	ldr	r2, [r1, #8]
 8000bde:	690b      	ldr	r3, [r1, #16]
 8000be0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000be4:	4293      	cmp	r3, r2
 8000be6:	bfb8      	it	lt
 8000be8:	4613      	movlt	r3, r2
 8000bea:	6033      	str	r3, [r6, #0]
 8000bec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000bf0:	4607      	mov	r7, r0
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	b10a      	cbz	r2, 8000bfa <_printf_common+0x26>
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	6033      	str	r3, [r6, #0]
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	0699      	lsls	r1, r3, #26
 8000bfe:	bf42      	ittt	mi
 8000c00:	6833      	ldrmi	r3, [r6, #0]
 8000c02:	3302      	addmi	r3, #2
 8000c04:	6033      	strmi	r3, [r6, #0]
 8000c06:	6825      	ldr	r5, [r4, #0]
 8000c08:	f015 0506 	ands.w	r5, r5, #6
 8000c0c:	d106      	bne.n	8000c1c <_printf_common+0x48>
 8000c0e:	f104 0a19 	add.w	sl, r4, #25
 8000c12:	68e3      	ldr	r3, [r4, #12]
 8000c14:	6832      	ldr	r2, [r6, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	42ab      	cmp	r3, r5
 8000c1a:	dc26      	bgt.n	8000c6a <_printf_common+0x96>
 8000c1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c20:	6822      	ldr	r2, [r4, #0]
 8000c22:	3b00      	subs	r3, #0
 8000c24:	bf18      	it	ne
 8000c26:	2301      	movne	r3, #1
 8000c28:	0692      	lsls	r2, r2, #26
 8000c2a:	d42b      	bmi.n	8000c84 <_printf_common+0xb0>
 8000c2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c30:	4641      	mov	r1, r8
 8000c32:	4638      	mov	r0, r7
 8000c34:	47c8      	blx	r9
 8000c36:	3001      	adds	r0, #1
 8000c38:	d01e      	beq.n	8000c78 <_printf_common+0xa4>
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	6922      	ldr	r2, [r4, #16]
 8000c3e:	f003 0306 	and.w	r3, r3, #6
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf02      	ittt	eq
 8000c46:	68e5      	ldreq	r5, [r4, #12]
 8000c48:	6833      	ldreq	r3, [r6, #0]
 8000c4a:	1aed      	subeq	r5, r5, r3
 8000c4c:	68a3      	ldr	r3, [r4, #8]
 8000c4e:	bf0c      	ite	eq
 8000c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c54:	2500      	movne	r5, #0
 8000c56:	4293      	cmp	r3, r2
 8000c58:	bfc4      	itt	gt
 8000c5a:	1a9b      	subgt	r3, r3, r2
 8000c5c:	18ed      	addgt	r5, r5, r3
 8000c5e:	2600      	movs	r6, #0
 8000c60:	341a      	adds	r4, #26
 8000c62:	42b5      	cmp	r5, r6
 8000c64:	d11a      	bne.n	8000c9c <_printf_common+0xc8>
 8000c66:	2000      	movs	r0, #0
 8000c68:	e008      	b.n	8000c7c <_printf_common+0xa8>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	4652      	mov	r2, sl
 8000c6e:	4641      	mov	r1, r8
 8000c70:	4638      	mov	r0, r7
 8000c72:	47c8      	blx	r9
 8000c74:	3001      	adds	r0, #1
 8000c76:	d103      	bne.n	8000c80 <_printf_common+0xac>
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c80:	3501      	adds	r5, #1
 8000c82:	e7c6      	b.n	8000c12 <_printf_common+0x3e>
 8000c84:	18e1      	adds	r1, r4, r3
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	2030      	movs	r0, #48	@ 0x30
 8000c8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c8e:	4422      	add	r2, r4
 8000c90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c98:	3302      	adds	r3, #2
 8000c9a:	e7c7      	b.n	8000c2c <_printf_common+0x58>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	4622      	mov	r2, r4
 8000ca0:	4641      	mov	r1, r8
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	47c8      	blx	r9
 8000ca6:	3001      	adds	r0, #1
 8000ca8:	d0e6      	beq.n	8000c78 <_printf_common+0xa4>
 8000caa:	3601      	adds	r6, #1
 8000cac:	e7d9      	b.n	8000c62 <_printf_common+0x8e>
	...

08000cb0 <_printf_i>:
 8000cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	7e0f      	ldrb	r7, [r1, #24]
 8000cb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000cb8:	2f78      	cmp	r7, #120	@ 0x78
 8000cba:	4691      	mov	r9, r2
 8000cbc:	4680      	mov	r8, r0
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000cc6:	d807      	bhi.n	8000cd8 <_printf_i+0x28>
 8000cc8:	2f62      	cmp	r7, #98	@ 0x62
 8000cca:	d80a      	bhi.n	8000ce2 <_printf_i+0x32>
 8000ccc:	2f00      	cmp	r7, #0
 8000cce:	f000 80d1 	beq.w	8000e74 <_printf_i+0x1c4>
 8000cd2:	2f58      	cmp	r7, #88	@ 0x58
 8000cd4:	f000 80b8 	beq.w	8000e48 <_printf_i+0x198>
 8000cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000cdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ce0:	e03a      	b.n	8000d58 <_printf_i+0xa8>
 8000ce2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ce6:	2b15      	cmp	r3, #21
 8000ce8:	d8f6      	bhi.n	8000cd8 <_printf_i+0x28>
 8000cea:	a101      	add	r1, pc, #4	@ (adr r1, 8000cf0 <_printf_i+0x40>)
 8000cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000cf0:	08000d49 	.word	0x08000d49
 8000cf4:	08000d5d 	.word	0x08000d5d
 8000cf8:	08000cd9 	.word	0x08000cd9
 8000cfc:	08000cd9 	.word	0x08000cd9
 8000d00:	08000cd9 	.word	0x08000cd9
 8000d04:	08000cd9 	.word	0x08000cd9
 8000d08:	08000d5d 	.word	0x08000d5d
 8000d0c:	08000cd9 	.word	0x08000cd9
 8000d10:	08000cd9 	.word	0x08000cd9
 8000d14:	08000cd9 	.word	0x08000cd9
 8000d18:	08000cd9 	.word	0x08000cd9
 8000d1c:	08000e5b 	.word	0x08000e5b
 8000d20:	08000d87 	.word	0x08000d87
 8000d24:	08000e15 	.word	0x08000e15
 8000d28:	08000cd9 	.word	0x08000cd9
 8000d2c:	08000cd9 	.word	0x08000cd9
 8000d30:	08000e7d 	.word	0x08000e7d
 8000d34:	08000cd9 	.word	0x08000cd9
 8000d38:	08000d87 	.word	0x08000d87
 8000d3c:	08000cd9 	.word	0x08000cd9
 8000d40:	08000cd9 	.word	0x08000cd9
 8000d44:	08000e1d 	.word	0x08000e1d
 8000d48:	6833      	ldr	r3, [r6, #0]
 8000d4a:	1d1a      	adds	r2, r3, #4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6032      	str	r2, [r6, #0]
 8000d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e09c      	b.n	8000e96 <_printf_i+0x1e6>
 8000d5c:	6833      	ldr	r3, [r6, #0]
 8000d5e:	6820      	ldr	r0, [r4, #0]
 8000d60:	1d19      	adds	r1, r3, #4
 8000d62:	6031      	str	r1, [r6, #0]
 8000d64:	0606      	lsls	r6, r0, #24
 8000d66:	d501      	bpl.n	8000d6c <_printf_i+0xbc>
 8000d68:	681d      	ldr	r5, [r3, #0]
 8000d6a:	e003      	b.n	8000d74 <_printf_i+0xc4>
 8000d6c:	0645      	lsls	r5, r0, #25
 8000d6e:	d5fb      	bpl.n	8000d68 <_printf_i+0xb8>
 8000d70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d74:	2d00      	cmp	r5, #0
 8000d76:	da03      	bge.n	8000d80 <_printf_i+0xd0>
 8000d78:	232d      	movs	r3, #45	@ 0x2d
 8000d7a:	426d      	negs	r5, r5
 8000d7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d80:	4858      	ldr	r0, [pc, #352]	@ (8000ee4 <_printf_i+0x234>)
 8000d82:	230a      	movs	r3, #10
 8000d84:	e011      	b.n	8000daa <_printf_i+0xfa>
 8000d86:	6821      	ldr	r1, [r4, #0]
 8000d88:	6833      	ldr	r3, [r6, #0]
 8000d8a:	0608      	lsls	r0, r1, #24
 8000d8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d90:	d402      	bmi.n	8000d98 <_printf_i+0xe8>
 8000d92:	0649      	lsls	r1, r1, #25
 8000d94:	bf48      	it	mi
 8000d96:	b2ad      	uxthmi	r5, r5
 8000d98:	2f6f      	cmp	r7, #111	@ 0x6f
 8000d9a:	4852      	ldr	r0, [pc, #328]	@ (8000ee4 <_printf_i+0x234>)
 8000d9c:	6033      	str	r3, [r6, #0]
 8000d9e:	bf14      	ite	ne
 8000da0:	230a      	movne	r3, #10
 8000da2:	2308      	moveq	r3, #8
 8000da4:	2100      	movs	r1, #0
 8000da6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000daa:	6866      	ldr	r6, [r4, #4]
 8000dac:	60a6      	str	r6, [r4, #8]
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	db05      	blt.n	8000dbe <_printf_i+0x10e>
 8000db2:	6821      	ldr	r1, [r4, #0]
 8000db4:	432e      	orrs	r6, r5
 8000db6:	f021 0104 	bic.w	r1, r1, #4
 8000dba:	6021      	str	r1, [r4, #0]
 8000dbc:	d04b      	beq.n	8000e56 <_printf_i+0x1a6>
 8000dbe:	4616      	mov	r6, r2
 8000dc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8000dc4:	fb03 5711 	mls	r7, r3, r1, r5
 8000dc8:	5dc7      	ldrb	r7, [r0, r7]
 8000dca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000dce:	462f      	mov	r7, r5
 8000dd0:	42bb      	cmp	r3, r7
 8000dd2:	460d      	mov	r5, r1
 8000dd4:	d9f4      	bls.n	8000dc0 <_printf_i+0x110>
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	d10b      	bne.n	8000df2 <_printf_i+0x142>
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	07df      	lsls	r7, r3, #31
 8000dde:	d508      	bpl.n	8000df2 <_printf_i+0x142>
 8000de0:	6923      	ldr	r3, [r4, #16]
 8000de2:	6861      	ldr	r1, [r4, #4]
 8000de4:	4299      	cmp	r1, r3
 8000de6:	bfde      	ittt	le
 8000de8:	2330      	movle	r3, #48	@ 0x30
 8000dea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000dee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000df2:	1b92      	subs	r2, r2, r6
 8000df4:	6122      	str	r2, [r4, #16]
 8000df6:	f8cd a000 	str.w	sl, [sp]
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	aa03      	add	r2, sp, #12
 8000dfe:	4621      	mov	r1, r4
 8000e00:	4640      	mov	r0, r8
 8000e02:	f7ff fee7 	bl	8000bd4 <_printf_common>
 8000e06:	3001      	adds	r0, #1
 8000e08:	d14a      	bne.n	8000ea0 <_printf_i+0x1f0>
 8000e0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e0e:	b004      	add	sp, #16
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	6023      	str	r3, [r4, #0]
 8000e1c:	4832      	ldr	r0, [pc, #200]	@ (8000ee8 <_printf_i+0x238>)
 8000e1e:	2778      	movs	r7, #120	@ 0x78
 8000e20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	6831      	ldr	r1, [r6, #0]
 8000e28:	061f      	lsls	r7, r3, #24
 8000e2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e2e:	d402      	bmi.n	8000e36 <_printf_i+0x186>
 8000e30:	065f      	lsls	r7, r3, #25
 8000e32:	bf48      	it	mi
 8000e34:	b2ad      	uxthmi	r5, r5
 8000e36:	6031      	str	r1, [r6, #0]
 8000e38:	07d9      	lsls	r1, r3, #31
 8000e3a:	bf44      	itt	mi
 8000e3c:	f043 0320 	orrmi.w	r3, r3, #32
 8000e40:	6023      	strmi	r3, [r4, #0]
 8000e42:	b11d      	cbz	r5, 8000e4c <_printf_i+0x19c>
 8000e44:	2310      	movs	r3, #16
 8000e46:	e7ad      	b.n	8000da4 <_printf_i+0xf4>
 8000e48:	4826      	ldr	r0, [pc, #152]	@ (8000ee4 <_printf_i+0x234>)
 8000e4a:	e7e9      	b.n	8000e20 <_printf_i+0x170>
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	f023 0320 	bic.w	r3, r3, #32
 8000e52:	6023      	str	r3, [r4, #0]
 8000e54:	e7f6      	b.n	8000e44 <_printf_i+0x194>
 8000e56:	4616      	mov	r6, r2
 8000e58:	e7bd      	b.n	8000dd6 <_printf_i+0x126>
 8000e5a:	6833      	ldr	r3, [r6, #0]
 8000e5c:	6825      	ldr	r5, [r4, #0]
 8000e5e:	6961      	ldr	r1, [r4, #20]
 8000e60:	1d18      	adds	r0, r3, #4
 8000e62:	6030      	str	r0, [r6, #0]
 8000e64:	062e      	lsls	r6, r5, #24
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	d501      	bpl.n	8000e6e <_printf_i+0x1be>
 8000e6a:	6019      	str	r1, [r3, #0]
 8000e6c:	e002      	b.n	8000e74 <_printf_i+0x1c4>
 8000e6e:	0668      	lsls	r0, r5, #25
 8000e70:	d5fb      	bpl.n	8000e6a <_printf_i+0x1ba>
 8000e72:	8019      	strh	r1, [r3, #0]
 8000e74:	2300      	movs	r3, #0
 8000e76:	6123      	str	r3, [r4, #16]
 8000e78:	4616      	mov	r6, r2
 8000e7a:	e7bc      	b.n	8000df6 <_printf_i+0x146>
 8000e7c:	6833      	ldr	r3, [r6, #0]
 8000e7e:	1d1a      	adds	r2, r3, #4
 8000e80:	6032      	str	r2, [r6, #0]
 8000e82:	681e      	ldr	r6, [r3, #0]
 8000e84:	6862      	ldr	r2, [r4, #4]
 8000e86:	2100      	movs	r1, #0
 8000e88:	4630      	mov	r0, r6
 8000e8a:	f7ff f9a9 	bl	80001e0 <memchr>
 8000e8e:	b108      	cbz	r0, 8000e94 <_printf_i+0x1e4>
 8000e90:	1b80      	subs	r0, r0, r6
 8000e92:	6060      	str	r0, [r4, #4]
 8000e94:	6863      	ldr	r3, [r4, #4]
 8000e96:	6123      	str	r3, [r4, #16]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e9e:	e7aa      	b.n	8000df6 <_printf_i+0x146>
 8000ea0:	6923      	ldr	r3, [r4, #16]
 8000ea2:	4632      	mov	r2, r6
 8000ea4:	4649      	mov	r1, r9
 8000ea6:	4640      	mov	r0, r8
 8000ea8:	47d0      	blx	sl
 8000eaa:	3001      	adds	r0, #1
 8000eac:	d0ad      	beq.n	8000e0a <_printf_i+0x15a>
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	079b      	lsls	r3, r3, #30
 8000eb2:	d413      	bmi.n	8000edc <_printf_i+0x22c>
 8000eb4:	68e0      	ldr	r0, [r4, #12]
 8000eb6:	9b03      	ldr	r3, [sp, #12]
 8000eb8:	4298      	cmp	r0, r3
 8000eba:	bfb8      	it	lt
 8000ebc:	4618      	movlt	r0, r3
 8000ebe:	e7a6      	b.n	8000e0e <_printf_i+0x15e>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	4632      	mov	r2, r6
 8000ec4:	4649      	mov	r1, r9
 8000ec6:	4640      	mov	r0, r8
 8000ec8:	47d0      	blx	sl
 8000eca:	3001      	adds	r0, #1
 8000ecc:	d09d      	beq.n	8000e0a <_printf_i+0x15a>
 8000ece:	3501      	adds	r5, #1
 8000ed0:	68e3      	ldr	r3, [r4, #12]
 8000ed2:	9903      	ldr	r1, [sp, #12]
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	42ab      	cmp	r3, r5
 8000ed8:	dcf2      	bgt.n	8000ec0 <_printf_i+0x210>
 8000eda:	e7eb      	b.n	8000eb4 <_printf_i+0x204>
 8000edc:	2500      	movs	r5, #0
 8000ede:	f104 0619 	add.w	r6, r4, #25
 8000ee2:	e7f5      	b.n	8000ed0 <_printf_i+0x220>
 8000ee4:	08001496 	.word	0x08001496
 8000ee8:	080014a7 	.word	0x080014a7

08000eec <__sflush_r>:
 8000eec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef4:	0716      	lsls	r6, r2, #28
 8000ef6:	4605      	mov	r5, r0
 8000ef8:	460c      	mov	r4, r1
 8000efa:	d454      	bmi.n	8000fa6 <__sflush_r+0xba>
 8000efc:	684b      	ldr	r3, [r1, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	dc02      	bgt.n	8000f08 <__sflush_r+0x1c>
 8000f02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd48      	ble.n	8000f9a <__sflush_r+0xae>
 8000f08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d045      	beq.n	8000f9a <__sflush_r+0xae>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000f14:	682f      	ldr	r7, [r5, #0]
 8000f16:	6a21      	ldr	r1, [r4, #32]
 8000f18:	602b      	str	r3, [r5, #0]
 8000f1a:	d030      	beq.n	8000f7e <__sflush_r+0x92>
 8000f1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f1e:	89a3      	ldrh	r3, [r4, #12]
 8000f20:	0759      	lsls	r1, r3, #29
 8000f22:	d505      	bpl.n	8000f30 <__sflush_r+0x44>
 8000f24:	6863      	ldr	r3, [r4, #4]
 8000f26:	1ad2      	subs	r2, r2, r3
 8000f28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000f2a:	b10b      	cbz	r3, 8000f30 <__sflush_r+0x44>
 8000f2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f2e:	1ad2      	subs	r2, r2, r3
 8000f30:	2300      	movs	r3, #0
 8000f32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f34:	6a21      	ldr	r1, [r4, #32]
 8000f36:	4628      	mov	r0, r5
 8000f38:	47b0      	blx	r6
 8000f3a:	1c43      	adds	r3, r0, #1
 8000f3c:	89a3      	ldrh	r3, [r4, #12]
 8000f3e:	d106      	bne.n	8000f4e <__sflush_r+0x62>
 8000f40:	6829      	ldr	r1, [r5, #0]
 8000f42:	291d      	cmp	r1, #29
 8000f44:	d82b      	bhi.n	8000f9e <__sflush_r+0xb2>
 8000f46:	4a2a      	ldr	r2, [pc, #168]	@ (8000ff0 <__sflush_r+0x104>)
 8000f48:	40ca      	lsrs	r2, r1
 8000f4a:	07d6      	lsls	r6, r2, #31
 8000f4c:	d527      	bpl.n	8000f9e <__sflush_r+0xb2>
 8000f4e:	2200      	movs	r2, #0
 8000f50:	6062      	str	r2, [r4, #4]
 8000f52:	04d9      	lsls	r1, r3, #19
 8000f54:	6922      	ldr	r2, [r4, #16]
 8000f56:	6022      	str	r2, [r4, #0]
 8000f58:	d504      	bpl.n	8000f64 <__sflush_r+0x78>
 8000f5a:	1c42      	adds	r2, r0, #1
 8000f5c:	d101      	bne.n	8000f62 <__sflush_r+0x76>
 8000f5e:	682b      	ldr	r3, [r5, #0]
 8000f60:	b903      	cbnz	r3, 8000f64 <__sflush_r+0x78>
 8000f62:	6560      	str	r0, [r4, #84]	@ 0x54
 8000f64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000f66:	602f      	str	r7, [r5, #0]
 8000f68:	b1b9      	cbz	r1, 8000f9a <__sflush_r+0xae>
 8000f6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d002      	beq.n	8000f78 <__sflush_r+0x8c>
 8000f72:	4628      	mov	r0, r5
 8000f74:	f000 fa24 	bl	80013c0 <_free_r>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8000f7c:	e00d      	b.n	8000f9a <__sflush_r+0xae>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	4628      	mov	r0, r5
 8000f82:	47b0      	blx	r6
 8000f84:	4602      	mov	r2, r0
 8000f86:	1c50      	adds	r0, r2, #1
 8000f88:	d1c9      	bne.n	8000f1e <__sflush_r+0x32>
 8000f8a:	682b      	ldr	r3, [r5, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0c6      	beq.n	8000f1e <__sflush_r+0x32>
 8000f90:	2b1d      	cmp	r3, #29
 8000f92:	d001      	beq.n	8000f98 <__sflush_r+0xac>
 8000f94:	2b16      	cmp	r3, #22
 8000f96:	d11e      	bne.n	8000fd6 <__sflush_r+0xea>
 8000f98:	602f      	str	r7, [r5, #0]
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	e022      	b.n	8000fe4 <__sflush_r+0xf8>
 8000f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	e01b      	b.n	8000fde <__sflush_r+0xf2>
 8000fa6:	690f      	ldr	r7, [r1, #16]
 8000fa8:	2f00      	cmp	r7, #0
 8000faa:	d0f6      	beq.n	8000f9a <__sflush_r+0xae>
 8000fac:	0793      	lsls	r3, r2, #30
 8000fae:	680e      	ldr	r6, [r1, #0]
 8000fb0:	bf08      	it	eq
 8000fb2:	694b      	ldreq	r3, [r1, #20]
 8000fb4:	600f      	str	r7, [r1, #0]
 8000fb6:	bf18      	it	ne
 8000fb8:	2300      	movne	r3, #0
 8000fba:	eba6 0807 	sub.w	r8, r6, r7
 8000fbe:	608b      	str	r3, [r1, #8]
 8000fc0:	f1b8 0f00 	cmp.w	r8, #0
 8000fc4:	dde9      	ble.n	8000f9a <__sflush_r+0xae>
 8000fc6:	6a21      	ldr	r1, [r4, #32]
 8000fc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000fca:	4643      	mov	r3, r8
 8000fcc:	463a      	mov	r2, r7
 8000fce:	4628      	mov	r0, r5
 8000fd0:	47b0      	blx	r6
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	dc08      	bgt.n	8000fe8 <__sflush_r+0xfc>
 8000fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fde:	81a3      	strh	r3, [r4, #12]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fe8:	4407      	add	r7, r0
 8000fea:	eba8 0800 	sub.w	r8, r8, r0
 8000fee:	e7e7      	b.n	8000fc0 <__sflush_r+0xd4>
 8000ff0:	20400001 	.word	0x20400001

08000ff4 <_fflush_r>:
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	690b      	ldr	r3, [r1, #16]
 8000ff8:	4605      	mov	r5, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	b913      	cbnz	r3, 8001004 <_fflush_r+0x10>
 8000ffe:	2500      	movs	r5, #0
 8001000:	4628      	mov	r0, r5
 8001002:	bd38      	pop	{r3, r4, r5, pc}
 8001004:	b118      	cbz	r0, 800100e <_fflush_r+0x1a>
 8001006:	6a03      	ldr	r3, [r0, #32]
 8001008:	b90b      	cbnz	r3, 800100e <_fflush_r+0x1a>
 800100a:	f7ff fb83 	bl	8000714 <__sinit>
 800100e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f3      	beq.n	8000ffe <_fflush_r+0xa>
 8001016:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001018:	07d0      	lsls	r0, r2, #31
 800101a:	d404      	bmi.n	8001026 <_fflush_r+0x32>
 800101c:	0599      	lsls	r1, r3, #22
 800101e:	d402      	bmi.n	8001026 <_fflush_r+0x32>
 8001020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001022:	f7ff fbf2 	bl	800080a <__retarget_lock_acquire_recursive>
 8001026:	4628      	mov	r0, r5
 8001028:	4621      	mov	r1, r4
 800102a:	f7ff ff5f 	bl	8000eec <__sflush_r>
 800102e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001030:	07da      	lsls	r2, r3, #31
 8001032:	4605      	mov	r5, r0
 8001034:	d4e4      	bmi.n	8001000 <_fflush_r+0xc>
 8001036:	89a3      	ldrh	r3, [r4, #12]
 8001038:	059b      	lsls	r3, r3, #22
 800103a:	d4e1      	bmi.n	8001000 <_fflush_r+0xc>
 800103c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800103e:	f7ff fbe5 	bl	800080c <__retarget_lock_release_recursive>
 8001042:	e7dd      	b.n	8001000 <_fflush_r+0xc>

08001044 <__malloc_lock>:
 8001044:	4801      	ldr	r0, [pc, #4]	@ (800104c <__malloc_lock+0x8>)
 8001046:	f7ff bbe0 	b.w	800080a <__retarget_lock_acquire_recursive>
 800104a:	bf00      	nop
 800104c:	200001b8 	.word	0x200001b8

08001050 <__malloc_unlock>:
 8001050:	4801      	ldr	r0, [pc, #4]	@ (8001058 <__malloc_unlock+0x8>)
 8001052:	f7ff bbdb 	b.w	800080c <__retarget_lock_release_recursive>
 8001056:	bf00      	nop
 8001058:	200001b8 	.word	0x200001b8

0800105c <__sread>:
 800105c:	b510      	push	{r4, lr}
 800105e:	460c      	mov	r4, r1
 8001060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001064:	f000 f956 	bl	8001314 <_read_r>
 8001068:	2800      	cmp	r0, #0
 800106a:	bfab      	itete	ge
 800106c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800106e:	89a3      	ldrhlt	r3, [r4, #12]
 8001070:	181b      	addge	r3, r3, r0
 8001072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001076:	bfac      	ite	ge
 8001078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800107a:	81a3      	strhlt	r3, [r4, #12]
 800107c:	bd10      	pop	{r4, pc}

0800107e <__swrite>:
 800107e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001082:	461f      	mov	r7, r3
 8001084:	898b      	ldrh	r3, [r1, #12]
 8001086:	05db      	lsls	r3, r3, #23
 8001088:	4605      	mov	r5, r0
 800108a:	460c      	mov	r4, r1
 800108c:	4616      	mov	r6, r2
 800108e:	d505      	bpl.n	800109c <__swrite+0x1e>
 8001090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001094:	2302      	movs	r3, #2
 8001096:	2200      	movs	r2, #0
 8001098:	f000 f92a 	bl	80012f0 <_lseek_r>
 800109c:	89a3      	ldrh	r3, [r4, #12]
 800109e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010a6:	81a3      	strh	r3, [r4, #12]
 80010a8:	4632      	mov	r2, r6
 80010aa:	463b      	mov	r3, r7
 80010ac:	4628      	mov	r0, r5
 80010ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010b2:	f000 b951 	b.w	8001358 <_write_r>

080010b6 <__sseek>:
 80010b6:	b510      	push	{r4, lr}
 80010b8:	460c      	mov	r4, r1
 80010ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010be:	f000 f917 	bl	80012f0 <_lseek_r>
 80010c2:	1c43      	adds	r3, r0, #1
 80010c4:	89a3      	ldrh	r3, [r4, #12]
 80010c6:	bf15      	itete	ne
 80010c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80010ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80010d2:	81a3      	strheq	r3, [r4, #12]
 80010d4:	bf18      	it	ne
 80010d6:	81a3      	strhne	r3, [r4, #12]
 80010d8:	bd10      	pop	{r4, pc}

080010da <__sclose>:
 80010da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010de:	f000 b94d 	b.w	800137c <_close_r>

080010e2 <__swbuf_r>:
 80010e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e4:	460e      	mov	r6, r1
 80010e6:	4614      	mov	r4, r2
 80010e8:	4605      	mov	r5, r0
 80010ea:	b118      	cbz	r0, 80010f4 <__swbuf_r+0x12>
 80010ec:	6a03      	ldr	r3, [r0, #32]
 80010ee:	b90b      	cbnz	r3, 80010f4 <__swbuf_r+0x12>
 80010f0:	f7ff fb10 	bl	8000714 <__sinit>
 80010f4:	69a3      	ldr	r3, [r4, #24]
 80010f6:	60a3      	str	r3, [r4, #8]
 80010f8:	89a3      	ldrh	r3, [r4, #12]
 80010fa:	071a      	lsls	r2, r3, #28
 80010fc:	d501      	bpl.n	8001102 <__swbuf_r+0x20>
 80010fe:	6923      	ldr	r3, [r4, #16]
 8001100:	b943      	cbnz	r3, 8001114 <__swbuf_r+0x32>
 8001102:	4621      	mov	r1, r4
 8001104:	4628      	mov	r0, r5
 8001106:	f000 f82b 	bl	8001160 <__swsetup_r>
 800110a:	b118      	cbz	r0, 8001114 <__swbuf_r+0x32>
 800110c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001110:	4638      	mov	r0, r7
 8001112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	6922      	ldr	r2, [r4, #16]
 8001118:	1a98      	subs	r0, r3, r2
 800111a:	6963      	ldr	r3, [r4, #20]
 800111c:	b2f6      	uxtb	r6, r6
 800111e:	4283      	cmp	r3, r0
 8001120:	4637      	mov	r7, r6
 8001122:	dc05      	bgt.n	8001130 <__swbuf_r+0x4e>
 8001124:	4621      	mov	r1, r4
 8001126:	4628      	mov	r0, r5
 8001128:	f7ff ff64 	bl	8000ff4 <_fflush_r>
 800112c:	2800      	cmp	r0, #0
 800112e:	d1ed      	bne.n	800110c <__swbuf_r+0x2a>
 8001130:	68a3      	ldr	r3, [r4, #8]
 8001132:	3b01      	subs	r3, #1
 8001134:	60a3      	str	r3, [r4, #8]
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	6022      	str	r2, [r4, #0]
 800113c:	701e      	strb	r6, [r3, #0]
 800113e:	6962      	ldr	r2, [r4, #20]
 8001140:	1c43      	adds	r3, r0, #1
 8001142:	429a      	cmp	r2, r3
 8001144:	d004      	beq.n	8001150 <__swbuf_r+0x6e>
 8001146:	89a3      	ldrh	r3, [r4, #12]
 8001148:	07db      	lsls	r3, r3, #31
 800114a:	d5e1      	bpl.n	8001110 <__swbuf_r+0x2e>
 800114c:	2e0a      	cmp	r6, #10
 800114e:	d1df      	bne.n	8001110 <__swbuf_r+0x2e>
 8001150:	4621      	mov	r1, r4
 8001152:	4628      	mov	r0, r5
 8001154:	f7ff ff4e 	bl	8000ff4 <_fflush_r>
 8001158:	2800      	cmp	r0, #0
 800115a:	d0d9      	beq.n	8001110 <__swbuf_r+0x2e>
 800115c:	e7d6      	b.n	800110c <__swbuf_r+0x2a>
	...

08001160 <__swsetup_r>:
 8001160:	b538      	push	{r3, r4, r5, lr}
 8001162:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <__swsetup_r+0xa8>)
 8001164:	4605      	mov	r5, r0
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	460c      	mov	r4, r1
 800116a:	b118      	cbz	r0, 8001174 <__swsetup_r+0x14>
 800116c:	6a03      	ldr	r3, [r0, #32]
 800116e:	b90b      	cbnz	r3, 8001174 <__swsetup_r+0x14>
 8001170:	f7ff fad0 	bl	8000714 <__sinit>
 8001174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001178:	0719      	lsls	r1, r3, #28
 800117a:	d422      	bmi.n	80011c2 <__swsetup_r+0x62>
 800117c:	06da      	lsls	r2, r3, #27
 800117e:	d407      	bmi.n	8001190 <__swsetup_r+0x30>
 8001180:	2209      	movs	r2, #9
 8001182:	602a      	str	r2, [r5, #0]
 8001184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001188:	81a3      	strh	r3, [r4, #12]
 800118a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800118e:	e033      	b.n	80011f8 <__swsetup_r+0x98>
 8001190:	0758      	lsls	r0, r3, #29
 8001192:	d512      	bpl.n	80011ba <__swsetup_r+0x5a>
 8001194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001196:	b141      	cbz	r1, 80011aa <__swsetup_r+0x4a>
 8001198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800119c:	4299      	cmp	r1, r3
 800119e:	d002      	beq.n	80011a6 <__swsetup_r+0x46>
 80011a0:	4628      	mov	r0, r5
 80011a2:	f000 f90d 	bl	80013c0 <_free_r>
 80011a6:	2300      	movs	r3, #0
 80011a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80011aa:	89a3      	ldrh	r3, [r4, #12]
 80011ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80011b0:	81a3      	strh	r3, [r4, #12]
 80011b2:	2300      	movs	r3, #0
 80011b4:	6063      	str	r3, [r4, #4]
 80011b6:	6923      	ldr	r3, [r4, #16]
 80011b8:	6023      	str	r3, [r4, #0]
 80011ba:	89a3      	ldrh	r3, [r4, #12]
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	81a3      	strh	r3, [r4, #12]
 80011c2:	6923      	ldr	r3, [r4, #16]
 80011c4:	b94b      	cbnz	r3, 80011da <__swsetup_r+0x7a>
 80011c6:	89a3      	ldrh	r3, [r4, #12]
 80011c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80011cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011d0:	d003      	beq.n	80011da <__swsetup_r+0x7a>
 80011d2:	4621      	mov	r1, r4
 80011d4:	4628      	mov	r0, r5
 80011d6:	f000 f83f 	bl	8001258 <__smakebuf_r>
 80011da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011de:	f013 0201 	ands.w	r2, r3, #1
 80011e2:	d00a      	beq.n	80011fa <__swsetup_r+0x9a>
 80011e4:	2200      	movs	r2, #0
 80011e6:	60a2      	str	r2, [r4, #8]
 80011e8:	6962      	ldr	r2, [r4, #20]
 80011ea:	4252      	negs	r2, r2
 80011ec:	61a2      	str	r2, [r4, #24]
 80011ee:	6922      	ldr	r2, [r4, #16]
 80011f0:	b942      	cbnz	r2, 8001204 <__swsetup_r+0xa4>
 80011f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80011f6:	d1c5      	bne.n	8001184 <__swsetup_r+0x24>
 80011f8:	bd38      	pop	{r3, r4, r5, pc}
 80011fa:	0799      	lsls	r1, r3, #30
 80011fc:	bf58      	it	pl
 80011fe:	6962      	ldrpl	r2, [r4, #20]
 8001200:	60a2      	str	r2, [r4, #8]
 8001202:	e7f4      	b.n	80011ee <__swsetup_r+0x8e>
 8001204:	2000      	movs	r0, #0
 8001206:	e7f7      	b.n	80011f8 <__swsetup_r+0x98>
 8001208:	2000000c 	.word	0x2000000c

0800120c <__swhatbuf_r>:
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	460c      	mov	r4, r1
 8001210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001214:	2900      	cmp	r1, #0
 8001216:	b096      	sub	sp, #88	@ 0x58
 8001218:	4615      	mov	r5, r2
 800121a:	461e      	mov	r6, r3
 800121c:	da0d      	bge.n	800123a <__swhatbuf_r+0x2e>
 800121e:	89a3      	ldrh	r3, [r4, #12]
 8001220:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001224:	f04f 0100 	mov.w	r1, #0
 8001228:	bf14      	ite	ne
 800122a:	2340      	movne	r3, #64	@ 0x40
 800122c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001230:	2000      	movs	r0, #0
 8001232:	6031      	str	r1, [r6, #0]
 8001234:	602b      	str	r3, [r5, #0]
 8001236:	b016      	add	sp, #88	@ 0x58
 8001238:	bd70      	pop	{r4, r5, r6, pc}
 800123a:	466a      	mov	r2, sp
 800123c:	f000 f8ae 	bl	800139c <_fstat_r>
 8001240:	2800      	cmp	r0, #0
 8001242:	dbec      	blt.n	800121e <__swhatbuf_r+0x12>
 8001244:	9901      	ldr	r1, [sp, #4]
 8001246:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800124a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800124e:	4259      	negs	r1, r3
 8001250:	4159      	adcs	r1, r3
 8001252:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001256:	e7eb      	b.n	8001230 <__swhatbuf_r+0x24>

08001258 <__smakebuf_r>:
 8001258:	898b      	ldrh	r3, [r1, #12]
 800125a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800125c:	079d      	lsls	r5, r3, #30
 800125e:	4606      	mov	r6, r0
 8001260:	460c      	mov	r4, r1
 8001262:	d507      	bpl.n	8001274 <__smakebuf_r+0x1c>
 8001264:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001268:	6023      	str	r3, [r4, #0]
 800126a:	6123      	str	r3, [r4, #16]
 800126c:	2301      	movs	r3, #1
 800126e:	6163      	str	r3, [r4, #20]
 8001270:	b003      	add	sp, #12
 8001272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001274:	ab01      	add	r3, sp, #4
 8001276:	466a      	mov	r2, sp
 8001278:	f7ff ffc8 	bl	800120c <__swhatbuf_r>
 800127c:	9f00      	ldr	r7, [sp, #0]
 800127e:	4605      	mov	r5, r0
 8001280:	4639      	mov	r1, r7
 8001282:	4630      	mov	r0, r6
 8001284:	f7ff fc26 	bl	8000ad4 <_malloc_r>
 8001288:	b948      	cbnz	r0, 800129e <__smakebuf_r+0x46>
 800128a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800128e:	059a      	lsls	r2, r3, #22
 8001290:	d4ee      	bmi.n	8001270 <__smakebuf_r+0x18>
 8001292:	f023 0303 	bic.w	r3, r3, #3
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	81a3      	strh	r3, [r4, #12]
 800129c:	e7e2      	b.n	8001264 <__smakebuf_r+0xc>
 800129e:	89a3      	ldrh	r3, [r4, #12]
 80012a0:	6020      	str	r0, [r4, #0]
 80012a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a6:	81a3      	strh	r3, [r4, #12]
 80012a8:	9b01      	ldr	r3, [sp, #4]
 80012aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80012ae:	b15b      	cbz	r3, 80012c8 <__smakebuf_r+0x70>
 80012b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012b4:	4630      	mov	r0, r6
 80012b6:	f000 f80b 	bl	80012d0 <_isatty_r>
 80012ba:	b128      	cbz	r0, 80012c8 <__smakebuf_r+0x70>
 80012bc:	89a3      	ldrh	r3, [r4, #12]
 80012be:	f023 0303 	bic.w	r3, r3, #3
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	81a3      	strh	r3, [r4, #12]
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	431d      	orrs	r5, r3
 80012cc:	81a5      	strh	r5, [r4, #12]
 80012ce:	e7cf      	b.n	8001270 <__smakebuf_r+0x18>

080012d0 <_isatty_r>:
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	4d06      	ldr	r5, [pc, #24]	@ (80012ec <_isatty_r+0x1c>)
 80012d4:	2300      	movs	r3, #0
 80012d6:	4604      	mov	r4, r0
 80012d8:	4608      	mov	r0, r1
 80012da:	602b      	str	r3, [r5, #0]
 80012dc:	f7ff f851 	bl	8000382 <_isatty>
 80012e0:	1c43      	adds	r3, r0, #1
 80012e2:	d102      	bne.n	80012ea <_isatty_r+0x1a>
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	b103      	cbz	r3, 80012ea <_isatty_r+0x1a>
 80012e8:	6023      	str	r3, [r4, #0]
 80012ea:	bd38      	pop	{r3, r4, r5, pc}
 80012ec:	200001c4 	.word	0x200001c4

080012f0 <_lseek_r>:
 80012f0:	b538      	push	{r3, r4, r5, lr}
 80012f2:	4d07      	ldr	r5, [pc, #28]	@ (8001310 <_lseek_r+0x20>)
 80012f4:	4604      	mov	r4, r0
 80012f6:	4608      	mov	r0, r1
 80012f8:	4611      	mov	r1, r2
 80012fa:	2200      	movs	r2, #0
 80012fc:	602a      	str	r2, [r5, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	f7ff f84a 	bl	8000398 <_lseek>
 8001304:	1c43      	adds	r3, r0, #1
 8001306:	d102      	bne.n	800130e <_lseek_r+0x1e>
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	b103      	cbz	r3, 800130e <_lseek_r+0x1e>
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	bd38      	pop	{r3, r4, r5, pc}
 8001310:	200001c4 	.word	0x200001c4

08001314 <_read_r>:
 8001314:	b538      	push	{r3, r4, r5, lr}
 8001316:	4d07      	ldr	r5, [pc, #28]	@ (8001334 <_read_r+0x20>)
 8001318:	4604      	mov	r4, r0
 800131a:	4608      	mov	r0, r1
 800131c:	4611      	mov	r1, r2
 800131e:	2200      	movs	r2, #0
 8001320:	602a      	str	r2, [r5, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	f7fe ffd8 	bl	80002d8 <_read>
 8001328:	1c43      	adds	r3, r0, #1
 800132a:	d102      	bne.n	8001332 <_read_r+0x1e>
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	b103      	cbz	r3, 8001332 <_read_r+0x1e>
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	bd38      	pop	{r3, r4, r5, pc}
 8001334:	200001c4 	.word	0x200001c4

08001338 <_sbrk_r>:
 8001338:	b538      	push	{r3, r4, r5, lr}
 800133a:	4d06      	ldr	r5, [pc, #24]	@ (8001354 <_sbrk_r+0x1c>)
 800133c:	2300      	movs	r3, #0
 800133e:	4604      	mov	r4, r0
 8001340:	4608      	mov	r0, r1
 8001342:	602b      	str	r3, [r5, #0]
 8001344:	f7ff f836 	bl	80003b4 <_sbrk>
 8001348:	1c43      	adds	r3, r0, #1
 800134a:	d102      	bne.n	8001352 <_sbrk_r+0x1a>
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	b103      	cbz	r3, 8001352 <_sbrk_r+0x1a>
 8001350:	6023      	str	r3, [r4, #0]
 8001352:	bd38      	pop	{r3, r4, r5, pc}
 8001354:	200001c4 	.word	0x200001c4

08001358 <_write_r>:
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	4d07      	ldr	r5, [pc, #28]	@ (8001378 <_write_r+0x20>)
 800135c:	4604      	mov	r4, r0
 800135e:	4608      	mov	r0, r1
 8001360:	4611      	mov	r1, r2
 8001362:	2200      	movs	r2, #0
 8001364:	602a      	str	r2, [r5, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	f7fe ffd3 	bl	8000312 <_write>
 800136c:	1c43      	adds	r3, r0, #1
 800136e:	d102      	bne.n	8001376 <_write_r+0x1e>
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	b103      	cbz	r3, 8001376 <_write_r+0x1e>
 8001374:	6023      	str	r3, [r4, #0]
 8001376:	bd38      	pop	{r3, r4, r5, pc}
 8001378:	200001c4 	.word	0x200001c4

0800137c <_close_r>:
 800137c:	b538      	push	{r3, r4, r5, lr}
 800137e:	4d06      	ldr	r5, [pc, #24]	@ (8001398 <_close_r+0x1c>)
 8001380:	2300      	movs	r3, #0
 8001382:	4604      	mov	r4, r0
 8001384:	4608      	mov	r0, r1
 8001386:	602b      	str	r3, [r5, #0]
 8001388:	f7fe ffdf 	bl	800034a <_close>
 800138c:	1c43      	adds	r3, r0, #1
 800138e:	d102      	bne.n	8001396 <_close_r+0x1a>
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	b103      	cbz	r3, 8001396 <_close_r+0x1a>
 8001394:	6023      	str	r3, [r4, #0]
 8001396:	bd38      	pop	{r3, r4, r5, pc}
 8001398:	200001c4 	.word	0x200001c4

0800139c <_fstat_r>:
 800139c:	b538      	push	{r3, r4, r5, lr}
 800139e:	4d07      	ldr	r5, [pc, #28]	@ (80013bc <_fstat_r+0x20>)
 80013a0:	2300      	movs	r3, #0
 80013a2:	4604      	mov	r4, r0
 80013a4:	4608      	mov	r0, r1
 80013a6:	4611      	mov	r1, r2
 80013a8:	602b      	str	r3, [r5, #0]
 80013aa:	f7fe ffda 	bl	8000362 <_fstat>
 80013ae:	1c43      	adds	r3, r0, #1
 80013b0:	d102      	bne.n	80013b8 <_fstat_r+0x1c>
 80013b2:	682b      	ldr	r3, [r5, #0]
 80013b4:	b103      	cbz	r3, 80013b8 <_fstat_r+0x1c>
 80013b6:	6023      	str	r3, [r4, #0]
 80013b8:	bd38      	pop	{r3, r4, r5, pc}
 80013ba:	bf00      	nop
 80013bc:	200001c4 	.word	0x200001c4

080013c0 <_free_r>:
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	4605      	mov	r5, r0
 80013c4:	2900      	cmp	r1, #0
 80013c6:	d041      	beq.n	800144c <_free_r+0x8c>
 80013c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013cc:	1f0c      	subs	r4, r1, #4
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfb8      	it	lt
 80013d2:	18e4      	addlt	r4, r4, r3
 80013d4:	f7ff fe36 	bl	8001044 <__malloc_lock>
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <_free_r+0x90>)
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	b933      	cbnz	r3, 80013ec <_free_r+0x2c>
 80013de:	6063      	str	r3, [r4, #4]
 80013e0:	6014      	str	r4, [r2, #0]
 80013e2:	4628      	mov	r0, r5
 80013e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013e8:	f7ff be32 	b.w	8001050 <__malloc_unlock>
 80013ec:	42a3      	cmp	r3, r4
 80013ee:	d908      	bls.n	8001402 <_free_r+0x42>
 80013f0:	6820      	ldr	r0, [r4, #0]
 80013f2:	1821      	adds	r1, r4, r0
 80013f4:	428b      	cmp	r3, r1
 80013f6:	bf01      	itttt	eq
 80013f8:	6819      	ldreq	r1, [r3, #0]
 80013fa:	685b      	ldreq	r3, [r3, #4]
 80013fc:	1809      	addeq	r1, r1, r0
 80013fe:	6021      	streq	r1, [r4, #0]
 8001400:	e7ed      	b.n	80013de <_free_r+0x1e>
 8001402:	461a      	mov	r2, r3
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	b10b      	cbz	r3, 800140c <_free_r+0x4c>
 8001408:	42a3      	cmp	r3, r4
 800140a:	d9fa      	bls.n	8001402 <_free_r+0x42>
 800140c:	6811      	ldr	r1, [r2, #0]
 800140e:	1850      	adds	r0, r2, r1
 8001410:	42a0      	cmp	r0, r4
 8001412:	d10b      	bne.n	800142c <_free_r+0x6c>
 8001414:	6820      	ldr	r0, [r4, #0]
 8001416:	4401      	add	r1, r0
 8001418:	1850      	adds	r0, r2, r1
 800141a:	4283      	cmp	r3, r0
 800141c:	6011      	str	r1, [r2, #0]
 800141e:	d1e0      	bne.n	80013e2 <_free_r+0x22>
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	6053      	str	r3, [r2, #4]
 8001426:	4408      	add	r0, r1
 8001428:	6010      	str	r0, [r2, #0]
 800142a:	e7da      	b.n	80013e2 <_free_r+0x22>
 800142c:	d902      	bls.n	8001434 <_free_r+0x74>
 800142e:	230c      	movs	r3, #12
 8001430:	602b      	str	r3, [r5, #0]
 8001432:	e7d6      	b.n	80013e2 <_free_r+0x22>
 8001434:	6820      	ldr	r0, [r4, #0]
 8001436:	1821      	adds	r1, r4, r0
 8001438:	428b      	cmp	r3, r1
 800143a:	bf04      	itt	eq
 800143c:	6819      	ldreq	r1, [r3, #0]
 800143e:	685b      	ldreq	r3, [r3, #4]
 8001440:	6063      	str	r3, [r4, #4]
 8001442:	bf04      	itt	eq
 8001444:	1809      	addeq	r1, r1, r0
 8001446:	6021      	streq	r1, [r4, #0]
 8001448:	6054      	str	r4, [r2, #4]
 800144a:	e7ca      	b.n	80013e2 <_free_r+0x22>
 800144c:	bd38      	pop	{r3, r4, r5, pc}
 800144e:	bf00      	nop
 8001450:	200001c0 	.word	0x200001c0

08001454 <_init>:
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001456:	bf00      	nop
 8001458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800145a:	bc08      	pop	{r3}
 800145c:	469e      	mov	lr, r3
 800145e:	4770      	bx	lr

08001460 <_fini>:
 8001460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001462:	bf00      	nop
 8001464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001466:	bc08      	pop	{r3}
 8001468:	469e      	mov	lr, r3
 800146a:	4770      	bx	lr
