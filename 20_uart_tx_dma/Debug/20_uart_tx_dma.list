
20_uart_tx_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800058c  0800058c  0000158c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005ac  080005ac  000015b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005ac  080005ac  000015b4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005ac  080005b4  000015b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005ac  080005ac  000015ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005b0  080005b0  000015b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005b4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005b4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cec  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003cc  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  000026a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007e  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eaad  00000000  00000000  000027d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000fbf  00000000  00000000  00011283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053f69  00000000  00000000  00012242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000661ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001e8  00000000  00000000  000661f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000663d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000574 	.word	0x08000574

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000574 	.word	0x08000574

080001d8 <main>:

static void dma_callback(void);

char key;

int main(void) {
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0

	char message[31] = "Hello from STM32 DMA transfer\n\r";
 80001de:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <main+0x58>)
 80001e0:	463c      	mov	r4, r7
 80001e2:	461d      	mov	r5, r3
 80001e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001ec:	c407      	stmia	r4!, {r0, r1, r2}
 80001ee:	8023      	strh	r3, [r4, #0]
 80001f0:	3402      	adds	r4, #2
 80001f2:	0c1b      	lsrs	r3, r3, #16
 80001f4:	7023      	strb	r3, [r4, #0]

	// Enable clock access to LED
	RCC->AHB1ENR |= GPIOAEN;
 80001f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000234 <main+0x5c>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000234 <main+0x5c>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	6313      	str	r3, [r2, #48]	@ 0x30

	// set LED as output pin
	GPIOA->MODER |= (1U<<10);
 8000202:	4b0d      	ldr	r3, [pc, #52]	@ (8000238 <main+0x60>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a0c      	ldr	r2, [pc, #48]	@ (8000238 <main+0x60>)
 8000208:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800020c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 800020e:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <main+0x60>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a09      	ldr	r2, [pc, #36]	@ (8000238 <main+0x60>)
 8000214:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000218:	6013      	str	r3, [r2, #0]

	uart2_rxtx_init();
 800021a:	f000 f8c7 	bl	80003ac <uart2_rxtx_init>
	dma1_stream6_init((uint32_t) message, (uint32_t) &USART2->DR, 31);
 800021e:	463b      	mov	r3, r7
 8000220:	221f      	movs	r2, #31
 8000222:	4906      	ldr	r1, [pc, #24]	@ (800023c <main+0x64>)
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f84d 	bl	80002c4 <dma1_stream6_init>

	while (1) {}
 800022a:	bf00      	nop
 800022c:	e7fd      	b.n	800022a <main+0x52>
 800022e:	bf00      	nop
 8000230:	0800058c 	.word	0x0800058c
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000
 800023c:	40004404 	.word	0x40004404

08000240 <dma_callback>:


}

static void dma_callback(void) {
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0

	GPIOA->ODR |= LED_PIN;
 8000244:	4b05      	ldr	r3, [pc, #20]	@ (800025c <dma_callback+0x1c>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a04      	ldr	r2, [pc, #16]	@ (800025c <dma_callback+0x1c>)
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	6153      	str	r3, [r2, #20]

}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40020000 	.word	0x40020000

08000260 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

	// check for transfer complete interrupt
	if (DMA1->HISR & HISR_TCIF6) {
 8000264:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <DMA1_Stream6_IRQHandler+0x24>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800026c:	2b00      	cmp	r3, #0
 800026e:	d007      	beq.n	8000280 <DMA1_Stream6_IRQHandler+0x20>
		// clear interrupt flag
		DMA1->HIFCR |= HIFCR_CTCIF6;
 8000270:	4b04      	ldr	r3, [pc, #16]	@ (8000284 <DMA1_Stream6_IRQHandler+0x24>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a03      	ldr	r2, [pc, #12]	@ (8000284 <DMA1_Stream6_IRQHandler+0x24>)
 8000276:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800027a:	60d3      	str	r3, [r2, #12]

		// callback
		dma_callback();
 800027c:	f7ff ffe0 	bl	8000240 <dma_callback>
	}


}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40026000 	.word	0x40026000

08000288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000296:	2b00      	cmp	r3, #0
 8000298:	db0b      	blt.n	80002b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f003 021f 	and.w	r2, r3, #31
 80002a0:	4907      	ldr	r1, [pc, #28]	@ (80002c0 <__NVIC_EnableIRQ+0x38>)
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	095b      	lsrs	r3, r3, #5
 80002a8:	2001      	movs	r0, #1
 80002aa:	fa00 f202 	lsl.w	r2, r0, r2
 80002ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e100 	.word	0xe000e100

080002c4 <dma1_stream6_init>:
int __io_putchar(int ch) {
	uart2_write(ch);
	return ch;
}

void dma1_stream6_init(uint32_t source, uint32_t destination, uint32_t length) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
	// enable clock access to dma
	RCC->AHB1ENR |= DMA1EN;
 80002d0:	4b32      	ldr	r3, [pc, #200]	@ (800039c <dma1_stream6_init+0xd8>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d4:	4a31      	ldr	r2, [pc, #196]	@ (800039c <dma1_stream6_init+0xd8>)
 80002d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002da:	6313      	str	r3, [r2, #48]	@ 0x30

	// disable dma1 stream6
	DMA1_Stream6->CR &= ~(DMA_S_EN);
 80002dc:	4b30      	ldr	r3, [pc, #192]	@ (80003a0 <dma1_stream6_init+0xdc>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a2f      	ldr	r2, [pc, #188]	@ (80003a0 <dma1_stream6_init+0xdc>)
 80002e2:	f023 0301 	bic.w	r3, r3, #1
 80002e6:	6013      	str	r3, [r2, #0]

	// wait until DMA1 Stream 6 is disabled
	while((DMA1_Stream6->CR) & (DMA_S_EN)) {}
 80002e8:	bf00      	nop
 80002ea:	4b2d      	ldr	r3, [pc, #180]	@ (80003a0 <dma1_stream6_init+0xdc>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d1f9      	bne.n	80002ea <dma1_stream6_init+0x26>

	// clear all stream6 interrupt flags
	DMA1->HIFCR |= (1U<<16);
 80002f6:	4b2b      	ldr	r3, [pc, #172]	@ (80003a4 <dma1_stream6_init+0xe0>)
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	4a2a      	ldr	r2, [pc, #168]	@ (80003a4 <dma1_stream6_init+0xe0>)
 80002fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000300:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<18);
 8000302:	4b28      	ldr	r3, [pc, #160]	@ (80003a4 <dma1_stream6_init+0xe0>)
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	4a27      	ldr	r2, [pc, #156]	@ (80003a4 <dma1_stream6_init+0xe0>)
 8000308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800030c:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<19);
 800030e:	4b25      	ldr	r3, [pc, #148]	@ (80003a4 <dma1_stream6_init+0xe0>)
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	4a24      	ldr	r2, [pc, #144]	@ (80003a4 <dma1_stream6_init+0xe0>)
 8000314:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000318:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<20);
 800031a:	4b22      	ldr	r3, [pc, #136]	@ (80003a4 <dma1_stream6_init+0xe0>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	4a21      	ldr	r2, [pc, #132]	@ (80003a4 <dma1_stream6_init+0xe0>)
 8000320:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000324:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1U<<21);
 8000326:	4b1f      	ldr	r3, [pc, #124]	@ (80003a4 <dma1_stream6_init+0xe0>)
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	4a1e      	ldr	r2, [pc, #120]	@ (80003a4 <dma1_stream6_init+0xe0>)
 800032c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000330:	60d3      	str	r3, [r2, #12]

	// set the destination buffer
	DMA1_Stream6->PAR = destination;
 8000332:	4a1b      	ldr	r2, [pc, #108]	@ (80003a0 <dma1_stream6_init+0xdc>)
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	6093      	str	r3, [r2, #8]

	// set the source buffer
	DMA1_Stream6->M0AR = source;
 8000338:	4a19      	ldr	r2, [pc, #100]	@ (80003a0 <dma1_stream6_init+0xdc>)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	60d3      	str	r3, [r2, #12]

	// set length
	DMA1_Stream6->NDTR = length;
 800033e:	4a18      	ldr	r2, [pc, #96]	@ (80003a0 <dma1_stream6_init+0xdc>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	6053      	str	r3, [r2, #4]

	// select stream6 ch4
	DMA1_Stream6->CR = CHSEL4;
 8000344:	4b16      	ldr	r3, [pc, #88]	@ (80003a0 <dma1_stream6_init+0xdc>)
 8000346:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800034a:	601a      	str	r2, [r3, #0]

	// enable memory increment
	DMA1_Stream6->CR |= DMA_MEM_INC;
 800034c:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <dma1_stream6_init+0xdc>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a13      	ldr	r2, [pc, #76]	@ (80003a0 <dma1_stream6_init+0xdc>)
 8000352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000356:	6013      	str	r3, [r2, #0]

	// configure transfer direction
	DMA1_Stream6->CR |= DMA_DIR_MEM_TO_PERIPH;
 8000358:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <dma1_stream6_init+0xdc>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a10      	ldr	r2, [pc, #64]	@ (80003a0 <dma1_stream6_init+0xdc>)
 800035e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000362:	6013      	str	r3, [r2, #0]

	// enable DMA transfer complete interrupt
	DMA1_Stream6->CR |= DMA_CR_TCIE;
 8000364:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <dma1_stream6_init+0xdc>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <dma1_stream6_init+0xdc>)
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6013      	str	r3, [r2, #0]

	// enable direct mode, disable FIFO
	DMA1_Stream6->FCR = 0;
 8000370:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <dma1_stream6_init+0xdc>)
 8000372:	2200      	movs	r2, #0
 8000374:	615a      	str	r2, [r3, #20]

	// enable dma1 stream6
	DMA1_Stream6->CR |= DMA_S_EN;
 8000376:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <dma1_stream6_init+0xdc>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a09      	ldr	r2, [pc, #36]	@ (80003a0 <dma1_stream6_init+0xdc>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6013      	str	r3, [r2, #0]

	// enable UART2 transmitter dma
	USART2->CR3 |= UART_CR3_DMAT;
 8000382:	4b09      	ldr	r3, [pc, #36]	@ (80003a8 <dma1_stream6_init+0xe4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a08      	ldr	r2, [pc, #32]	@ (80003a8 <dma1_stream6_init+0xe4>)
 8000388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800038c:	6153      	str	r3, [r2, #20]

	// dma interrupt enable in NVIC
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800038e:	2011      	movs	r0, #17
 8000390:	f7ff ff7a 	bl	8000288 <__NVIC_EnableIRQ>
}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40023800 	.word	0x40023800
 80003a0:	400260a0 	.word	0x400260a0
 80003a4:	40026000 	.word	0x40026000
 80003a8:	40004400 	.word	0x40004400

080003ac <uart2_rxtx_init>:

void uart2_rxtx_init(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

	// configure the uart gpio pin
		// enable clock access to gpioa
		RCC->AHB1ENR |= GPIOAEN;
 80003b0:	4b32      	ldr	r3, [pc, #200]	@ (800047c <uart2_rxtx_init+0xd0>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b4:	4a31      	ldr	r2, [pc, #196]	@ (800047c <uart2_rxtx_init+0xd0>)
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6313      	str	r3, [r2, #48]	@ 0x30

		// set PA2 mode to alternate function mode
		GPIOA->MODER &= ~(1U<<4);
 80003bc:	4b30      	ldr	r3, [pc, #192]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a2f      	ldr	r2, [pc, #188]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003c2:	f023 0310 	bic.w	r3, r3, #16
 80003c6:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (1U<<5);
 80003c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a2c      	ldr	r2, [pc, #176]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6013      	str	r3, [r2, #0]

		// set PA2 alternate function type to UART_TX (AF07)
		GPIOA->AFR[0] |= (1U<<8);
 80003d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003d6:	6a1b      	ldr	r3, [r3, #32]
 80003d8:	4a29      	ldr	r2, [pc, #164]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003de:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<9);
 80003e0:	4b27      	ldr	r3, [pc, #156]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003e2:	6a1b      	ldr	r3, [r3, #32]
 80003e4:	4a26      	ldr	r2, [pc, #152]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003ea:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<10);
 80003ec:	4b24      	ldr	r3, [pc, #144]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003ee:	6a1b      	ldr	r3, [r3, #32]
 80003f0:	4a23      	ldr	r2, [pc, #140]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003f6:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<11);
 80003f8:	4b21      	ldr	r3, [pc, #132]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	4a20      	ldr	r2, [pc, #128]	@ (8000480 <uart2_rxtx_init+0xd4>)
 80003fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000402:	6213      	str	r3, [r2, #32]

		// set PA3 alternate function type to UART_RX (AF07)
		GPIOA->MODER &= ~(1U<<6);
 8000404:	4b1e      	ldr	r3, [pc, #120]	@ (8000480 <uart2_rxtx_init+0xd4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a1d      	ldr	r2, [pc, #116]	@ (8000480 <uart2_rxtx_init+0xd4>)
 800040a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800040e:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (1U<<7);
 8000410:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <uart2_rxtx_init+0xd4>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a1a      	ldr	r2, [pc, #104]	@ (8000480 <uart2_rxtx_init+0xd4>)
 8000416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800041a:	6013      	str	r3, [r2, #0]

		// set PA2 alternate function type to UART_TX (AF07)
		GPIOA->AFR[0] |= (1U<<12);
 800041c:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <uart2_rxtx_init+0xd4>)
 800041e:	6a1b      	ldr	r3, [r3, #32]
 8000420:	4a17      	ldr	r2, [pc, #92]	@ (8000480 <uart2_rxtx_init+0xd4>)
 8000422:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000426:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<13);
 8000428:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <uart2_rxtx_init+0xd4>)
 800042a:	6a1b      	ldr	r3, [r3, #32]
 800042c:	4a14      	ldr	r2, [pc, #80]	@ (8000480 <uart2_rxtx_init+0xd4>)
 800042e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000432:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<14);
 8000434:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <uart2_rxtx_init+0xd4>)
 8000436:	6a1b      	ldr	r3, [r3, #32]
 8000438:	4a11      	ldr	r2, [pc, #68]	@ (8000480 <uart2_rxtx_init+0xd4>)
 800043a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800043e:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<15);
 8000440:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <uart2_rxtx_init+0xd4>)
 8000442:	6a1b      	ldr	r3, [r3, #32]
 8000444:	4a0e      	ldr	r2, [pc, #56]	@ (8000480 <uart2_rxtx_init+0xd4>)
 8000446:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800044a:	6213      	str	r3, [r2, #32]

		// configure uart module
		// enable clock access to uart2
		RCC->APB1ENR |= UART2EN;
 800044c:	4b0b      	ldr	r3, [pc, #44]	@ (800047c <uart2_rxtx_init+0xd0>)
 800044e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000450:	4a0a      	ldr	r2, [pc, #40]	@ (800047c <uart2_rxtx_init+0xd0>)
 8000452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000456:	6413      	str	r3, [r2, #64]	@ 0x40

		// configure baudrate
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000458:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800045c:	4909      	ldr	r1, [pc, #36]	@ (8000484 <uart2_rxtx_init+0xd8>)
 800045e:	480a      	ldr	r0, [pc, #40]	@ (8000488 <uart2_rxtx_init+0xdc>)
 8000460:	f000 f814 	bl	800048c <uart_set_baudrate>

		// configure the transfer direction
		USART2->CR1 = (CR1_TE | CR1_RE);
 8000464:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <uart2_rxtx_init+0xdc>)
 8000466:	220c      	movs	r2, #12
 8000468:	60da      	str	r2, [r3, #12]

		// enable the uart module
		USART2->CR1 |= CR1_UE;
 800046a:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <uart2_rxtx_init+0xdc>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	4a06      	ldr	r2, [pc, #24]	@ (8000488 <uart2_rxtx_init+0xdc>)
 8000470:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000474:	60d3      	str	r3, [r2, #12]
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40023800 	.word	0x40023800
 8000480:	40020000 	.word	0x40020000
 8000484:	00f42400 	.word	0x00f42400
 8000488:	40004400 	.word	0x40004400

0800048c <uart_set_baudrate>:
	USART2->DR = (ch & 0xFF);

}


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	68b8      	ldr	r0, [r7, #8]
 800049c:	f000 f808 	bl	80004b0 <compute_uart_bd>
 80004a0:	4603      	mov	r3, r0
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	609a      	str	r2, [r3, #8]
}
 80004a8:	bf00      	nop
 80004aa:	3710      	adds	r7, #16
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	085a      	lsrs	r2, r3, #1
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	441a      	add	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c8:	b29b      	uxth	r3, r3
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
	...

080004d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d8:	480d      	ldr	r0, [pc, #52]	@ (8000510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e2:	490d      	ldr	r1, [pc, #52]	@ (8000518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e4:	4a0d      	ldr	r2, [pc, #52]	@ (800051c <LoopForever+0xe>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000524 <LoopForever+0x16>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000506:	f000 f811 	bl	800052c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800050a:	f7ff fe65 	bl	80001d8 <main>

0800050e <LoopForever>:

LoopForever:
  b LoopForever
 800050e:	e7fe      	b.n	800050e <LoopForever>
  ldr   r0, =_estack
 8000510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800051c:	080005b4 	.word	0x080005b4
  ldr r2, =_sbss
 8000520:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000524:	2000001c 	.word	0x2000001c

08000528 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC_IRQHandler>
	...

0800052c <__libc_init_array>:
 800052c:	b570      	push	{r4, r5, r6, lr}
 800052e:	4d0d      	ldr	r5, [pc, #52]	@ (8000564 <__libc_init_array+0x38>)
 8000530:	4c0d      	ldr	r4, [pc, #52]	@ (8000568 <__libc_init_array+0x3c>)
 8000532:	1b64      	subs	r4, r4, r5
 8000534:	10a4      	asrs	r4, r4, #2
 8000536:	2600      	movs	r6, #0
 8000538:	42a6      	cmp	r6, r4
 800053a:	d109      	bne.n	8000550 <__libc_init_array+0x24>
 800053c:	4d0b      	ldr	r5, [pc, #44]	@ (800056c <__libc_init_array+0x40>)
 800053e:	4c0c      	ldr	r4, [pc, #48]	@ (8000570 <__libc_init_array+0x44>)
 8000540:	f000 f818 	bl	8000574 <_init>
 8000544:	1b64      	subs	r4, r4, r5
 8000546:	10a4      	asrs	r4, r4, #2
 8000548:	2600      	movs	r6, #0
 800054a:	42a6      	cmp	r6, r4
 800054c:	d105      	bne.n	800055a <__libc_init_array+0x2e>
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	f855 3b04 	ldr.w	r3, [r5], #4
 8000554:	4798      	blx	r3
 8000556:	3601      	adds	r6, #1
 8000558:	e7ee      	b.n	8000538 <__libc_init_array+0xc>
 800055a:	f855 3b04 	ldr.w	r3, [r5], #4
 800055e:	4798      	blx	r3
 8000560:	3601      	adds	r6, #1
 8000562:	e7f2      	b.n	800054a <__libc_init_array+0x1e>
 8000564:	080005ac 	.word	0x080005ac
 8000568:	080005ac 	.word	0x080005ac
 800056c:	080005ac 	.word	0x080005ac
 8000570:	080005b0 	.word	0x080005b0

08000574 <_init>:
 8000574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000576:	bf00      	nop
 8000578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057a:	bc08      	pop	{r3}
 800057c:	469e      	mov	lr, r3
 800057e:	4770      	bx	lr

08000580 <_fini>:
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000582:	bf00      	nop
 8000584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000586:	bc08      	pop	{r3}
 8000588:	469e      	mov	lr, r3
 800058a:	4770      	bx	lr
