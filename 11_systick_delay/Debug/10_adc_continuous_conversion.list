
10_adc_continuous_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001300  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080014a0  080014a0  000024a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014e8  080014e8  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080014e8  080014e8  000024e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080014f0  080014f0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014f0  080014f0  000024f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014f4  080014f4  000024f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080014f8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001554  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001554  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000119e  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005d9  00000000  00000000  0000422a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00004808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000110  00000000  00000000  00004998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd1d  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020f8  00000000  00000000  000147c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055c0d  00000000  00000000  000168bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006c4ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c50  00000000  00000000  0006c510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0006d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001488 	.word	0x08001488

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001488 	.word	0x08001488

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_init>:
#define CR2_SWSTART 	(1U<<30)
#define SR_EOC			(1U<<1)

#define CRC_CONT		(1U<<1)

void pa1_adc_init(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

	// Configure the ADC GPIO pin
	// enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <pa1_adc_init+0x58>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a13      	ldr	r2, [pc, #76]	@ (80002d8 <pa1_adc_init+0x58>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30

	// set the mode of pa1 to analog mode
	GPIOA->MODER |= (1U<<2);
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <pa1_adc_init+0x5c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <pa1_adc_init+0x5c>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <pa1_adc_init+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <pa1_adc_init+0x5c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]

	// configure the ADC module
	// enable clock access to adc
	RCC->APB2ENR |= ADC1EN;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <pa1_adc_init+0x58>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <pa1_adc_init+0x58>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002b2:	6453      	str	r3, [r2, #68]	@ 0x44

	// Configure ADC parameters
	// conversion sequence start
	ADC1->SQR3 = ADC_CH1;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <pa1_adc_init+0x60>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	635a      	str	r2, [r3, #52]	@ 0x34

	// conversion sequence length
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002ba:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <pa1_adc_init+0x60>)
 80002bc:	2200      	movs	r2, #0
 80002be:	62da      	str	r2, [r3, #44]	@ 0x2c

	// enable ADC module
	ADC1->CR2 |= CR2_ADON;
 80002c0:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a06      	ldr	r2, [pc, #24]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6093      	str	r3, [r2, #8]


}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40012000 	.word	0x40012000

080002e4 <start_conversion>:

void start_conversion(void) {
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0

	// enable continuous conversion
	ADC1->CR2 |= CRC_CONT;
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <start_conversion+0x28>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a07      	ldr	r2, [pc, #28]	@ (800030c <start_conversion+0x28>)
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	6093      	str	r3, [r2, #8]

	// start adc conversion
	ADC1->CR2 |= CR2_SWSTART;
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <start_conversion+0x28>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a04      	ldr	r2, [pc, #16]	@ (800030c <start_conversion+0x28>)
 80002fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002fe:	6093      	str	r3, [r2, #8]

}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40012000 	.word	0x40012000

08000310 <adc_read>:

uint32_t adc_read(void) {
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	// wait for conversion to be complete
	while(!(ADC1->SR & SR_EOC)) {} // wait until complete flag is set
 8000314:	bf00      	nop
 8000316:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <adc_read+0x20>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <adc_read+0x6>

	// read converted result
	return (ADC1->DR);
 8000322:	4b03      	ldr	r3, [pc, #12]	@ (8000330 <adc_read+0x20>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40012000 	.word	0x40012000

08000334 <main>:
#include "uart.h"
#include "adc.h"

volatile uint32_t sensor_value;

int main(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

	uart2_tx_init();
 8000338:	f000 f8ba 	bl	80004b0 <uart2_tx_init>
	pa1_adc_init();
 800033c:	f7ff ffa0 	bl	8000280 <pa1_adc_init>
	start_conversion();
 8000340:	f7ff ffd0 	bl	80002e4 <start_conversion>


	while(1) {
		sensor_value = adc_read();
 8000344:	f7ff ffe4 	bl	8000310 <adc_read>
 8000348:	4603      	mov	r3, r0
 800034a:	4a05      	ldr	r2, [pc, #20]	@ (8000360 <main+0x2c>)
 800034c:	6013      	str	r3, [r2, #0]
		printf("Sensor value: %d \n\r", (int)sensor_value);
 800034e:	4b04      	ldr	r3, [pc, #16]	@ (8000360 <main+0x2c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4619      	mov	r1, r3
 8000354:	4803      	ldr	r0, [pc, #12]	@ (8000364 <main+0x30>)
 8000356:	f000 fa2d 	bl	80007b4 <iprintf>
		sensor_value = adc_read();
 800035a:	bf00      	nop
 800035c:	e7f2      	b.n	8000344 <main+0x10>
 800035e:	bf00      	nop
 8000360:	20000078 	.word	0x20000078
 8000364:	080014a0 	.word	0x080014a0

08000368 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	e00a      	b.n	8000390 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800037a:	f3af 8000 	nop.w
 800037e:	4601      	mov	r1, r0
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	1c5a      	adds	r2, r3, #1
 8000384:	60ba      	str	r2, [r7, #8]
 8000386:	b2ca      	uxtb	r2, r1
 8000388:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	3301      	adds	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	697a      	ldr	r2, [r7, #20]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	429a      	cmp	r2, r3
 8000396:	dbf0      	blt.n	800037a <_read+0x12>
  }

  return len;
 8000398:	687b      	ldr	r3, [r7, #4]
}
 800039a:	4618      	mov	r0, r3
 800039c:	3718      	adds	r7, #24
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b086      	sub	sp, #24
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	60f8      	str	r0, [r7, #12]
 80003aa:	60b9      	str	r1, [r7, #8]
 80003ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e009      	b.n	80003c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	60ba      	str	r2, [r7, #8]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f8c3 	bl	8000548 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	3301      	adds	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697a      	ldr	r2, [r7, #20]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	dbf1      	blt.n	80003b4 <_write+0x12>
  }
  return len;
 80003d0:	687b      	ldr	r3, [r7, #4]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3718      	adds	r7, #24
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <_close>:

int _close(int file)
{
 80003da:	b480      	push	{r7}
 80003dc:	b083      	sub	sp, #12
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b083      	sub	sp, #12
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
 80003fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000402:	605a      	str	r2, [r3, #4]
  return 0;
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <_isatty>:

int _isatty(int file)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800041a:	2301      	movs	r3, #1
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
	...

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	@ (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	@ (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f000 f9b8 	bl	80007e8 <__errno>
 8000478:	4603      	mov	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	@ (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <_sbrk+0x64>)
 8000494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20020000 	.word	0x20020000
 80004a4:	00000400 	.word	0x00000400
 80004a8:	2000007c 	.word	0x2000007c
 80004ac:	200001d0 	.word	0x200001d0

080004b0 <uart2_tx_init>:

		// enable the uart module
		USART2->CR1 |= CR1_UE;
}

void uart2_tx_init(void) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0

	// configure the uart gpio pin
		// enable clock access to gpioa
		RCC->AHB1ENR |= GPIOAEN;
 80004b4:	4b20      	ldr	r3, [pc, #128]	@ (8000538 <uart2_tx_init+0x88>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000538 <uart2_tx_init+0x88>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6313      	str	r3, [r2, #48]	@ 0x30

		// set PA2 mode to alternate function mode
		GPIOA->MODER &= ~(1U<<4);
 80004c0:	4b1e      	ldr	r3, [pc, #120]	@ (800053c <uart2_tx_init+0x8c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a1d      	ldr	r2, [pc, #116]	@ (800053c <uart2_tx_init+0x8c>)
 80004c6:	f023 0310 	bic.w	r3, r3, #16
 80004ca:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (1U<<5);
 80004cc:	4b1b      	ldr	r3, [pc, #108]	@ (800053c <uart2_tx_init+0x8c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a1a      	ldr	r2, [pc, #104]	@ (800053c <uart2_tx_init+0x8c>)
 80004d2:	f043 0320 	orr.w	r3, r3, #32
 80004d6:	6013      	str	r3, [r2, #0]

		// set PA2 alternate function type to UART_TX (AF07)
		GPIOA->AFR[0] |= (1U<<8);
 80004d8:	4b18      	ldr	r3, [pc, #96]	@ (800053c <uart2_tx_init+0x8c>)
 80004da:	6a1b      	ldr	r3, [r3, #32]
 80004dc:	4a17      	ldr	r2, [pc, #92]	@ (800053c <uart2_tx_init+0x8c>)
 80004de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004e2:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<9);
 80004e4:	4b15      	ldr	r3, [pc, #84]	@ (800053c <uart2_tx_init+0x8c>)
 80004e6:	6a1b      	ldr	r3, [r3, #32]
 80004e8:	4a14      	ldr	r2, [pc, #80]	@ (800053c <uart2_tx_init+0x8c>)
 80004ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004ee:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<10);
 80004f0:	4b12      	ldr	r3, [pc, #72]	@ (800053c <uart2_tx_init+0x8c>)
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a11      	ldr	r2, [pc, #68]	@ (800053c <uart2_tx_init+0x8c>)
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004fa:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<11);
 80004fc:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <uart2_tx_init+0x8c>)
 80004fe:	6a1b      	ldr	r3, [r3, #32]
 8000500:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <uart2_tx_init+0x8c>)
 8000502:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000506:	6213      	str	r3, [r2, #32]


		// configure uart module
		// enable clock access to uart2
		RCC->APB1ENR |= UART2EN;
 8000508:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <uart2_tx_init+0x88>)
 800050a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800050c:	4a0a      	ldr	r2, [pc, #40]	@ (8000538 <uart2_tx_init+0x88>)
 800050e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000512:	6413      	str	r3, [r2, #64]	@ 0x40

		// configure baudrate
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000514:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000518:	4909      	ldr	r1, [pc, #36]	@ (8000540 <uart2_tx_init+0x90>)
 800051a:	480a      	ldr	r0, [pc, #40]	@ (8000544 <uart2_tx_init+0x94>)
 800051c:	f000 f838 	bl	8000590 <uart_set_baudrate>

		// configure the transfer direction
		USART2->CR1 = CR1_TE;
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <uart2_tx_init+0x94>)
 8000522:	2208      	movs	r2, #8
 8000524:	60da      	str	r2, [r3, #12]

		// enable the uart module
		USART2->CR1 |= CR1_UE;
 8000526:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <uart2_tx_init+0x94>)
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	4a06      	ldr	r2, [pc, #24]	@ (8000544 <uart2_tx_init+0x94>)
 800052c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000530:	60d3      	str	r3, [r2, #12]
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40023800 	.word	0x40023800
 800053c:	40020000 	.word	0x40020000
 8000540:	00f42400 	.word	0x00f42400
 8000544:	40004400 	.word	0x40004400

08000548 <__io_putchar>:

int __io_putchar(int ch) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f000 f805 	bl	8000560 <uart2_write>
	return ch;
 8000556:	687b      	ldr	r3, [r7, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <uart2_write>:
	return USART2->DR;

}


void uart2_write(int ch) {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	// make sure transmit data register is empty
	while(!(USART2->SR & SR_TXE)) {}
 8000568:	bf00      	nop
 800056a:	4b08      	ldr	r3, [pc, #32]	@ (800058c <uart2_write+0x2c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0f9      	beq.n	800056a <uart2_write+0xa>

	// write to transmit data register
	USART2->DR = (ch & 0xFF);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a04      	ldr	r2, [pc, #16]	@ (800058c <uart2_write+0x2c>)
 800057a:	b2db      	uxtb	r3, r3
 800057c:	6053      	str	r3, [r2, #4]

}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40004400 	.word	0x40004400

08000590 <uart_set_baudrate>:


void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	68b8      	ldr	r0, [r7, #8]
 80005a0:	f000 f808 	bl	80005b4 <compute_uart_bd>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	609a      	str	r2, [r3, #8]
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <compute_uart_bd>:

uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	085a      	lsrs	r2, r3, #1
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	441a      	add	r2, r3
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005cc:	b29b      	uxth	r3, r3
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005dc:	480d      	ldr	r0, [pc, #52]	@ (8000614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480c      	ldr	r0, [pc, #48]	@ (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490d      	ldr	r1, [pc, #52]	@ (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800060a:	f000 f8f3 	bl	80007f4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800060e:	f7ff fe91 	bl	8000334 <main>

08000612 <LoopForever>:

LoopForever:
  b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   r0, =_estack
 8000614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000620:	080014f8 	.word	0x080014f8
  ldr r2, =_sbss
 8000624:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000628:	200001cc 	.word	0x200001cc

0800062c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC_IRQHandler>
	...

08000630 <std>:
 8000630:	2300      	movs	r3, #0
 8000632:	b510      	push	{r4, lr}
 8000634:	4604      	mov	r4, r0
 8000636:	e9c0 3300 	strd	r3, r3, [r0]
 800063a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800063e:	6083      	str	r3, [r0, #8]
 8000640:	8181      	strh	r1, [r0, #12]
 8000642:	6643      	str	r3, [r0, #100]	@ 0x64
 8000644:	81c2      	strh	r2, [r0, #14]
 8000646:	6183      	str	r3, [r0, #24]
 8000648:	4619      	mov	r1, r3
 800064a:	2208      	movs	r2, #8
 800064c:	305c      	adds	r0, #92	@ 0x5c
 800064e:	f000 f8c3 	bl	80007d8 <memset>
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <std+0x58>)
 8000654:	6263      	str	r3, [r4, #36]	@ 0x24
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <std+0x5c>)
 8000658:	62a3      	str	r3, [r4, #40]	@ 0x28
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <std+0x60>)
 800065c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <std+0x64>)
 8000660:	6323      	str	r3, [r4, #48]	@ 0x30
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <std+0x68>)
 8000664:	6224      	str	r4, [r4, #32]
 8000666:	429c      	cmp	r4, r3
 8000668:	d006      	beq.n	8000678 <std+0x48>
 800066a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800066e:	4294      	cmp	r4, r2
 8000670:	d002      	beq.n	8000678 <std+0x48>
 8000672:	33d0      	adds	r3, #208	@ 0xd0
 8000674:	429c      	cmp	r4, r3
 8000676:	d105      	bne.n	8000684 <std+0x54>
 8000678:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800067c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000680:	f000 b8dc 	b.w	800083c <__retarget_lock_init_recursive>
 8000684:	bd10      	pop	{r4, pc}
 8000686:	bf00      	nop
 8000688:	08001091 	.word	0x08001091
 800068c:	080010b3 	.word	0x080010b3
 8000690:	080010eb 	.word	0x080010eb
 8000694:	0800110f 	.word	0x0800110f
 8000698:	20000080 	.word	0x20000080

0800069c <stdio_exit_handler>:
 800069c:	4a02      	ldr	r2, [pc, #8]	@ (80006a8 <stdio_exit_handler+0xc>)
 800069e:	4903      	ldr	r1, [pc, #12]	@ (80006ac <stdio_exit_handler+0x10>)
 80006a0:	4803      	ldr	r0, [pc, #12]	@ (80006b0 <stdio_exit_handler+0x14>)
 80006a2:	f000 b869 	b.w	8000778 <_fwalk_sglue>
 80006a6:	bf00      	nop
 80006a8:	20000000 	.word	0x20000000
 80006ac:	08001029 	.word	0x08001029
 80006b0:	20000010 	.word	0x20000010

080006b4 <cleanup_stdio>:
 80006b4:	6841      	ldr	r1, [r0, #4]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <cleanup_stdio+0x34>)
 80006b8:	4299      	cmp	r1, r3
 80006ba:	b510      	push	{r4, lr}
 80006bc:	4604      	mov	r4, r0
 80006be:	d001      	beq.n	80006c4 <cleanup_stdio+0x10>
 80006c0:	f000 fcb2 	bl	8001028 <_fflush_r>
 80006c4:	68a1      	ldr	r1, [r4, #8]
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <cleanup_stdio+0x38>)
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d002      	beq.n	80006d2 <cleanup_stdio+0x1e>
 80006cc:	4620      	mov	r0, r4
 80006ce:	f000 fcab 	bl	8001028 <_fflush_r>
 80006d2:	68e1      	ldr	r1, [r4, #12]
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <cleanup_stdio+0x3c>)
 80006d6:	4299      	cmp	r1, r3
 80006d8:	d004      	beq.n	80006e4 <cleanup_stdio+0x30>
 80006da:	4620      	mov	r0, r4
 80006dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e0:	f000 bca2 	b.w	8001028 <_fflush_r>
 80006e4:	bd10      	pop	{r4, pc}
 80006e6:	bf00      	nop
 80006e8:	20000080 	.word	0x20000080
 80006ec:	200000e8 	.word	0x200000e8
 80006f0:	20000150 	.word	0x20000150

080006f4 <global_stdio_init.part.0>:
 80006f4:	b510      	push	{r4, lr}
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <global_stdio_init.part.0+0x30>)
 80006f8:	4c0b      	ldr	r4, [pc, #44]	@ (8000728 <global_stdio_init.part.0+0x34>)
 80006fa:	4a0c      	ldr	r2, [pc, #48]	@ (800072c <global_stdio_init.part.0+0x38>)
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	4620      	mov	r0, r4
 8000700:	2200      	movs	r2, #0
 8000702:	2104      	movs	r1, #4
 8000704:	f7ff ff94 	bl	8000630 <std>
 8000708:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800070c:	2201      	movs	r2, #1
 800070e:	2109      	movs	r1, #9
 8000710:	f7ff ff8e 	bl	8000630 <std>
 8000714:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000718:	2202      	movs	r2, #2
 800071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800071e:	2112      	movs	r1, #18
 8000720:	f7ff bf86 	b.w	8000630 <std>
 8000724:	200001b8 	.word	0x200001b8
 8000728:	20000080 	.word	0x20000080
 800072c:	0800069d 	.word	0x0800069d

08000730 <__sfp_lock_acquire>:
 8000730:	4801      	ldr	r0, [pc, #4]	@ (8000738 <__sfp_lock_acquire+0x8>)
 8000732:	f000 b884 	b.w	800083e <__retarget_lock_acquire_recursive>
 8000736:	bf00      	nop
 8000738:	200001bd 	.word	0x200001bd

0800073c <__sfp_lock_release>:
 800073c:	4801      	ldr	r0, [pc, #4]	@ (8000744 <__sfp_lock_release+0x8>)
 800073e:	f000 b87f 	b.w	8000840 <__retarget_lock_release_recursive>
 8000742:	bf00      	nop
 8000744:	200001bd 	.word	0x200001bd

08000748 <__sinit>:
 8000748:	b510      	push	{r4, lr}
 800074a:	4604      	mov	r4, r0
 800074c:	f7ff fff0 	bl	8000730 <__sfp_lock_acquire>
 8000750:	6a23      	ldr	r3, [r4, #32]
 8000752:	b11b      	cbz	r3, 800075c <__sinit+0x14>
 8000754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000758:	f7ff bff0 	b.w	800073c <__sfp_lock_release>
 800075c:	4b04      	ldr	r3, [pc, #16]	@ (8000770 <__sinit+0x28>)
 800075e:	6223      	str	r3, [r4, #32]
 8000760:	4b04      	ldr	r3, [pc, #16]	@ (8000774 <__sinit+0x2c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f5      	bne.n	8000754 <__sinit+0xc>
 8000768:	f7ff ffc4 	bl	80006f4 <global_stdio_init.part.0>
 800076c:	e7f2      	b.n	8000754 <__sinit+0xc>
 800076e:	bf00      	nop
 8000770:	080006b5 	.word	0x080006b5
 8000774:	200001b8 	.word	0x200001b8

08000778 <_fwalk_sglue>:
 8000778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800077c:	4607      	mov	r7, r0
 800077e:	4688      	mov	r8, r1
 8000780:	4614      	mov	r4, r2
 8000782:	2600      	movs	r6, #0
 8000784:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000788:	f1b9 0901 	subs.w	r9, r9, #1
 800078c:	d505      	bpl.n	800079a <_fwalk_sglue+0x22>
 800078e:	6824      	ldr	r4, [r4, #0]
 8000790:	2c00      	cmp	r4, #0
 8000792:	d1f7      	bne.n	8000784 <_fwalk_sglue+0xc>
 8000794:	4630      	mov	r0, r6
 8000796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800079a:	89ab      	ldrh	r3, [r5, #12]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d907      	bls.n	80007b0 <_fwalk_sglue+0x38>
 80007a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007a4:	3301      	adds	r3, #1
 80007a6:	d003      	beq.n	80007b0 <_fwalk_sglue+0x38>
 80007a8:	4629      	mov	r1, r5
 80007aa:	4638      	mov	r0, r7
 80007ac:	47c0      	blx	r8
 80007ae:	4306      	orrs	r6, r0
 80007b0:	3568      	adds	r5, #104	@ 0x68
 80007b2:	e7e9      	b.n	8000788 <_fwalk_sglue+0x10>

080007b4 <iprintf>:
 80007b4:	b40f      	push	{r0, r1, r2, r3}
 80007b6:	b507      	push	{r0, r1, r2, lr}
 80007b8:	4906      	ldr	r1, [pc, #24]	@ (80007d4 <iprintf+0x20>)
 80007ba:	ab04      	add	r3, sp, #16
 80007bc:	6808      	ldr	r0, [r1, #0]
 80007be:	f853 2b04 	ldr.w	r2, [r3], #4
 80007c2:	6881      	ldr	r1, [r0, #8]
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	f000 f865 	bl	8000894 <_vfiprintf_r>
 80007ca:	b003      	add	sp, #12
 80007cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80007d0:	b004      	add	sp, #16
 80007d2:	4770      	bx	lr
 80007d4:	2000000c 	.word	0x2000000c

080007d8 <memset>:
 80007d8:	4402      	add	r2, r0
 80007da:	4603      	mov	r3, r0
 80007dc:	4293      	cmp	r3, r2
 80007de:	d100      	bne.n	80007e2 <memset+0xa>
 80007e0:	4770      	bx	lr
 80007e2:	f803 1b01 	strb.w	r1, [r3], #1
 80007e6:	e7f9      	b.n	80007dc <memset+0x4>

080007e8 <__errno>:
 80007e8:	4b01      	ldr	r3, [pc, #4]	@ (80007f0 <__errno+0x8>)
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	2000000c 	.word	0x2000000c

080007f4 <__libc_init_array>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	4d0d      	ldr	r5, [pc, #52]	@ (800082c <__libc_init_array+0x38>)
 80007f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000830 <__libc_init_array+0x3c>)
 80007fa:	1b64      	subs	r4, r4, r5
 80007fc:	10a4      	asrs	r4, r4, #2
 80007fe:	2600      	movs	r6, #0
 8000800:	42a6      	cmp	r6, r4
 8000802:	d109      	bne.n	8000818 <__libc_init_array+0x24>
 8000804:	4d0b      	ldr	r5, [pc, #44]	@ (8000834 <__libc_init_array+0x40>)
 8000806:	4c0c      	ldr	r4, [pc, #48]	@ (8000838 <__libc_init_array+0x44>)
 8000808:	f000 fe3e 	bl	8001488 <_init>
 800080c:	1b64      	subs	r4, r4, r5
 800080e:	10a4      	asrs	r4, r4, #2
 8000810:	2600      	movs	r6, #0
 8000812:	42a6      	cmp	r6, r4
 8000814:	d105      	bne.n	8000822 <__libc_init_array+0x2e>
 8000816:	bd70      	pop	{r4, r5, r6, pc}
 8000818:	f855 3b04 	ldr.w	r3, [r5], #4
 800081c:	4798      	blx	r3
 800081e:	3601      	adds	r6, #1
 8000820:	e7ee      	b.n	8000800 <__libc_init_array+0xc>
 8000822:	f855 3b04 	ldr.w	r3, [r5], #4
 8000826:	4798      	blx	r3
 8000828:	3601      	adds	r6, #1
 800082a:	e7f2      	b.n	8000812 <__libc_init_array+0x1e>
 800082c:	080014f0 	.word	0x080014f0
 8000830:	080014f0 	.word	0x080014f0
 8000834:	080014f0 	.word	0x080014f0
 8000838:	080014f4 	.word	0x080014f4

0800083c <__retarget_lock_init_recursive>:
 800083c:	4770      	bx	lr

0800083e <__retarget_lock_acquire_recursive>:
 800083e:	4770      	bx	lr

08000840 <__retarget_lock_release_recursive>:
 8000840:	4770      	bx	lr

08000842 <__sfputc_r>:
 8000842:	6893      	ldr	r3, [r2, #8]
 8000844:	3b01      	subs	r3, #1
 8000846:	2b00      	cmp	r3, #0
 8000848:	b410      	push	{r4}
 800084a:	6093      	str	r3, [r2, #8]
 800084c:	da08      	bge.n	8000860 <__sfputc_r+0x1e>
 800084e:	6994      	ldr	r4, [r2, #24]
 8000850:	42a3      	cmp	r3, r4
 8000852:	db01      	blt.n	8000858 <__sfputc_r+0x16>
 8000854:	290a      	cmp	r1, #10
 8000856:	d103      	bne.n	8000860 <__sfputc_r+0x1e>
 8000858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800085c:	f000 bc5b 	b.w	8001116 <__swbuf_r>
 8000860:	6813      	ldr	r3, [r2, #0]
 8000862:	1c58      	adds	r0, r3, #1
 8000864:	6010      	str	r0, [r2, #0]
 8000866:	7019      	strb	r1, [r3, #0]
 8000868:	4608      	mov	r0, r1
 800086a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800086e:	4770      	bx	lr

08000870 <__sfputs_r>:
 8000870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000872:	4606      	mov	r6, r0
 8000874:	460f      	mov	r7, r1
 8000876:	4614      	mov	r4, r2
 8000878:	18d5      	adds	r5, r2, r3
 800087a:	42ac      	cmp	r4, r5
 800087c:	d101      	bne.n	8000882 <__sfputs_r+0x12>
 800087e:	2000      	movs	r0, #0
 8000880:	e007      	b.n	8000892 <__sfputs_r+0x22>
 8000882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000886:	463a      	mov	r2, r7
 8000888:	4630      	mov	r0, r6
 800088a:	f7ff ffda 	bl	8000842 <__sfputc_r>
 800088e:	1c43      	adds	r3, r0, #1
 8000890:	d1f3      	bne.n	800087a <__sfputs_r+0xa>
 8000892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000894 <_vfiprintf_r>:
 8000894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000898:	460d      	mov	r5, r1
 800089a:	b09d      	sub	sp, #116	@ 0x74
 800089c:	4614      	mov	r4, r2
 800089e:	4698      	mov	r8, r3
 80008a0:	4606      	mov	r6, r0
 80008a2:	b118      	cbz	r0, 80008ac <_vfiprintf_r+0x18>
 80008a4:	6a03      	ldr	r3, [r0, #32]
 80008a6:	b90b      	cbnz	r3, 80008ac <_vfiprintf_r+0x18>
 80008a8:	f7ff ff4e 	bl	8000748 <__sinit>
 80008ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80008ae:	07d9      	lsls	r1, r3, #31
 80008b0:	d405      	bmi.n	80008be <_vfiprintf_r+0x2a>
 80008b2:	89ab      	ldrh	r3, [r5, #12]
 80008b4:	059a      	lsls	r2, r3, #22
 80008b6:	d402      	bmi.n	80008be <_vfiprintf_r+0x2a>
 80008b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80008ba:	f7ff ffc0 	bl	800083e <__retarget_lock_acquire_recursive>
 80008be:	89ab      	ldrh	r3, [r5, #12]
 80008c0:	071b      	lsls	r3, r3, #28
 80008c2:	d501      	bpl.n	80008c8 <_vfiprintf_r+0x34>
 80008c4:	692b      	ldr	r3, [r5, #16]
 80008c6:	b99b      	cbnz	r3, 80008f0 <_vfiprintf_r+0x5c>
 80008c8:	4629      	mov	r1, r5
 80008ca:	4630      	mov	r0, r6
 80008cc:	f000 fc62 	bl	8001194 <__swsetup_r>
 80008d0:	b170      	cbz	r0, 80008f0 <_vfiprintf_r+0x5c>
 80008d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80008d4:	07dc      	lsls	r4, r3, #31
 80008d6:	d504      	bpl.n	80008e2 <_vfiprintf_r+0x4e>
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008dc:	b01d      	add	sp, #116	@ 0x74
 80008de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008e2:	89ab      	ldrh	r3, [r5, #12]
 80008e4:	0598      	lsls	r0, r3, #22
 80008e6:	d4f7      	bmi.n	80008d8 <_vfiprintf_r+0x44>
 80008e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80008ea:	f7ff ffa9 	bl	8000840 <__retarget_lock_release_recursive>
 80008ee:	e7f3      	b.n	80008d8 <_vfiprintf_r+0x44>
 80008f0:	2300      	movs	r3, #0
 80008f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80008f4:	2320      	movs	r3, #32
 80008f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80008fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80008fe:	2330      	movs	r3, #48	@ 0x30
 8000900:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000ab0 <_vfiprintf_r+0x21c>
 8000904:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000908:	f04f 0901 	mov.w	r9, #1
 800090c:	4623      	mov	r3, r4
 800090e:	469a      	mov	sl, r3
 8000910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000914:	b10a      	cbz	r2, 800091a <_vfiprintf_r+0x86>
 8000916:	2a25      	cmp	r2, #37	@ 0x25
 8000918:	d1f9      	bne.n	800090e <_vfiprintf_r+0x7a>
 800091a:	ebba 0b04 	subs.w	fp, sl, r4
 800091e:	d00b      	beq.n	8000938 <_vfiprintf_r+0xa4>
 8000920:	465b      	mov	r3, fp
 8000922:	4622      	mov	r2, r4
 8000924:	4629      	mov	r1, r5
 8000926:	4630      	mov	r0, r6
 8000928:	f7ff ffa2 	bl	8000870 <__sfputs_r>
 800092c:	3001      	adds	r0, #1
 800092e:	f000 80a7 	beq.w	8000a80 <_vfiprintf_r+0x1ec>
 8000932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000934:	445a      	add	r2, fp
 8000936:	9209      	str	r2, [sp, #36]	@ 0x24
 8000938:	f89a 3000 	ldrb.w	r3, [sl]
 800093c:	2b00      	cmp	r3, #0
 800093e:	f000 809f 	beq.w	8000a80 <_vfiprintf_r+0x1ec>
 8000942:	2300      	movs	r3, #0
 8000944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800094c:	f10a 0a01 	add.w	sl, sl, #1
 8000950:	9304      	str	r3, [sp, #16]
 8000952:	9307      	str	r3, [sp, #28]
 8000954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000958:	931a      	str	r3, [sp, #104]	@ 0x68
 800095a:	4654      	mov	r4, sl
 800095c:	2205      	movs	r2, #5
 800095e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000962:	4853      	ldr	r0, [pc, #332]	@ (8000ab0 <_vfiprintf_r+0x21c>)
 8000964:	f7ff fc3c 	bl	80001e0 <memchr>
 8000968:	9a04      	ldr	r2, [sp, #16]
 800096a:	b9d8      	cbnz	r0, 80009a4 <_vfiprintf_r+0x110>
 800096c:	06d1      	lsls	r1, r2, #27
 800096e:	bf44      	itt	mi
 8000970:	2320      	movmi	r3, #32
 8000972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000976:	0713      	lsls	r3, r2, #28
 8000978:	bf44      	itt	mi
 800097a:	232b      	movmi	r3, #43	@ 0x2b
 800097c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000980:	f89a 3000 	ldrb.w	r3, [sl]
 8000984:	2b2a      	cmp	r3, #42	@ 0x2a
 8000986:	d015      	beq.n	80009b4 <_vfiprintf_r+0x120>
 8000988:	9a07      	ldr	r2, [sp, #28]
 800098a:	4654      	mov	r4, sl
 800098c:	2000      	movs	r0, #0
 800098e:	f04f 0c0a 	mov.w	ip, #10
 8000992:	4621      	mov	r1, r4
 8000994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000998:	3b30      	subs	r3, #48	@ 0x30
 800099a:	2b09      	cmp	r3, #9
 800099c:	d94b      	bls.n	8000a36 <_vfiprintf_r+0x1a2>
 800099e:	b1b0      	cbz	r0, 80009ce <_vfiprintf_r+0x13a>
 80009a0:	9207      	str	r2, [sp, #28]
 80009a2:	e014      	b.n	80009ce <_vfiprintf_r+0x13a>
 80009a4:	eba0 0308 	sub.w	r3, r0, r8
 80009a8:	fa09 f303 	lsl.w	r3, r9, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	9304      	str	r3, [sp, #16]
 80009b0:	46a2      	mov	sl, r4
 80009b2:	e7d2      	b.n	800095a <_vfiprintf_r+0xc6>
 80009b4:	9b03      	ldr	r3, [sp, #12]
 80009b6:	1d19      	adds	r1, r3, #4
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	9103      	str	r1, [sp, #12]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bfbb      	ittet	lt
 80009c0:	425b      	neglt	r3, r3
 80009c2:	f042 0202 	orrlt.w	r2, r2, #2
 80009c6:	9307      	strge	r3, [sp, #28]
 80009c8:	9307      	strlt	r3, [sp, #28]
 80009ca:	bfb8      	it	lt
 80009cc:	9204      	strlt	r2, [sp, #16]
 80009ce:	7823      	ldrb	r3, [r4, #0]
 80009d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80009d2:	d10a      	bne.n	80009ea <_vfiprintf_r+0x156>
 80009d4:	7863      	ldrb	r3, [r4, #1]
 80009d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80009d8:	d132      	bne.n	8000a40 <_vfiprintf_r+0x1ac>
 80009da:	9b03      	ldr	r3, [sp, #12]
 80009dc:	1d1a      	adds	r2, r3, #4
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	9203      	str	r2, [sp, #12]
 80009e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80009e6:	3402      	adds	r4, #2
 80009e8:	9305      	str	r3, [sp, #20]
 80009ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000ac0 <_vfiprintf_r+0x22c>
 80009ee:	7821      	ldrb	r1, [r4, #0]
 80009f0:	2203      	movs	r2, #3
 80009f2:	4650      	mov	r0, sl
 80009f4:	f7ff fbf4 	bl	80001e0 <memchr>
 80009f8:	b138      	cbz	r0, 8000a0a <_vfiprintf_r+0x176>
 80009fa:	9b04      	ldr	r3, [sp, #16]
 80009fc:	eba0 000a 	sub.w	r0, r0, sl
 8000a00:	2240      	movs	r2, #64	@ 0x40
 8000a02:	4082      	lsls	r2, r0
 8000a04:	4313      	orrs	r3, r2
 8000a06:	3401      	adds	r4, #1
 8000a08:	9304      	str	r3, [sp, #16]
 8000a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a0e:	4829      	ldr	r0, [pc, #164]	@ (8000ab4 <_vfiprintf_r+0x220>)
 8000a10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a14:	2206      	movs	r2, #6
 8000a16:	f7ff fbe3 	bl	80001e0 <memchr>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	d03f      	beq.n	8000a9e <_vfiprintf_r+0x20a>
 8000a1e:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <_vfiprintf_r+0x224>)
 8000a20:	bb1b      	cbnz	r3, 8000a6a <_vfiprintf_r+0x1d6>
 8000a22:	9b03      	ldr	r3, [sp, #12]
 8000a24:	3307      	adds	r3, #7
 8000a26:	f023 0307 	bic.w	r3, r3, #7
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	9303      	str	r3, [sp, #12]
 8000a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a30:	443b      	add	r3, r7
 8000a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a34:	e76a      	b.n	800090c <_vfiprintf_r+0x78>
 8000a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	e7a8      	b.n	8000992 <_vfiprintf_r+0xfe>
 8000a40:	2300      	movs	r3, #0
 8000a42:	3401      	adds	r4, #1
 8000a44:	9305      	str	r3, [sp, #20]
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 0c0a 	mov.w	ip, #10
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a52:	3a30      	subs	r2, #48	@ 0x30
 8000a54:	2a09      	cmp	r2, #9
 8000a56:	d903      	bls.n	8000a60 <_vfiprintf_r+0x1cc>
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0c6      	beq.n	80009ea <_vfiprintf_r+0x156>
 8000a5c:	9105      	str	r1, [sp, #20]
 8000a5e:	e7c4      	b.n	80009ea <_vfiprintf_r+0x156>
 8000a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a64:	4604      	mov	r4, r0
 8000a66:	2301      	movs	r3, #1
 8000a68:	e7f0      	b.n	8000a4c <_vfiprintf_r+0x1b8>
 8000a6a:	ab03      	add	r3, sp, #12
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	462a      	mov	r2, r5
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <_vfiprintf_r+0x228>)
 8000a72:	a904      	add	r1, sp, #16
 8000a74:	4630      	mov	r0, r6
 8000a76:	f3af 8000 	nop.w
 8000a7a:	4607      	mov	r7, r0
 8000a7c:	1c78      	adds	r0, r7, #1
 8000a7e:	d1d6      	bne.n	8000a2e <_vfiprintf_r+0x19a>
 8000a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a82:	07d9      	lsls	r1, r3, #31
 8000a84:	d405      	bmi.n	8000a92 <_vfiprintf_r+0x1fe>
 8000a86:	89ab      	ldrh	r3, [r5, #12]
 8000a88:	059a      	lsls	r2, r3, #22
 8000a8a:	d402      	bmi.n	8000a92 <_vfiprintf_r+0x1fe>
 8000a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a8e:	f7ff fed7 	bl	8000840 <__retarget_lock_release_recursive>
 8000a92:	89ab      	ldrh	r3, [r5, #12]
 8000a94:	065b      	lsls	r3, r3, #25
 8000a96:	f53f af1f 	bmi.w	80008d8 <_vfiprintf_r+0x44>
 8000a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000a9c:	e71e      	b.n	80008dc <_vfiprintf_r+0x48>
 8000a9e:	ab03      	add	r3, sp, #12
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	462a      	mov	r2, r5
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <_vfiprintf_r+0x228>)
 8000aa6:	a904      	add	r1, sp, #16
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	f000 f91b 	bl	8000ce4 <_printf_i>
 8000aae:	e7e4      	b.n	8000a7a <_vfiprintf_r+0x1e6>
 8000ab0:	080014b4 	.word	0x080014b4
 8000ab4:	080014be 	.word	0x080014be
 8000ab8:	00000000 	.word	0x00000000
 8000abc:	08000871 	.word	0x08000871
 8000ac0:	080014ba 	.word	0x080014ba

08000ac4 <sbrk_aligned>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	4e0f      	ldr	r6, [pc, #60]	@ (8000b04 <sbrk_aligned+0x40>)
 8000ac8:	460c      	mov	r4, r1
 8000aca:	6831      	ldr	r1, [r6, #0]
 8000acc:	4605      	mov	r5, r0
 8000ace:	b911      	cbnz	r1, 8000ad6 <sbrk_aligned+0x12>
 8000ad0:	f000 fc4c 	bl	800136c <_sbrk_r>
 8000ad4:	6030      	str	r0, [r6, #0]
 8000ad6:	4621      	mov	r1, r4
 8000ad8:	4628      	mov	r0, r5
 8000ada:	f000 fc47 	bl	800136c <_sbrk_r>
 8000ade:	1c43      	adds	r3, r0, #1
 8000ae0:	d103      	bne.n	8000aea <sbrk_aligned+0x26>
 8000ae2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	1cc4      	adds	r4, r0, #3
 8000aec:	f024 0403 	bic.w	r4, r4, #3
 8000af0:	42a0      	cmp	r0, r4
 8000af2:	d0f8      	beq.n	8000ae6 <sbrk_aligned+0x22>
 8000af4:	1a21      	subs	r1, r4, r0
 8000af6:	4628      	mov	r0, r5
 8000af8:	f000 fc38 	bl	800136c <_sbrk_r>
 8000afc:	3001      	adds	r0, #1
 8000afe:	d1f2      	bne.n	8000ae6 <sbrk_aligned+0x22>
 8000b00:	e7ef      	b.n	8000ae2 <sbrk_aligned+0x1e>
 8000b02:	bf00      	nop
 8000b04:	200001c0 	.word	0x200001c0

08000b08 <_malloc_r>:
 8000b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b0c:	1ccd      	adds	r5, r1, #3
 8000b0e:	f025 0503 	bic.w	r5, r5, #3
 8000b12:	3508      	adds	r5, #8
 8000b14:	2d0c      	cmp	r5, #12
 8000b16:	bf38      	it	cc
 8000b18:	250c      	movcc	r5, #12
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	db01      	blt.n	8000b24 <_malloc_r+0x1c>
 8000b20:	42a9      	cmp	r1, r5
 8000b22:	d904      	bls.n	8000b2e <_malloc_r+0x26>
 8000b24:	230c      	movs	r3, #12
 8000b26:	6033      	str	r3, [r6, #0]
 8000b28:	2000      	movs	r0, #0
 8000b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c04 <_malloc_r+0xfc>
 8000b32:	f000 faa1 	bl	8001078 <__malloc_lock>
 8000b36:	f8d8 3000 	ldr.w	r3, [r8]
 8000b3a:	461c      	mov	r4, r3
 8000b3c:	bb44      	cbnz	r4, 8000b90 <_malloc_r+0x88>
 8000b3e:	4629      	mov	r1, r5
 8000b40:	4630      	mov	r0, r6
 8000b42:	f7ff ffbf 	bl	8000ac4 <sbrk_aligned>
 8000b46:	1c43      	adds	r3, r0, #1
 8000b48:	4604      	mov	r4, r0
 8000b4a:	d158      	bne.n	8000bfe <_malloc_r+0xf6>
 8000b4c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b50:	4627      	mov	r7, r4
 8000b52:	2f00      	cmp	r7, #0
 8000b54:	d143      	bne.n	8000bde <_malloc_r+0xd6>
 8000b56:	2c00      	cmp	r4, #0
 8000b58:	d04b      	beq.n	8000bf2 <_malloc_r+0xea>
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	4630      	mov	r0, r6
 8000b60:	eb04 0903 	add.w	r9, r4, r3
 8000b64:	f000 fc02 	bl	800136c <_sbrk_r>
 8000b68:	4581      	cmp	r9, r0
 8000b6a:	d142      	bne.n	8000bf2 <_malloc_r+0xea>
 8000b6c:	6821      	ldr	r1, [r4, #0]
 8000b6e:	1a6d      	subs	r5, r5, r1
 8000b70:	4629      	mov	r1, r5
 8000b72:	4630      	mov	r0, r6
 8000b74:	f7ff ffa6 	bl	8000ac4 <sbrk_aligned>
 8000b78:	3001      	adds	r0, #1
 8000b7a:	d03a      	beq.n	8000bf2 <_malloc_r+0xea>
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	442b      	add	r3, r5
 8000b80:	6023      	str	r3, [r4, #0]
 8000b82:	f8d8 3000 	ldr.w	r3, [r8]
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	bb62      	cbnz	r2, 8000be4 <_malloc_r+0xdc>
 8000b8a:	f8c8 7000 	str.w	r7, [r8]
 8000b8e:	e00f      	b.n	8000bb0 <_malloc_r+0xa8>
 8000b90:	6822      	ldr	r2, [r4, #0]
 8000b92:	1b52      	subs	r2, r2, r5
 8000b94:	d420      	bmi.n	8000bd8 <_malloc_r+0xd0>
 8000b96:	2a0b      	cmp	r2, #11
 8000b98:	d917      	bls.n	8000bca <_malloc_r+0xc2>
 8000b9a:	1961      	adds	r1, r4, r5
 8000b9c:	42a3      	cmp	r3, r4
 8000b9e:	6025      	str	r5, [r4, #0]
 8000ba0:	bf18      	it	ne
 8000ba2:	6059      	strne	r1, [r3, #4]
 8000ba4:	6863      	ldr	r3, [r4, #4]
 8000ba6:	bf08      	it	eq
 8000ba8:	f8c8 1000 	streq.w	r1, [r8]
 8000bac:	5162      	str	r2, [r4, r5]
 8000bae:	604b      	str	r3, [r1, #4]
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	f000 fa67 	bl	8001084 <__malloc_unlock>
 8000bb6:	f104 000b 	add.w	r0, r4, #11
 8000bba:	1d23      	adds	r3, r4, #4
 8000bbc:	f020 0007 	bic.w	r0, r0, #7
 8000bc0:	1ac2      	subs	r2, r0, r3
 8000bc2:	bf1c      	itt	ne
 8000bc4:	1a1b      	subne	r3, r3, r0
 8000bc6:	50a3      	strne	r3, [r4, r2]
 8000bc8:	e7af      	b.n	8000b2a <_malloc_r+0x22>
 8000bca:	6862      	ldr	r2, [r4, #4]
 8000bcc:	42a3      	cmp	r3, r4
 8000bce:	bf0c      	ite	eq
 8000bd0:	f8c8 2000 	streq.w	r2, [r8]
 8000bd4:	605a      	strne	r2, [r3, #4]
 8000bd6:	e7eb      	b.n	8000bb0 <_malloc_r+0xa8>
 8000bd8:	4623      	mov	r3, r4
 8000bda:	6864      	ldr	r4, [r4, #4]
 8000bdc:	e7ae      	b.n	8000b3c <_malloc_r+0x34>
 8000bde:	463c      	mov	r4, r7
 8000be0:	687f      	ldr	r7, [r7, #4]
 8000be2:	e7b6      	b.n	8000b52 <_malloc_r+0x4a>
 8000be4:	461a      	mov	r2, r3
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	42a3      	cmp	r3, r4
 8000bea:	d1fb      	bne.n	8000be4 <_malloc_r+0xdc>
 8000bec:	2300      	movs	r3, #0
 8000bee:	6053      	str	r3, [r2, #4]
 8000bf0:	e7de      	b.n	8000bb0 <_malloc_r+0xa8>
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	6033      	str	r3, [r6, #0]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f000 fa44 	bl	8001084 <__malloc_unlock>
 8000bfc:	e794      	b.n	8000b28 <_malloc_r+0x20>
 8000bfe:	6005      	str	r5, [r0, #0]
 8000c00:	e7d6      	b.n	8000bb0 <_malloc_r+0xa8>
 8000c02:	bf00      	nop
 8000c04:	200001c4 	.word	0x200001c4

08000c08 <_printf_common>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	4616      	mov	r6, r2
 8000c0e:	4698      	mov	r8, r3
 8000c10:	688a      	ldr	r2, [r1, #8]
 8000c12:	690b      	ldr	r3, [r1, #16]
 8000c14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	bfb8      	it	lt
 8000c1c:	4613      	movlt	r3, r2
 8000c1e:	6033      	str	r3, [r6, #0]
 8000c20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c24:	4607      	mov	r7, r0
 8000c26:	460c      	mov	r4, r1
 8000c28:	b10a      	cbz	r2, 8000c2e <_printf_common+0x26>
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	6033      	str	r3, [r6, #0]
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	0699      	lsls	r1, r3, #26
 8000c32:	bf42      	ittt	mi
 8000c34:	6833      	ldrmi	r3, [r6, #0]
 8000c36:	3302      	addmi	r3, #2
 8000c38:	6033      	strmi	r3, [r6, #0]
 8000c3a:	6825      	ldr	r5, [r4, #0]
 8000c3c:	f015 0506 	ands.w	r5, r5, #6
 8000c40:	d106      	bne.n	8000c50 <_printf_common+0x48>
 8000c42:	f104 0a19 	add.w	sl, r4, #25
 8000c46:	68e3      	ldr	r3, [r4, #12]
 8000c48:	6832      	ldr	r2, [r6, #0]
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	42ab      	cmp	r3, r5
 8000c4e:	dc26      	bgt.n	8000c9e <_printf_common+0x96>
 8000c50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	3b00      	subs	r3, #0
 8000c58:	bf18      	it	ne
 8000c5a:	2301      	movne	r3, #1
 8000c5c:	0692      	lsls	r2, r2, #26
 8000c5e:	d42b      	bmi.n	8000cb8 <_printf_common+0xb0>
 8000c60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c64:	4641      	mov	r1, r8
 8000c66:	4638      	mov	r0, r7
 8000c68:	47c8      	blx	r9
 8000c6a:	3001      	adds	r0, #1
 8000c6c:	d01e      	beq.n	8000cac <_printf_common+0xa4>
 8000c6e:	6823      	ldr	r3, [r4, #0]
 8000c70:	6922      	ldr	r2, [r4, #16]
 8000c72:	f003 0306 	and.w	r3, r3, #6
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf02      	ittt	eq
 8000c7a:	68e5      	ldreq	r5, [r4, #12]
 8000c7c:	6833      	ldreq	r3, [r6, #0]
 8000c7e:	1aed      	subeq	r5, r5, r3
 8000c80:	68a3      	ldr	r3, [r4, #8]
 8000c82:	bf0c      	ite	eq
 8000c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c88:	2500      	movne	r5, #0
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	bfc4      	itt	gt
 8000c8e:	1a9b      	subgt	r3, r3, r2
 8000c90:	18ed      	addgt	r5, r5, r3
 8000c92:	2600      	movs	r6, #0
 8000c94:	341a      	adds	r4, #26
 8000c96:	42b5      	cmp	r5, r6
 8000c98:	d11a      	bne.n	8000cd0 <_printf_common+0xc8>
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	e008      	b.n	8000cb0 <_printf_common+0xa8>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	4652      	mov	r2, sl
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	47c8      	blx	r9
 8000ca8:	3001      	adds	r0, #1
 8000caa:	d103      	bne.n	8000cb4 <_printf_common+0xac>
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	3501      	adds	r5, #1
 8000cb6:	e7c6      	b.n	8000c46 <_printf_common+0x3e>
 8000cb8:	18e1      	adds	r1, r4, r3
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	2030      	movs	r0, #48	@ 0x30
 8000cbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000cc2:	4422      	add	r2, r4
 8000cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000cc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000ccc:	3302      	adds	r3, #2
 8000cce:	e7c7      	b.n	8000c60 <_printf_common+0x58>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	4622      	mov	r2, r4
 8000cd4:	4641      	mov	r1, r8
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	47c8      	blx	r9
 8000cda:	3001      	adds	r0, #1
 8000cdc:	d0e6      	beq.n	8000cac <_printf_common+0xa4>
 8000cde:	3601      	adds	r6, #1
 8000ce0:	e7d9      	b.n	8000c96 <_printf_common+0x8e>
	...

08000ce4 <_printf_i>:
 8000ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	7e0f      	ldrb	r7, [r1, #24]
 8000cea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000cec:	2f78      	cmp	r7, #120	@ 0x78
 8000cee:	4691      	mov	r9, r2
 8000cf0:	4680      	mov	r8, r0
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	469a      	mov	sl, r3
 8000cf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000cfa:	d807      	bhi.n	8000d0c <_printf_i+0x28>
 8000cfc:	2f62      	cmp	r7, #98	@ 0x62
 8000cfe:	d80a      	bhi.n	8000d16 <_printf_i+0x32>
 8000d00:	2f00      	cmp	r7, #0
 8000d02:	f000 80d1 	beq.w	8000ea8 <_printf_i+0x1c4>
 8000d06:	2f58      	cmp	r7, #88	@ 0x58
 8000d08:	f000 80b8 	beq.w	8000e7c <_printf_i+0x198>
 8000d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d14:	e03a      	b.n	8000d8c <_printf_i+0xa8>
 8000d16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d1a:	2b15      	cmp	r3, #21
 8000d1c:	d8f6      	bhi.n	8000d0c <_printf_i+0x28>
 8000d1e:	a101      	add	r1, pc, #4	@ (adr r1, 8000d24 <_printf_i+0x40>)
 8000d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d24:	08000d7d 	.word	0x08000d7d
 8000d28:	08000d91 	.word	0x08000d91
 8000d2c:	08000d0d 	.word	0x08000d0d
 8000d30:	08000d0d 	.word	0x08000d0d
 8000d34:	08000d0d 	.word	0x08000d0d
 8000d38:	08000d0d 	.word	0x08000d0d
 8000d3c:	08000d91 	.word	0x08000d91
 8000d40:	08000d0d 	.word	0x08000d0d
 8000d44:	08000d0d 	.word	0x08000d0d
 8000d48:	08000d0d 	.word	0x08000d0d
 8000d4c:	08000d0d 	.word	0x08000d0d
 8000d50:	08000e8f 	.word	0x08000e8f
 8000d54:	08000dbb 	.word	0x08000dbb
 8000d58:	08000e49 	.word	0x08000e49
 8000d5c:	08000d0d 	.word	0x08000d0d
 8000d60:	08000d0d 	.word	0x08000d0d
 8000d64:	08000eb1 	.word	0x08000eb1
 8000d68:	08000d0d 	.word	0x08000d0d
 8000d6c:	08000dbb 	.word	0x08000dbb
 8000d70:	08000d0d 	.word	0x08000d0d
 8000d74:	08000d0d 	.word	0x08000d0d
 8000d78:	08000e51 	.word	0x08000e51
 8000d7c:	6833      	ldr	r3, [r6, #0]
 8000d7e:	1d1a      	adds	r2, r3, #4
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6032      	str	r2, [r6, #0]
 8000d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e09c      	b.n	8000eca <_printf_i+0x1e6>
 8000d90:	6833      	ldr	r3, [r6, #0]
 8000d92:	6820      	ldr	r0, [r4, #0]
 8000d94:	1d19      	adds	r1, r3, #4
 8000d96:	6031      	str	r1, [r6, #0]
 8000d98:	0606      	lsls	r6, r0, #24
 8000d9a:	d501      	bpl.n	8000da0 <_printf_i+0xbc>
 8000d9c:	681d      	ldr	r5, [r3, #0]
 8000d9e:	e003      	b.n	8000da8 <_printf_i+0xc4>
 8000da0:	0645      	lsls	r5, r0, #25
 8000da2:	d5fb      	bpl.n	8000d9c <_printf_i+0xb8>
 8000da4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	da03      	bge.n	8000db4 <_printf_i+0xd0>
 8000dac:	232d      	movs	r3, #45	@ 0x2d
 8000dae:	426d      	negs	r5, r5
 8000db0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000db4:	4858      	ldr	r0, [pc, #352]	@ (8000f18 <_printf_i+0x234>)
 8000db6:	230a      	movs	r3, #10
 8000db8:	e011      	b.n	8000dde <_printf_i+0xfa>
 8000dba:	6821      	ldr	r1, [r4, #0]
 8000dbc:	6833      	ldr	r3, [r6, #0]
 8000dbe:	0608      	lsls	r0, r1, #24
 8000dc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8000dc4:	d402      	bmi.n	8000dcc <_printf_i+0xe8>
 8000dc6:	0649      	lsls	r1, r1, #25
 8000dc8:	bf48      	it	mi
 8000dca:	b2ad      	uxthmi	r5, r5
 8000dcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8000dce:	4852      	ldr	r0, [pc, #328]	@ (8000f18 <_printf_i+0x234>)
 8000dd0:	6033      	str	r3, [r6, #0]
 8000dd2:	bf14      	ite	ne
 8000dd4:	230a      	movne	r3, #10
 8000dd6:	2308      	moveq	r3, #8
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000dde:	6866      	ldr	r6, [r4, #4]
 8000de0:	60a6      	str	r6, [r4, #8]
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	db05      	blt.n	8000df2 <_printf_i+0x10e>
 8000de6:	6821      	ldr	r1, [r4, #0]
 8000de8:	432e      	orrs	r6, r5
 8000dea:	f021 0104 	bic.w	r1, r1, #4
 8000dee:	6021      	str	r1, [r4, #0]
 8000df0:	d04b      	beq.n	8000e8a <_printf_i+0x1a6>
 8000df2:	4616      	mov	r6, r2
 8000df4:	fbb5 f1f3 	udiv	r1, r5, r3
 8000df8:	fb03 5711 	mls	r7, r3, r1, r5
 8000dfc:	5dc7      	ldrb	r7, [r0, r7]
 8000dfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e02:	462f      	mov	r7, r5
 8000e04:	42bb      	cmp	r3, r7
 8000e06:	460d      	mov	r5, r1
 8000e08:	d9f4      	bls.n	8000df4 <_printf_i+0x110>
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	d10b      	bne.n	8000e26 <_printf_i+0x142>
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	07df      	lsls	r7, r3, #31
 8000e12:	d508      	bpl.n	8000e26 <_printf_i+0x142>
 8000e14:	6923      	ldr	r3, [r4, #16]
 8000e16:	6861      	ldr	r1, [r4, #4]
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	bfde      	ittt	le
 8000e1c:	2330      	movle	r3, #48	@ 0x30
 8000e1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e22:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e26:	1b92      	subs	r2, r2, r6
 8000e28:	6122      	str	r2, [r4, #16]
 8000e2a:	f8cd a000 	str.w	sl, [sp]
 8000e2e:	464b      	mov	r3, r9
 8000e30:	aa03      	add	r2, sp, #12
 8000e32:	4621      	mov	r1, r4
 8000e34:	4640      	mov	r0, r8
 8000e36:	f7ff fee7 	bl	8000c08 <_printf_common>
 8000e3a:	3001      	adds	r0, #1
 8000e3c:	d14a      	bne.n	8000ed4 <_printf_i+0x1f0>
 8000e3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e42:	b004      	add	sp, #16
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	f043 0320 	orr.w	r3, r3, #32
 8000e4e:	6023      	str	r3, [r4, #0]
 8000e50:	4832      	ldr	r0, [pc, #200]	@ (8000f1c <_printf_i+0x238>)
 8000e52:	2778      	movs	r7, #120	@ 0x78
 8000e54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	6831      	ldr	r1, [r6, #0]
 8000e5c:	061f      	lsls	r7, r3, #24
 8000e5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e62:	d402      	bmi.n	8000e6a <_printf_i+0x186>
 8000e64:	065f      	lsls	r7, r3, #25
 8000e66:	bf48      	it	mi
 8000e68:	b2ad      	uxthmi	r5, r5
 8000e6a:	6031      	str	r1, [r6, #0]
 8000e6c:	07d9      	lsls	r1, r3, #31
 8000e6e:	bf44      	itt	mi
 8000e70:	f043 0320 	orrmi.w	r3, r3, #32
 8000e74:	6023      	strmi	r3, [r4, #0]
 8000e76:	b11d      	cbz	r5, 8000e80 <_printf_i+0x19c>
 8000e78:	2310      	movs	r3, #16
 8000e7a:	e7ad      	b.n	8000dd8 <_printf_i+0xf4>
 8000e7c:	4826      	ldr	r0, [pc, #152]	@ (8000f18 <_printf_i+0x234>)
 8000e7e:	e7e9      	b.n	8000e54 <_printf_i+0x170>
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	f023 0320 	bic.w	r3, r3, #32
 8000e86:	6023      	str	r3, [r4, #0]
 8000e88:	e7f6      	b.n	8000e78 <_printf_i+0x194>
 8000e8a:	4616      	mov	r6, r2
 8000e8c:	e7bd      	b.n	8000e0a <_printf_i+0x126>
 8000e8e:	6833      	ldr	r3, [r6, #0]
 8000e90:	6825      	ldr	r5, [r4, #0]
 8000e92:	6961      	ldr	r1, [r4, #20]
 8000e94:	1d18      	adds	r0, r3, #4
 8000e96:	6030      	str	r0, [r6, #0]
 8000e98:	062e      	lsls	r6, r5, #24
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	d501      	bpl.n	8000ea2 <_printf_i+0x1be>
 8000e9e:	6019      	str	r1, [r3, #0]
 8000ea0:	e002      	b.n	8000ea8 <_printf_i+0x1c4>
 8000ea2:	0668      	lsls	r0, r5, #25
 8000ea4:	d5fb      	bpl.n	8000e9e <_printf_i+0x1ba>
 8000ea6:	8019      	strh	r1, [r3, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6123      	str	r3, [r4, #16]
 8000eac:	4616      	mov	r6, r2
 8000eae:	e7bc      	b.n	8000e2a <_printf_i+0x146>
 8000eb0:	6833      	ldr	r3, [r6, #0]
 8000eb2:	1d1a      	adds	r2, r3, #4
 8000eb4:	6032      	str	r2, [r6, #0]
 8000eb6:	681e      	ldr	r6, [r3, #0]
 8000eb8:	6862      	ldr	r2, [r4, #4]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4630      	mov	r0, r6
 8000ebe:	f7ff f98f 	bl	80001e0 <memchr>
 8000ec2:	b108      	cbz	r0, 8000ec8 <_printf_i+0x1e4>
 8000ec4:	1b80      	subs	r0, r0, r6
 8000ec6:	6060      	str	r0, [r4, #4]
 8000ec8:	6863      	ldr	r3, [r4, #4]
 8000eca:	6123      	str	r3, [r4, #16]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ed2:	e7aa      	b.n	8000e2a <_printf_i+0x146>
 8000ed4:	6923      	ldr	r3, [r4, #16]
 8000ed6:	4632      	mov	r2, r6
 8000ed8:	4649      	mov	r1, r9
 8000eda:	4640      	mov	r0, r8
 8000edc:	47d0      	blx	sl
 8000ede:	3001      	adds	r0, #1
 8000ee0:	d0ad      	beq.n	8000e3e <_printf_i+0x15a>
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	079b      	lsls	r3, r3, #30
 8000ee6:	d413      	bmi.n	8000f10 <_printf_i+0x22c>
 8000ee8:	68e0      	ldr	r0, [r4, #12]
 8000eea:	9b03      	ldr	r3, [sp, #12]
 8000eec:	4298      	cmp	r0, r3
 8000eee:	bfb8      	it	lt
 8000ef0:	4618      	movlt	r0, r3
 8000ef2:	e7a6      	b.n	8000e42 <_printf_i+0x15e>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	4632      	mov	r2, r6
 8000ef8:	4649      	mov	r1, r9
 8000efa:	4640      	mov	r0, r8
 8000efc:	47d0      	blx	sl
 8000efe:	3001      	adds	r0, #1
 8000f00:	d09d      	beq.n	8000e3e <_printf_i+0x15a>
 8000f02:	3501      	adds	r5, #1
 8000f04:	68e3      	ldr	r3, [r4, #12]
 8000f06:	9903      	ldr	r1, [sp, #12]
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	42ab      	cmp	r3, r5
 8000f0c:	dcf2      	bgt.n	8000ef4 <_printf_i+0x210>
 8000f0e:	e7eb      	b.n	8000ee8 <_printf_i+0x204>
 8000f10:	2500      	movs	r5, #0
 8000f12:	f104 0619 	add.w	r6, r4, #25
 8000f16:	e7f5      	b.n	8000f04 <_printf_i+0x220>
 8000f18:	080014c5 	.word	0x080014c5
 8000f1c:	080014d6 	.word	0x080014d6

08000f20 <__sflush_r>:
 8000f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f28:	0716      	lsls	r6, r2, #28
 8000f2a:	4605      	mov	r5, r0
 8000f2c:	460c      	mov	r4, r1
 8000f2e:	d454      	bmi.n	8000fda <__sflush_r+0xba>
 8000f30:	684b      	ldr	r3, [r1, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	dc02      	bgt.n	8000f3c <__sflush_r+0x1c>
 8000f36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dd48      	ble.n	8000fce <__sflush_r+0xae>
 8000f3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d045      	beq.n	8000fce <__sflush_r+0xae>
 8000f42:	2300      	movs	r3, #0
 8000f44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000f48:	682f      	ldr	r7, [r5, #0]
 8000f4a:	6a21      	ldr	r1, [r4, #32]
 8000f4c:	602b      	str	r3, [r5, #0]
 8000f4e:	d030      	beq.n	8000fb2 <__sflush_r+0x92>
 8000f50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f52:	89a3      	ldrh	r3, [r4, #12]
 8000f54:	0759      	lsls	r1, r3, #29
 8000f56:	d505      	bpl.n	8000f64 <__sflush_r+0x44>
 8000f58:	6863      	ldr	r3, [r4, #4]
 8000f5a:	1ad2      	subs	r2, r2, r3
 8000f5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000f5e:	b10b      	cbz	r3, 8000f64 <__sflush_r+0x44>
 8000f60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f62:	1ad2      	subs	r2, r2, r3
 8000f64:	2300      	movs	r3, #0
 8000f66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f68:	6a21      	ldr	r1, [r4, #32]
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	47b0      	blx	r6
 8000f6e:	1c43      	adds	r3, r0, #1
 8000f70:	89a3      	ldrh	r3, [r4, #12]
 8000f72:	d106      	bne.n	8000f82 <__sflush_r+0x62>
 8000f74:	6829      	ldr	r1, [r5, #0]
 8000f76:	291d      	cmp	r1, #29
 8000f78:	d82b      	bhi.n	8000fd2 <__sflush_r+0xb2>
 8000f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8001024 <__sflush_r+0x104>)
 8000f7c:	40ca      	lsrs	r2, r1
 8000f7e:	07d6      	lsls	r6, r2, #31
 8000f80:	d527      	bpl.n	8000fd2 <__sflush_r+0xb2>
 8000f82:	2200      	movs	r2, #0
 8000f84:	6062      	str	r2, [r4, #4]
 8000f86:	04d9      	lsls	r1, r3, #19
 8000f88:	6922      	ldr	r2, [r4, #16]
 8000f8a:	6022      	str	r2, [r4, #0]
 8000f8c:	d504      	bpl.n	8000f98 <__sflush_r+0x78>
 8000f8e:	1c42      	adds	r2, r0, #1
 8000f90:	d101      	bne.n	8000f96 <__sflush_r+0x76>
 8000f92:	682b      	ldr	r3, [r5, #0]
 8000f94:	b903      	cbnz	r3, 8000f98 <__sflush_r+0x78>
 8000f96:	6560      	str	r0, [r4, #84]	@ 0x54
 8000f98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000f9a:	602f      	str	r7, [r5, #0]
 8000f9c:	b1b9      	cbz	r1, 8000fce <__sflush_r+0xae>
 8000f9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000fa2:	4299      	cmp	r1, r3
 8000fa4:	d002      	beq.n	8000fac <__sflush_r+0x8c>
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	f000 fa24 	bl	80013f4 <_free_r>
 8000fac:	2300      	movs	r3, #0
 8000fae:	6363      	str	r3, [r4, #52]	@ 0x34
 8000fb0:	e00d      	b.n	8000fce <__sflush_r+0xae>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	47b0      	blx	r6
 8000fb8:	4602      	mov	r2, r0
 8000fba:	1c50      	adds	r0, r2, #1
 8000fbc:	d1c9      	bne.n	8000f52 <__sflush_r+0x32>
 8000fbe:	682b      	ldr	r3, [r5, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0c6      	beq.n	8000f52 <__sflush_r+0x32>
 8000fc4:	2b1d      	cmp	r3, #29
 8000fc6:	d001      	beq.n	8000fcc <__sflush_r+0xac>
 8000fc8:	2b16      	cmp	r3, #22
 8000fca:	d11e      	bne.n	800100a <__sflush_r+0xea>
 8000fcc:	602f      	str	r7, [r5, #0]
 8000fce:	2000      	movs	r0, #0
 8000fd0:	e022      	b.n	8001018 <__sflush_r+0xf8>
 8000fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	e01b      	b.n	8001012 <__sflush_r+0xf2>
 8000fda:	690f      	ldr	r7, [r1, #16]
 8000fdc:	2f00      	cmp	r7, #0
 8000fde:	d0f6      	beq.n	8000fce <__sflush_r+0xae>
 8000fe0:	0793      	lsls	r3, r2, #30
 8000fe2:	680e      	ldr	r6, [r1, #0]
 8000fe4:	bf08      	it	eq
 8000fe6:	694b      	ldreq	r3, [r1, #20]
 8000fe8:	600f      	str	r7, [r1, #0]
 8000fea:	bf18      	it	ne
 8000fec:	2300      	movne	r3, #0
 8000fee:	eba6 0807 	sub.w	r8, r6, r7
 8000ff2:	608b      	str	r3, [r1, #8]
 8000ff4:	f1b8 0f00 	cmp.w	r8, #0
 8000ff8:	dde9      	ble.n	8000fce <__sflush_r+0xae>
 8000ffa:	6a21      	ldr	r1, [r4, #32]
 8000ffc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000ffe:	4643      	mov	r3, r8
 8001000:	463a      	mov	r2, r7
 8001002:	4628      	mov	r0, r5
 8001004:	47b0      	blx	r6
 8001006:	2800      	cmp	r0, #0
 8001008:	dc08      	bgt.n	800101c <__sflush_r+0xfc>
 800100a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800100e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001012:	81a3      	strh	r3, [r4, #12]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800101c:	4407      	add	r7, r0
 800101e:	eba8 0800 	sub.w	r8, r8, r0
 8001022:	e7e7      	b.n	8000ff4 <__sflush_r+0xd4>
 8001024:	20400001 	.word	0x20400001

08001028 <_fflush_r>:
 8001028:	b538      	push	{r3, r4, r5, lr}
 800102a:	690b      	ldr	r3, [r1, #16]
 800102c:	4605      	mov	r5, r0
 800102e:	460c      	mov	r4, r1
 8001030:	b913      	cbnz	r3, 8001038 <_fflush_r+0x10>
 8001032:	2500      	movs	r5, #0
 8001034:	4628      	mov	r0, r5
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	b118      	cbz	r0, 8001042 <_fflush_r+0x1a>
 800103a:	6a03      	ldr	r3, [r0, #32]
 800103c:	b90b      	cbnz	r3, 8001042 <_fflush_r+0x1a>
 800103e:	f7ff fb83 	bl	8000748 <__sinit>
 8001042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f3      	beq.n	8001032 <_fflush_r+0xa>
 800104a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800104c:	07d0      	lsls	r0, r2, #31
 800104e:	d404      	bmi.n	800105a <_fflush_r+0x32>
 8001050:	0599      	lsls	r1, r3, #22
 8001052:	d402      	bmi.n	800105a <_fflush_r+0x32>
 8001054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001056:	f7ff fbf2 	bl	800083e <__retarget_lock_acquire_recursive>
 800105a:	4628      	mov	r0, r5
 800105c:	4621      	mov	r1, r4
 800105e:	f7ff ff5f 	bl	8000f20 <__sflush_r>
 8001062:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001064:	07da      	lsls	r2, r3, #31
 8001066:	4605      	mov	r5, r0
 8001068:	d4e4      	bmi.n	8001034 <_fflush_r+0xc>
 800106a:	89a3      	ldrh	r3, [r4, #12]
 800106c:	059b      	lsls	r3, r3, #22
 800106e:	d4e1      	bmi.n	8001034 <_fflush_r+0xc>
 8001070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001072:	f7ff fbe5 	bl	8000840 <__retarget_lock_release_recursive>
 8001076:	e7dd      	b.n	8001034 <_fflush_r+0xc>

08001078 <__malloc_lock>:
 8001078:	4801      	ldr	r0, [pc, #4]	@ (8001080 <__malloc_lock+0x8>)
 800107a:	f7ff bbe0 	b.w	800083e <__retarget_lock_acquire_recursive>
 800107e:	bf00      	nop
 8001080:	200001bc 	.word	0x200001bc

08001084 <__malloc_unlock>:
 8001084:	4801      	ldr	r0, [pc, #4]	@ (800108c <__malloc_unlock+0x8>)
 8001086:	f7ff bbdb 	b.w	8000840 <__retarget_lock_release_recursive>
 800108a:	bf00      	nop
 800108c:	200001bc 	.word	0x200001bc

08001090 <__sread>:
 8001090:	b510      	push	{r4, lr}
 8001092:	460c      	mov	r4, r1
 8001094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001098:	f000 f956 	bl	8001348 <_read_r>
 800109c:	2800      	cmp	r0, #0
 800109e:	bfab      	itete	ge
 80010a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80010a2:	89a3      	ldrhlt	r3, [r4, #12]
 80010a4:	181b      	addge	r3, r3, r0
 80010a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80010aa:	bfac      	ite	ge
 80010ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80010ae:	81a3      	strhlt	r3, [r4, #12]
 80010b0:	bd10      	pop	{r4, pc}

080010b2 <__swrite>:
 80010b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010b6:	461f      	mov	r7, r3
 80010b8:	898b      	ldrh	r3, [r1, #12]
 80010ba:	05db      	lsls	r3, r3, #23
 80010bc:	4605      	mov	r5, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	4616      	mov	r6, r2
 80010c2:	d505      	bpl.n	80010d0 <__swrite+0x1e>
 80010c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010c8:	2302      	movs	r3, #2
 80010ca:	2200      	movs	r2, #0
 80010cc:	f000 f92a 	bl	8001324 <_lseek_r>
 80010d0:	89a3      	ldrh	r3, [r4, #12]
 80010d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010da:	81a3      	strh	r3, [r4, #12]
 80010dc:	4632      	mov	r2, r6
 80010de:	463b      	mov	r3, r7
 80010e0:	4628      	mov	r0, r5
 80010e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010e6:	f000 b951 	b.w	800138c <_write_r>

080010ea <__sseek>:
 80010ea:	b510      	push	{r4, lr}
 80010ec:	460c      	mov	r4, r1
 80010ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010f2:	f000 f917 	bl	8001324 <_lseek_r>
 80010f6:	1c43      	adds	r3, r0, #1
 80010f8:	89a3      	ldrh	r3, [r4, #12]
 80010fa:	bf15      	itete	ne
 80010fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001106:	81a3      	strheq	r3, [r4, #12]
 8001108:	bf18      	it	ne
 800110a:	81a3      	strhne	r3, [r4, #12]
 800110c:	bd10      	pop	{r4, pc}

0800110e <__sclose>:
 800110e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001112:	f000 b94d 	b.w	80013b0 <_close_r>

08001116 <__swbuf_r>:
 8001116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001118:	460e      	mov	r6, r1
 800111a:	4614      	mov	r4, r2
 800111c:	4605      	mov	r5, r0
 800111e:	b118      	cbz	r0, 8001128 <__swbuf_r+0x12>
 8001120:	6a03      	ldr	r3, [r0, #32]
 8001122:	b90b      	cbnz	r3, 8001128 <__swbuf_r+0x12>
 8001124:	f7ff fb10 	bl	8000748 <__sinit>
 8001128:	69a3      	ldr	r3, [r4, #24]
 800112a:	60a3      	str	r3, [r4, #8]
 800112c:	89a3      	ldrh	r3, [r4, #12]
 800112e:	071a      	lsls	r2, r3, #28
 8001130:	d501      	bpl.n	8001136 <__swbuf_r+0x20>
 8001132:	6923      	ldr	r3, [r4, #16]
 8001134:	b943      	cbnz	r3, 8001148 <__swbuf_r+0x32>
 8001136:	4621      	mov	r1, r4
 8001138:	4628      	mov	r0, r5
 800113a:	f000 f82b 	bl	8001194 <__swsetup_r>
 800113e:	b118      	cbz	r0, 8001148 <__swbuf_r+0x32>
 8001140:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001144:	4638      	mov	r0, r7
 8001146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	6922      	ldr	r2, [r4, #16]
 800114c:	1a98      	subs	r0, r3, r2
 800114e:	6963      	ldr	r3, [r4, #20]
 8001150:	b2f6      	uxtb	r6, r6
 8001152:	4283      	cmp	r3, r0
 8001154:	4637      	mov	r7, r6
 8001156:	dc05      	bgt.n	8001164 <__swbuf_r+0x4e>
 8001158:	4621      	mov	r1, r4
 800115a:	4628      	mov	r0, r5
 800115c:	f7ff ff64 	bl	8001028 <_fflush_r>
 8001160:	2800      	cmp	r0, #0
 8001162:	d1ed      	bne.n	8001140 <__swbuf_r+0x2a>
 8001164:	68a3      	ldr	r3, [r4, #8]
 8001166:	3b01      	subs	r3, #1
 8001168:	60a3      	str	r3, [r4, #8]
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	6022      	str	r2, [r4, #0]
 8001170:	701e      	strb	r6, [r3, #0]
 8001172:	6962      	ldr	r2, [r4, #20]
 8001174:	1c43      	adds	r3, r0, #1
 8001176:	429a      	cmp	r2, r3
 8001178:	d004      	beq.n	8001184 <__swbuf_r+0x6e>
 800117a:	89a3      	ldrh	r3, [r4, #12]
 800117c:	07db      	lsls	r3, r3, #31
 800117e:	d5e1      	bpl.n	8001144 <__swbuf_r+0x2e>
 8001180:	2e0a      	cmp	r6, #10
 8001182:	d1df      	bne.n	8001144 <__swbuf_r+0x2e>
 8001184:	4621      	mov	r1, r4
 8001186:	4628      	mov	r0, r5
 8001188:	f7ff ff4e 	bl	8001028 <_fflush_r>
 800118c:	2800      	cmp	r0, #0
 800118e:	d0d9      	beq.n	8001144 <__swbuf_r+0x2e>
 8001190:	e7d6      	b.n	8001140 <__swbuf_r+0x2a>
	...

08001194 <__swsetup_r>:
 8001194:	b538      	push	{r3, r4, r5, lr}
 8001196:	4b29      	ldr	r3, [pc, #164]	@ (800123c <__swsetup_r+0xa8>)
 8001198:	4605      	mov	r5, r0
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	460c      	mov	r4, r1
 800119e:	b118      	cbz	r0, 80011a8 <__swsetup_r+0x14>
 80011a0:	6a03      	ldr	r3, [r0, #32]
 80011a2:	b90b      	cbnz	r3, 80011a8 <__swsetup_r+0x14>
 80011a4:	f7ff fad0 	bl	8000748 <__sinit>
 80011a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ac:	0719      	lsls	r1, r3, #28
 80011ae:	d422      	bmi.n	80011f6 <__swsetup_r+0x62>
 80011b0:	06da      	lsls	r2, r3, #27
 80011b2:	d407      	bmi.n	80011c4 <__swsetup_r+0x30>
 80011b4:	2209      	movs	r2, #9
 80011b6:	602a      	str	r2, [r5, #0]
 80011b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011bc:	81a3      	strh	r3, [r4, #12]
 80011be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011c2:	e033      	b.n	800122c <__swsetup_r+0x98>
 80011c4:	0758      	lsls	r0, r3, #29
 80011c6:	d512      	bpl.n	80011ee <__swsetup_r+0x5a>
 80011c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011ca:	b141      	cbz	r1, 80011de <__swsetup_r+0x4a>
 80011cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011d0:	4299      	cmp	r1, r3
 80011d2:	d002      	beq.n	80011da <__swsetup_r+0x46>
 80011d4:	4628      	mov	r0, r5
 80011d6:	f000 f90d 	bl	80013f4 <_free_r>
 80011da:	2300      	movs	r3, #0
 80011dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80011de:	89a3      	ldrh	r3, [r4, #12]
 80011e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80011e4:	81a3      	strh	r3, [r4, #12]
 80011e6:	2300      	movs	r3, #0
 80011e8:	6063      	str	r3, [r4, #4]
 80011ea:	6923      	ldr	r3, [r4, #16]
 80011ec:	6023      	str	r3, [r4, #0]
 80011ee:	89a3      	ldrh	r3, [r4, #12]
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	81a3      	strh	r3, [r4, #12]
 80011f6:	6923      	ldr	r3, [r4, #16]
 80011f8:	b94b      	cbnz	r3, 800120e <__swsetup_r+0x7a>
 80011fa:	89a3      	ldrh	r3, [r4, #12]
 80011fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001204:	d003      	beq.n	800120e <__swsetup_r+0x7a>
 8001206:	4621      	mov	r1, r4
 8001208:	4628      	mov	r0, r5
 800120a:	f000 f83f 	bl	800128c <__smakebuf_r>
 800120e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001212:	f013 0201 	ands.w	r2, r3, #1
 8001216:	d00a      	beq.n	800122e <__swsetup_r+0x9a>
 8001218:	2200      	movs	r2, #0
 800121a:	60a2      	str	r2, [r4, #8]
 800121c:	6962      	ldr	r2, [r4, #20]
 800121e:	4252      	negs	r2, r2
 8001220:	61a2      	str	r2, [r4, #24]
 8001222:	6922      	ldr	r2, [r4, #16]
 8001224:	b942      	cbnz	r2, 8001238 <__swsetup_r+0xa4>
 8001226:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800122a:	d1c5      	bne.n	80011b8 <__swsetup_r+0x24>
 800122c:	bd38      	pop	{r3, r4, r5, pc}
 800122e:	0799      	lsls	r1, r3, #30
 8001230:	bf58      	it	pl
 8001232:	6962      	ldrpl	r2, [r4, #20]
 8001234:	60a2      	str	r2, [r4, #8]
 8001236:	e7f4      	b.n	8001222 <__swsetup_r+0x8e>
 8001238:	2000      	movs	r0, #0
 800123a:	e7f7      	b.n	800122c <__swsetup_r+0x98>
 800123c:	2000000c 	.word	0x2000000c

08001240 <__swhatbuf_r>:
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	460c      	mov	r4, r1
 8001244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001248:	2900      	cmp	r1, #0
 800124a:	b096      	sub	sp, #88	@ 0x58
 800124c:	4615      	mov	r5, r2
 800124e:	461e      	mov	r6, r3
 8001250:	da0d      	bge.n	800126e <__swhatbuf_r+0x2e>
 8001252:	89a3      	ldrh	r3, [r4, #12]
 8001254:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001258:	f04f 0100 	mov.w	r1, #0
 800125c:	bf14      	ite	ne
 800125e:	2340      	movne	r3, #64	@ 0x40
 8001260:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001264:	2000      	movs	r0, #0
 8001266:	6031      	str	r1, [r6, #0]
 8001268:	602b      	str	r3, [r5, #0]
 800126a:	b016      	add	sp, #88	@ 0x58
 800126c:	bd70      	pop	{r4, r5, r6, pc}
 800126e:	466a      	mov	r2, sp
 8001270:	f000 f8ae 	bl	80013d0 <_fstat_r>
 8001274:	2800      	cmp	r0, #0
 8001276:	dbec      	blt.n	8001252 <__swhatbuf_r+0x12>
 8001278:	9901      	ldr	r1, [sp, #4]
 800127a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800127e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001282:	4259      	negs	r1, r3
 8001284:	4159      	adcs	r1, r3
 8001286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128a:	e7eb      	b.n	8001264 <__swhatbuf_r+0x24>

0800128c <__smakebuf_r>:
 800128c:	898b      	ldrh	r3, [r1, #12]
 800128e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001290:	079d      	lsls	r5, r3, #30
 8001292:	4606      	mov	r6, r0
 8001294:	460c      	mov	r4, r1
 8001296:	d507      	bpl.n	80012a8 <__smakebuf_r+0x1c>
 8001298:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800129c:	6023      	str	r3, [r4, #0]
 800129e:	6123      	str	r3, [r4, #16]
 80012a0:	2301      	movs	r3, #1
 80012a2:	6163      	str	r3, [r4, #20]
 80012a4:	b003      	add	sp, #12
 80012a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a8:	ab01      	add	r3, sp, #4
 80012aa:	466a      	mov	r2, sp
 80012ac:	f7ff ffc8 	bl	8001240 <__swhatbuf_r>
 80012b0:	9f00      	ldr	r7, [sp, #0]
 80012b2:	4605      	mov	r5, r0
 80012b4:	4639      	mov	r1, r7
 80012b6:	4630      	mov	r0, r6
 80012b8:	f7ff fc26 	bl	8000b08 <_malloc_r>
 80012bc:	b948      	cbnz	r0, 80012d2 <__smakebuf_r+0x46>
 80012be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c2:	059a      	lsls	r2, r3, #22
 80012c4:	d4ee      	bmi.n	80012a4 <__smakebuf_r+0x18>
 80012c6:	f023 0303 	bic.w	r3, r3, #3
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	81a3      	strh	r3, [r4, #12]
 80012d0:	e7e2      	b.n	8001298 <__smakebuf_r+0xc>
 80012d2:	89a3      	ldrh	r3, [r4, #12]
 80012d4:	6020      	str	r0, [r4, #0]
 80012d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012da:	81a3      	strh	r3, [r4, #12]
 80012dc:	9b01      	ldr	r3, [sp, #4]
 80012de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80012e2:	b15b      	cbz	r3, 80012fc <__smakebuf_r+0x70>
 80012e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012e8:	4630      	mov	r0, r6
 80012ea:	f000 f80b 	bl	8001304 <_isatty_r>
 80012ee:	b128      	cbz	r0, 80012fc <__smakebuf_r+0x70>
 80012f0:	89a3      	ldrh	r3, [r4, #12]
 80012f2:	f023 0303 	bic.w	r3, r3, #3
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	81a3      	strh	r3, [r4, #12]
 80012fc:	89a3      	ldrh	r3, [r4, #12]
 80012fe:	431d      	orrs	r5, r3
 8001300:	81a5      	strh	r5, [r4, #12]
 8001302:	e7cf      	b.n	80012a4 <__smakebuf_r+0x18>

08001304 <_isatty_r>:
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	4d06      	ldr	r5, [pc, #24]	@ (8001320 <_isatty_r+0x1c>)
 8001308:	2300      	movs	r3, #0
 800130a:	4604      	mov	r4, r0
 800130c:	4608      	mov	r0, r1
 800130e:	602b      	str	r3, [r5, #0]
 8001310:	f7ff f87f 	bl	8000412 <_isatty>
 8001314:	1c43      	adds	r3, r0, #1
 8001316:	d102      	bne.n	800131e <_isatty_r+0x1a>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	b103      	cbz	r3, 800131e <_isatty_r+0x1a>
 800131c:	6023      	str	r3, [r4, #0]
 800131e:	bd38      	pop	{r3, r4, r5, pc}
 8001320:	200001c8 	.word	0x200001c8

08001324 <_lseek_r>:
 8001324:	b538      	push	{r3, r4, r5, lr}
 8001326:	4d07      	ldr	r5, [pc, #28]	@ (8001344 <_lseek_r+0x20>)
 8001328:	4604      	mov	r4, r0
 800132a:	4608      	mov	r0, r1
 800132c:	4611      	mov	r1, r2
 800132e:	2200      	movs	r2, #0
 8001330:	602a      	str	r2, [r5, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	f7ff f878 	bl	8000428 <_lseek>
 8001338:	1c43      	adds	r3, r0, #1
 800133a:	d102      	bne.n	8001342 <_lseek_r+0x1e>
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	b103      	cbz	r3, 8001342 <_lseek_r+0x1e>
 8001340:	6023      	str	r3, [r4, #0]
 8001342:	bd38      	pop	{r3, r4, r5, pc}
 8001344:	200001c8 	.word	0x200001c8

08001348 <_read_r>:
 8001348:	b538      	push	{r3, r4, r5, lr}
 800134a:	4d07      	ldr	r5, [pc, #28]	@ (8001368 <_read_r+0x20>)
 800134c:	4604      	mov	r4, r0
 800134e:	4608      	mov	r0, r1
 8001350:	4611      	mov	r1, r2
 8001352:	2200      	movs	r2, #0
 8001354:	602a      	str	r2, [r5, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	f7ff f806 	bl	8000368 <_read>
 800135c:	1c43      	adds	r3, r0, #1
 800135e:	d102      	bne.n	8001366 <_read_r+0x1e>
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	b103      	cbz	r3, 8001366 <_read_r+0x1e>
 8001364:	6023      	str	r3, [r4, #0]
 8001366:	bd38      	pop	{r3, r4, r5, pc}
 8001368:	200001c8 	.word	0x200001c8

0800136c <_sbrk_r>:
 800136c:	b538      	push	{r3, r4, r5, lr}
 800136e:	4d06      	ldr	r5, [pc, #24]	@ (8001388 <_sbrk_r+0x1c>)
 8001370:	2300      	movs	r3, #0
 8001372:	4604      	mov	r4, r0
 8001374:	4608      	mov	r0, r1
 8001376:	602b      	str	r3, [r5, #0]
 8001378:	f7ff f864 	bl	8000444 <_sbrk>
 800137c:	1c43      	adds	r3, r0, #1
 800137e:	d102      	bne.n	8001386 <_sbrk_r+0x1a>
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	b103      	cbz	r3, 8001386 <_sbrk_r+0x1a>
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	bd38      	pop	{r3, r4, r5, pc}
 8001388:	200001c8 	.word	0x200001c8

0800138c <_write_r>:
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	4d07      	ldr	r5, [pc, #28]	@ (80013ac <_write_r+0x20>)
 8001390:	4604      	mov	r4, r0
 8001392:	4608      	mov	r0, r1
 8001394:	4611      	mov	r1, r2
 8001396:	2200      	movs	r2, #0
 8001398:	602a      	str	r2, [r5, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	f7ff f801 	bl	80003a2 <_write>
 80013a0:	1c43      	adds	r3, r0, #1
 80013a2:	d102      	bne.n	80013aa <_write_r+0x1e>
 80013a4:	682b      	ldr	r3, [r5, #0]
 80013a6:	b103      	cbz	r3, 80013aa <_write_r+0x1e>
 80013a8:	6023      	str	r3, [r4, #0]
 80013aa:	bd38      	pop	{r3, r4, r5, pc}
 80013ac:	200001c8 	.word	0x200001c8

080013b0 <_close_r>:
 80013b0:	b538      	push	{r3, r4, r5, lr}
 80013b2:	4d06      	ldr	r5, [pc, #24]	@ (80013cc <_close_r+0x1c>)
 80013b4:	2300      	movs	r3, #0
 80013b6:	4604      	mov	r4, r0
 80013b8:	4608      	mov	r0, r1
 80013ba:	602b      	str	r3, [r5, #0]
 80013bc:	f7ff f80d 	bl	80003da <_close>
 80013c0:	1c43      	adds	r3, r0, #1
 80013c2:	d102      	bne.n	80013ca <_close_r+0x1a>
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	b103      	cbz	r3, 80013ca <_close_r+0x1a>
 80013c8:	6023      	str	r3, [r4, #0]
 80013ca:	bd38      	pop	{r3, r4, r5, pc}
 80013cc:	200001c8 	.word	0x200001c8

080013d0 <_fstat_r>:
 80013d0:	b538      	push	{r3, r4, r5, lr}
 80013d2:	4d07      	ldr	r5, [pc, #28]	@ (80013f0 <_fstat_r+0x20>)
 80013d4:	2300      	movs	r3, #0
 80013d6:	4604      	mov	r4, r0
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	602b      	str	r3, [r5, #0]
 80013de:	f7ff f808 	bl	80003f2 <_fstat>
 80013e2:	1c43      	adds	r3, r0, #1
 80013e4:	d102      	bne.n	80013ec <_fstat_r+0x1c>
 80013e6:	682b      	ldr	r3, [r5, #0]
 80013e8:	b103      	cbz	r3, 80013ec <_fstat_r+0x1c>
 80013ea:	6023      	str	r3, [r4, #0]
 80013ec:	bd38      	pop	{r3, r4, r5, pc}
 80013ee:	bf00      	nop
 80013f0:	200001c8 	.word	0x200001c8

080013f4 <_free_r>:
 80013f4:	b538      	push	{r3, r4, r5, lr}
 80013f6:	4605      	mov	r5, r0
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d041      	beq.n	8001480 <_free_r+0x8c>
 80013fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001400:	1f0c      	subs	r4, r1, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	bfb8      	it	lt
 8001406:	18e4      	addlt	r4, r4, r3
 8001408:	f7ff fe36 	bl	8001078 <__malloc_lock>
 800140c:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <_free_r+0x90>)
 800140e:	6813      	ldr	r3, [r2, #0]
 8001410:	b933      	cbnz	r3, 8001420 <_free_r+0x2c>
 8001412:	6063      	str	r3, [r4, #4]
 8001414:	6014      	str	r4, [r2, #0]
 8001416:	4628      	mov	r0, r5
 8001418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800141c:	f7ff be32 	b.w	8001084 <__malloc_unlock>
 8001420:	42a3      	cmp	r3, r4
 8001422:	d908      	bls.n	8001436 <_free_r+0x42>
 8001424:	6820      	ldr	r0, [r4, #0]
 8001426:	1821      	adds	r1, r4, r0
 8001428:	428b      	cmp	r3, r1
 800142a:	bf01      	itttt	eq
 800142c:	6819      	ldreq	r1, [r3, #0]
 800142e:	685b      	ldreq	r3, [r3, #4]
 8001430:	1809      	addeq	r1, r1, r0
 8001432:	6021      	streq	r1, [r4, #0]
 8001434:	e7ed      	b.n	8001412 <_free_r+0x1e>
 8001436:	461a      	mov	r2, r3
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	b10b      	cbz	r3, 8001440 <_free_r+0x4c>
 800143c:	42a3      	cmp	r3, r4
 800143e:	d9fa      	bls.n	8001436 <_free_r+0x42>
 8001440:	6811      	ldr	r1, [r2, #0]
 8001442:	1850      	adds	r0, r2, r1
 8001444:	42a0      	cmp	r0, r4
 8001446:	d10b      	bne.n	8001460 <_free_r+0x6c>
 8001448:	6820      	ldr	r0, [r4, #0]
 800144a:	4401      	add	r1, r0
 800144c:	1850      	adds	r0, r2, r1
 800144e:	4283      	cmp	r3, r0
 8001450:	6011      	str	r1, [r2, #0]
 8001452:	d1e0      	bne.n	8001416 <_free_r+0x22>
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	6053      	str	r3, [r2, #4]
 800145a:	4408      	add	r0, r1
 800145c:	6010      	str	r0, [r2, #0]
 800145e:	e7da      	b.n	8001416 <_free_r+0x22>
 8001460:	d902      	bls.n	8001468 <_free_r+0x74>
 8001462:	230c      	movs	r3, #12
 8001464:	602b      	str	r3, [r5, #0]
 8001466:	e7d6      	b.n	8001416 <_free_r+0x22>
 8001468:	6820      	ldr	r0, [r4, #0]
 800146a:	1821      	adds	r1, r4, r0
 800146c:	428b      	cmp	r3, r1
 800146e:	bf04      	itt	eq
 8001470:	6819      	ldreq	r1, [r3, #0]
 8001472:	685b      	ldreq	r3, [r3, #4]
 8001474:	6063      	str	r3, [r4, #4]
 8001476:	bf04      	itt	eq
 8001478:	1809      	addeq	r1, r1, r0
 800147a:	6021      	streq	r1, [r4, #0]
 800147c:	6054      	str	r4, [r2, #4]
 800147e:	e7ca      	b.n	8001416 <_free_r+0x22>
 8001480:	bd38      	pop	{r3, r4, r5, pc}
 8001482:	bf00      	nop
 8001484:	200001c4 	.word	0x200001c4

08001488 <_init>:
 8001488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800148a:	bf00      	nop
 800148c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800148e:	bc08      	pop	{r3}
 8001490:	469e      	mov	lr, r3
 8001492:	4770      	bx	lr

08001494 <_fini>:
 8001494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001496:	bf00      	nop
 8001498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800149a:	bc08      	pop	{r3}
 800149c:	469e      	mov	lr, r3
 800149e:	4770      	bx	lr
