
9_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001494  08001494  00002494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014dc  080014dc  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080014dc  080014dc  000024dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080014e4  080014e4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014e4  080014e4  000024e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014e8  080014e8  000024e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080014ec  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001548  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001548  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000119e  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005d9  00000000  00000000  0000422a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00004808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000110  00000000  00000000  00004998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd17  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020f2  00000000  00000000  000147bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055c11  00000000  00000000  000168b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006c4c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c50  00000000  00000000  0006c508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0006d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800147c 	.word	0x0800147c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800147c 	.word	0x0800147c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_init>:
#define CR2_ADON		(1U<<0)
#define CR2_SWSTART 	(1U<<30)
#define SR_EOC			(1U<<1)


void pa1_adc_init(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

	// Configure the ADC GPIO pin
	// enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <pa1_adc_init+0x58>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a13      	ldr	r2, [pc, #76]	@ (80002d8 <pa1_adc_init+0x58>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30

	// set the mode of pa1 to analog mode
	GPIOA->MODER |= (1U<<2);
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <pa1_adc_init+0x5c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <pa1_adc_init+0x5c>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <pa1_adc_init+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <pa1_adc_init+0x5c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]

	// configure the ADC module
	// enable clock access to adc
	RCC->APB2ENR |= ADC1EN;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <pa1_adc_init+0x58>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <pa1_adc_init+0x58>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002b2:	6453      	str	r3, [r2, #68]	@ 0x44

	// Configure ADC parameters
	// conversion sequence start
	ADC1->SQR3 = ADC_CH1;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <pa1_adc_init+0x60>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	635a      	str	r2, [r3, #52]	@ 0x34

	// conversion sequence length
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002ba:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <pa1_adc_init+0x60>)
 80002bc:	2200      	movs	r2, #0
 80002be:	62da      	str	r2, [r3, #44]	@ 0x2c

	// enable ADC module
	ADC1->CR2 |= CR2_ADON;
 80002c0:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a06      	ldr	r2, [pc, #24]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6093      	str	r3, [r2, #8]


}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40012000 	.word	0x40012000

080002e4 <start_conversion>:

void start_conversion(void) {
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0

	// start adc conversion
	ADC1->CR2 |= CR2_SWSTART;
 80002e8:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <start_conversion+0x1c>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <start_conversion+0x1c>)
 80002ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002f2:	6093      	str	r3, [r2, #8]

}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40012000 	.word	0x40012000

08000304 <adc_read>:

uint32_t adc_read(void) {
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	// wait for conversion to be complete
	while(!(ADC1->SR & SR_EOC)) {} // wait until complete flag is set
 8000308:	bf00      	nop
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <adc_read+0x20>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f003 0302 	and.w	r3, r3, #2
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0f9      	beq.n	800030a <adc_read+0x6>

	// read converted result
	return (ADC1->DR);
 8000316:	4b03      	ldr	r3, [pc, #12]	@ (8000324 <adc_read+0x20>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800031a:	4618      	mov	r0, r3
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	40012000 	.word	0x40012000

08000328 <main>:
#include "uart.h"
#include "adc.h"

volatile uint32_t sensor_value;

int main(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

	uart2_tx_init();
 800032c:	f000 f8ba 	bl	80004a4 <uart2_tx_init>
	pa1_adc_init();
 8000330:	f7ff ffa6 	bl	8000280 <pa1_adc_init>


	while(1) {
		start_conversion();
 8000334:	f7ff ffd6 	bl	80002e4 <start_conversion>
		sensor_value = adc_read();
 8000338:	f7ff ffe4 	bl	8000304 <adc_read>
 800033c:	4603      	mov	r3, r0
 800033e:	4a05      	ldr	r2, [pc, #20]	@ (8000354 <main+0x2c>)
 8000340:	6013      	str	r3, [r2, #0]
		printf("Sensor value: %d \n\r", (int)sensor_value);
 8000342:	4b04      	ldr	r3, [pc, #16]	@ (8000354 <main+0x2c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4619      	mov	r1, r3
 8000348:	4803      	ldr	r0, [pc, #12]	@ (8000358 <main+0x30>)
 800034a:	f000 fa2d 	bl	80007a8 <iprintf>
		start_conversion();
 800034e:	bf00      	nop
 8000350:	e7f0      	b.n	8000334 <main+0xc>
 8000352:	bf00      	nop
 8000354:	20000078 	.word	0x20000078
 8000358:	08001494 	.word	0x08001494

0800035c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	e00a      	b.n	8000384 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800036e:	f3af 8000 	nop.w
 8000372:	4601      	mov	r1, r0
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	b2ca      	uxtb	r2, r1
 800037c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3301      	adds	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	429a      	cmp	r2, r3
 800038a:	dbf0      	blt.n	800036e <_read+0x12>
  }

  return len;
 800038c:	687b      	ldr	r3, [r7, #4]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b086      	sub	sp, #24
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	e009      	b.n	80003bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	60ba      	str	r2, [r7, #8]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f8c3 	bl	800053c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	dbf1      	blt.n	80003a8 <_write+0x12>
  }
  return len;
 80003c4:	687b      	ldr	r3, [r7, #4]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <_close>:

int _close(int file)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003f6:	605a      	str	r2, [r3, #4]
  return 0;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <_isatty>:

int _isatty(int file)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800040e:	2301      	movs	r3, #1
}
 8000410:	4618      	mov	r0, r3
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000428:	2300      	movs	r3, #0
}
 800042a:	4618      	mov	r0, r3
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
	...

08000438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000440:	4a14      	ldr	r2, [pc, #80]	@ (8000494 <_sbrk+0x5c>)
 8000442:	4b15      	ldr	r3, [pc, #84]	@ (8000498 <_sbrk+0x60>)
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800044c:	4b13      	ldr	r3, [pc, #76]	@ (800049c <_sbrk+0x64>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d102      	bne.n	800045a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000454:	4b11      	ldr	r3, [pc, #68]	@ (800049c <_sbrk+0x64>)
 8000456:	4a12      	ldr	r2, [pc, #72]	@ (80004a0 <_sbrk+0x68>)
 8000458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800045a:	4b10      	ldr	r3, [pc, #64]	@ (800049c <_sbrk+0x64>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	693a      	ldr	r2, [r7, #16]
 8000464:	429a      	cmp	r2, r3
 8000466:	d207      	bcs.n	8000478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000468:	f000 f9b8 	bl	80007dc <__errno>
 800046c:	4603      	mov	r3, r0
 800046e:	220c      	movs	r2, #12
 8000470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000476:	e009      	b.n	800048c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <_sbrk+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800047e:	4b07      	ldr	r3, [pc, #28]	@ (800049c <_sbrk+0x64>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	4a05      	ldr	r2, [pc, #20]	@ (800049c <_sbrk+0x64>)
 8000488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800048a:	68fb      	ldr	r3, [r7, #12]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20020000 	.word	0x20020000
 8000498:	00000400 	.word	0x00000400
 800049c:	2000007c 	.word	0x2000007c
 80004a0:	200001d0 	.word	0x200001d0

080004a4 <uart2_tx_init>:

		// enable the uart module
		USART2->CR1 |= CR1_UE;
}

void uart2_tx_init(void) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0

	// configure the uart gpio pin
		// enable clock access to gpioa
		RCC->AHB1ENR |= GPIOAEN;
 80004a8:	4b20      	ldr	r3, [pc, #128]	@ (800052c <uart2_tx_init+0x88>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ac:	4a1f      	ldr	r2, [pc, #124]	@ (800052c <uart2_tx_init+0x88>)
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6313      	str	r3, [r2, #48]	@ 0x30

		// set PA2 mode to alternate function mode
		GPIOA->MODER &= ~(1U<<4);
 80004b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000530 <uart2_tx_init+0x8c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000530 <uart2_tx_init+0x8c>)
 80004ba:	f023 0310 	bic.w	r3, r3, #16
 80004be:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (1U<<5);
 80004c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000530 <uart2_tx_init+0x8c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000530 <uart2_tx_init+0x8c>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6013      	str	r3, [r2, #0]

		// set PA2 alternate function type to UART_TX (AF07)
		GPIOA->AFR[0] |= (1U<<8);
 80004cc:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <uart2_tx_init+0x8c>)
 80004ce:	6a1b      	ldr	r3, [r3, #32]
 80004d0:	4a17      	ldr	r2, [pc, #92]	@ (8000530 <uart2_tx_init+0x8c>)
 80004d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004d6:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<9);
 80004d8:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <uart2_tx_init+0x8c>)
 80004da:	6a1b      	ldr	r3, [r3, #32]
 80004dc:	4a14      	ldr	r2, [pc, #80]	@ (8000530 <uart2_tx_init+0x8c>)
 80004de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004e2:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<10);
 80004e4:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <uart2_tx_init+0x8c>)
 80004e6:	6a1b      	ldr	r3, [r3, #32]
 80004e8:	4a11      	ldr	r2, [pc, #68]	@ (8000530 <uart2_tx_init+0x8c>)
 80004ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004ee:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<11);
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <uart2_tx_init+0x8c>)
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <uart2_tx_init+0x8c>)
 80004f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80004fa:	6213      	str	r3, [r2, #32]


		// configure uart module
		// enable clock access to uart2
		RCC->APB1ENR |= UART2EN;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <uart2_tx_init+0x88>)
 80004fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000500:	4a0a      	ldr	r2, [pc, #40]	@ (800052c <uart2_tx_init+0x88>)
 8000502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000506:	6413      	str	r3, [r2, #64]	@ 0x40

		// configure baudrate
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000508:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800050c:	4909      	ldr	r1, [pc, #36]	@ (8000534 <uart2_tx_init+0x90>)
 800050e:	480a      	ldr	r0, [pc, #40]	@ (8000538 <uart2_tx_init+0x94>)
 8000510:	f000 f838 	bl	8000584 <uart_set_baudrate>

		// configure the transfer direction
		USART2->CR1 = CR1_TE;
 8000514:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <uart2_tx_init+0x94>)
 8000516:	2208      	movs	r2, #8
 8000518:	60da      	str	r2, [r3, #12]

		// enable the uart module
		USART2->CR1 |= CR1_UE;
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <uart2_tx_init+0x94>)
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	4a06      	ldr	r2, [pc, #24]	@ (8000538 <uart2_tx_init+0x94>)
 8000520:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000524:	60d3      	str	r3, [r2, #12]
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800
 8000530:	40020000 	.word	0x40020000
 8000534:	00f42400 	.word	0x00f42400
 8000538:	40004400 	.word	0x40004400

0800053c <__io_putchar>:

int __io_putchar(int ch) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f805 	bl	8000554 <uart2_write>
	return ch;
 800054a:	687b      	ldr	r3, [r7, #4]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <uart2_write>:
	return USART2->DR;

}


void uart2_write(int ch) {
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

	// make sure transmit data register is empty
	while(!(USART2->SR & SR_TXE)) {}
 800055c:	bf00      	nop
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <uart2_write+0x2c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f9      	beq.n	800055e <uart2_write+0xa>

	// write to transmit data register
	USART2->DR = (ch & 0xFF);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a04      	ldr	r2, [pc, #16]	@ (8000580 <uart2_write+0x2c>)
 800056e:	b2db      	uxtb	r3, r3
 8000570:	6053      	str	r3, [r2, #4]

}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40004400 	.word	0x40004400

08000584 <uart_set_baudrate>:


void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000590:	6879      	ldr	r1, [r7, #4]
 8000592:	68b8      	ldr	r0, [r7, #8]
 8000594:	f000 f808 	bl	80005a8 <compute_uart_bd>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	609a      	str	r2, [r3, #8]
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <compute_uart_bd>:

uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	085a      	lsrs	r2, r3, #1
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	441a      	add	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	@ (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	@ (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80005fe:	f000 f8f3 	bl	80007e8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000602:	f7ff fe91 	bl	8000328 <main>

08000606 <LoopForever>:

LoopForever:
  b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   r0, =_estack
 8000608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000614:	080014ec 	.word	0x080014ec
  ldr r2, =_sbss
 8000618:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800061c:	200001cc 	.word	0x200001cc

08000620 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC_IRQHandler>
	...

08000624 <std>:
 8000624:	2300      	movs	r3, #0
 8000626:	b510      	push	{r4, lr}
 8000628:	4604      	mov	r4, r0
 800062a:	e9c0 3300 	strd	r3, r3, [r0]
 800062e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000632:	6083      	str	r3, [r0, #8]
 8000634:	8181      	strh	r1, [r0, #12]
 8000636:	6643      	str	r3, [r0, #100]	@ 0x64
 8000638:	81c2      	strh	r2, [r0, #14]
 800063a:	6183      	str	r3, [r0, #24]
 800063c:	4619      	mov	r1, r3
 800063e:	2208      	movs	r2, #8
 8000640:	305c      	adds	r0, #92	@ 0x5c
 8000642:	f000 f8c3 	bl	80007cc <memset>
 8000646:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <std+0x58>)
 8000648:	6263      	str	r3, [r4, #36]	@ 0x24
 800064a:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <std+0x5c>)
 800064c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800064e:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <std+0x60>)
 8000650:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <std+0x64>)
 8000654:	6323      	str	r3, [r4, #48]	@ 0x30
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <std+0x68>)
 8000658:	6224      	str	r4, [r4, #32]
 800065a:	429c      	cmp	r4, r3
 800065c:	d006      	beq.n	800066c <std+0x48>
 800065e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000662:	4294      	cmp	r4, r2
 8000664:	d002      	beq.n	800066c <std+0x48>
 8000666:	33d0      	adds	r3, #208	@ 0xd0
 8000668:	429c      	cmp	r4, r3
 800066a:	d105      	bne.n	8000678 <std+0x54>
 800066c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000674:	f000 b8dc 	b.w	8000830 <__retarget_lock_init_recursive>
 8000678:	bd10      	pop	{r4, pc}
 800067a:	bf00      	nop
 800067c:	08001085 	.word	0x08001085
 8000680:	080010a7 	.word	0x080010a7
 8000684:	080010df 	.word	0x080010df
 8000688:	08001103 	.word	0x08001103
 800068c:	20000080 	.word	0x20000080

08000690 <stdio_exit_handler>:
 8000690:	4a02      	ldr	r2, [pc, #8]	@ (800069c <stdio_exit_handler+0xc>)
 8000692:	4903      	ldr	r1, [pc, #12]	@ (80006a0 <stdio_exit_handler+0x10>)
 8000694:	4803      	ldr	r0, [pc, #12]	@ (80006a4 <stdio_exit_handler+0x14>)
 8000696:	f000 b869 	b.w	800076c <_fwalk_sglue>
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000
 80006a0:	0800101d 	.word	0x0800101d
 80006a4:	20000010 	.word	0x20000010

080006a8 <cleanup_stdio>:
 80006a8:	6841      	ldr	r1, [r0, #4]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <cleanup_stdio+0x34>)
 80006ac:	4299      	cmp	r1, r3
 80006ae:	b510      	push	{r4, lr}
 80006b0:	4604      	mov	r4, r0
 80006b2:	d001      	beq.n	80006b8 <cleanup_stdio+0x10>
 80006b4:	f000 fcb2 	bl	800101c <_fflush_r>
 80006b8:	68a1      	ldr	r1, [r4, #8]
 80006ba:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <cleanup_stdio+0x38>)
 80006bc:	4299      	cmp	r1, r3
 80006be:	d002      	beq.n	80006c6 <cleanup_stdio+0x1e>
 80006c0:	4620      	mov	r0, r4
 80006c2:	f000 fcab 	bl	800101c <_fflush_r>
 80006c6:	68e1      	ldr	r1, [r4, #12]
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <cleanup_stdio+0x3c>)
 80006ca:	4299      	cmp	r1, r3
 80006cc:	d004      	beq.n	80006d8 <cleanup_stdio+0x30>
 80006ce:	4620      	mov	r0, r4
 80006d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d4:	f000 bca2 	b.w	800101c <_fflush_r>
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	bf00      	nop
 80006dc:	20000080 	.word	0x20000080
 80006e0:	200000e8 	.word	0x200000e8
 80006e4:	20000150 	.word	0x20000150

080006e8 <global_stdio_init.part.0>:
 80006e8:	b510      	push	{r4, lr}
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <global_stdio_init.part.0+0x30>)
 80006ec:	4c0b      	ldr	r4, [pc, #44]	@ (800071c <global_stdio_init.part.0+0x34>)
 80006ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000720 <global_stdio_init.part.0+0x38>)
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	4620      	mov	r0, r4
 80006f4:	2200      	movs	r2, #0
 80006f6:	2104      	movs	r1, #4
 80006f8:	f7ff ff94 	bl	8000624 <std>
 80006fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000700:	2201      	movs	r2, #1
 8000702:	2109      	movs	r1, #9
 8000704:	f7ff ff8e 	bl	8000624 <std>
 8000708:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800070c:	2202      	movs	r2, #2
 800070e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000712:	2112      	movs	r1, #18
 8000714:	f7ff bf86 	b.w	8000624 <std>
 8000718:	200001b8 	.word	0x200001b8
 800071c:	20000080 	.word	0x20000080
 8000720:	08000691 	.word	0x08000691

08000724 <__sfp_lock_acquire>:
 8000724:	4801      	ldr	r0, [pc, #4]	@ (800072c <__sfp_lock_acquire+0x8>)
 8000726:	f000 b884 	b.w	8000832 <__retarget_lock_acquire_recursive>
 800072a:	bf00      	nop
 800072c:	200001bd 	.word	0x200001bd

08000730 <__sfp_lock_release>:
 8000730:	4801      	ldr	r0, [pc, #4]	@ (8000738 <__sfp_lock_release+0x8>)
 8000732:	f000 b87f 	b.w	8000834 <__retarget_lock_release_recursive>
 8000736:	bf00      	nop
 8000738:	200001bd 	.word	0x200001bd

0800073c <__sinit>:
 800073c:	b510      	push	{r4, lr}
 800073e:	4604      	mov	r4, r0
 8000740:	f7ff fff0 	bl	8000724 <__sfp_lock_acquire>
 8000744:	6a23      	ldr	r3, [r4, #32]
 8000746:	b11b      	cbz	r3, 8000750 <__sinit+0x14>
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074c:	f7ff bff0 	b.w	8000730 <__sfp_lock_release>
 8000750:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <__sinit+0x28>)
 8000752:	6223      	str	r3, [r4, #32]
 8000754:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <__sinit+0x2c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f5      	bne.n	8000748 <__sinit+0xc>
 800075c:	f7ff ffc4 	bl	80006e8 <global_stdio_init.part.0>
 8000760:	e7f2      	b.n	8000748 <__sinit+0xc>
 8000762:	bf00      	nop
 8000764:	080006a9 	.word	0x080006a9
 8000768:	200001b8 	.word	0x200001b8

0800076c <_fwalk_sglue>:
 800076c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000770:	4607      	mov	r7, r0
 8000772:	4688      	mov	r8, r1
 8000774:	4614      	mov	r4, r2
 8000776:	2600      	movs	r6, #0
 8000778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800077c:	f1b9 0901 	subs.w	r9, r9, #1
 8000780:	d505      	bpl.n	800078e <_fwalk_sglue+0x22>
 8000782:	6824      	ldr	r4, [r4, #0]
 8000784:	2c00      	cmp	r4, #0
 8000786:	d1f7      	bne.n	8000778 <_fwalk_sglue+0xc>
 8000788:	4630      	mov	r0, r6
 800078a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800078e:	89ab      	ldrh	r3, [r5, #12]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d907      	bls.n	80007a4 <_fwalk_sglue+0x38>
 8000794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000798:	3301      	adds	r3, #1
 800079a:	d003      	beq.n	80007a4 <_fwalk_sglue+0x38>
 800079c:	4629      	mov	r1, r5
 800079e:	4638      	mov	r0, r7
 80007a0:	47c0      	blx	r8
 80007a2:	4306      	orrs	r6, r0
 80007a4:	3568      	adds	r5, #104	@ 0x68
 80007a6:	e7e9      	b.n	800077c <_fwalk_sglue+0x10>

080007a8 <iprintf>:
 80007a8:	b40f      	push	{r0, r1, r2, r3}
 80007aa:	b507      	push	{r0, r1, r2, lr}
 80007ac:	4906      	ldr	r1, [pc, #24]	@ (80007c8 <iprintf+0x20>)
 80007ae:	ab04      	add	r3, sp, #16
 80007b0:	6808      	ldr	r0, [r1, #0]
 80007b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80007b6:	6881      	ldr	r1, [r0, #8]
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	f000 f865 	bl	8000888 <_vfiprintf_r>
 80007be:	b003      	add	sp, #12
 80007c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007c4:	b004      	add	sp, #16
 80007c6:	4770      	bx	lr
 80007c8:	2000000c 	.word	0x2000000c

080007cc <memset>:
 80007cc:	4402      	add	r2, r0
 80007ce:	4603      	mov	r3, r0
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d100      	bne.n	80007d6 <memset+0xa>
 80007d4:	4770      	bx	lr
 80007d6:	f803 1b01 	strb.w	r1, [r3], #1
 80007da:	e7f9      	b.n	80007d0 <memset+0x4>

080007dc <__errno>:
 80007dc:	4b01      	ldr	r3, [pc, #4]	@ (80007e4 <__errno+0x8>)
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	2000000c 	.word	0x2000000c

080007e8 <__libc_init_array>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	4d0d      	ldr	r5, [pc, #52]	@ (8000820 <__libc_init_array+0x38>)
 80007ec:	4c0d      	ldr	r4, [pc, #52]	@ (8000824 <__libc_init_array+0x3c>)
 80007ee:	1b64      	subs	r4, r4, r5
 80007f0:	10a4      	asrs	r4, r4, #2
 80007f2:	2600      	movs	r6, #0
 80007f4:	42a6      	cmp	r6, r4
 80007f6:	d109      	bne.n	800080c <__libc_init_array+0x24>
 80007f8:	4d0b      	ldr	r5, [pc, #44]	@ (8000828 <__libc_init_array+0x40>)
 80007fa:	4c0c      	ldr	r4, [pc, #48]	@ (800082c <__libc_init_array+0x44>)
 80007fc:	f000 fe3e 	bl	800147c <_init>
 8000800:	1b64      	subs	r4, r4, r5
 8000802:	10a4      	asrs	r4, r4, #2
 8000804:	2600      	movs	r6, #0
 8000806:	42a6      	cmp	r6, r4
 8000808:	d105      	bne.n	8000816 <__libc_init_array+0x2e>
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000810:	4798      	blx	r3
 8000812:	3601      	adds	r6, #1
 8000814:	e7ee      	b.n	80007f4 <__libc_init_array+0xc>
 8000816:	f855 3b04 	ldr.w	r3, [r5], #4
 800081a:	4798      	blx	r3
 800081c:	3601      	adds	r6, #1
 800081e:	e7f2      	b.n	8000806 <__libc_init_array+0x1e>
 8000820:	080014e4 	.word	0x080014e4
 8000824:	080014e4 	.word	0x080014e4
 8000828:	080014e4 	.word	0x080014e4
 800082c:	080014e8 	.word	0x080014e8

08000830 <__retarget_lock_init_recursive>:
 8000830:	4770      	bx	lr

08000832 <__retarget_lock_acquire_recursive>:
 8000832:	4770      	bx	lr

08000834 <__retarget_lock_release_recursive>:
 8000834:	4770      	bx	lr

08000836 <__sfputc_r>:
 8000836:	6893      	ldr	r3, [r2, #8]
 8000838:	3b01      	subs	r3, #1
 800083a:	2b00      	cmp	r3, #0
 800083c:	b410      	push	{r4}
 800083e:	6093      	str	r3, [r2, #8]
 8000840:	da08      	bge.n	8000854 <__sfputc_r+0x1e>
 8000842:	6994      	ldr	r4, [r2, #24]
 8000844:	42a3      	cmp	r3, r4
 8000846:	db01      	blt.n	800084c <__sfputc_r+0x16>
 8000848:	290a      	cmp	r1, #10
 800084a:	d103      	bne.n	8000854 <__sfputc_r+0x1e>
 800084c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000850:	f000 bc5b 	b.w	800110a <__swbuf_r>
 8000854:	6813      	ldr	r3, [r2, #0]
 8000856:	1c58      	adds	r0, r3, #1
 8000858:	6010      	str	r0, [r2, #0]
 800085a:	7019      	strb	r1, [r3, #0]
 800085c:	4608      	mov	r0, r1
 800085e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000862:	4770      	bx	lr

08000864 <__sfputs_r>:
 8000864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000866:	4606      	mov	r6, r0
 8000868:	460f      	mov	r7, r1
 800086a:	4614      	mov	r4, r2
 800086c:	18d5      	adds	r5, r2, r3
 800086e:	42ac      	cmp	r4, r5
 8000870:	d101      	bne.n	8000876 <__sfputs_r+0x12>
 8000872:	2000      	movs	r0, #0
 8000874:	e007      	b.n	8000886 <__sfputs_r+0x22>
 8000876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800087a:	463a      	mov	r2, r7
 800087c:	4630      	mov	r0, r6
 800087e:	f7ff ffda 	bl	8000836 <__sfputc_r>
 8000882:	1c43      	adds	r3, r0, #1
 8000884:	d1f3      	bne.n	800086e <__sfputs_r+0xa>
 8000886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000888 <_vfiprintf_r>:
 8000888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800088c:	460d      	mov	r5, r1
 800088e:	b09d      	sub	sp, #116	@ 0x74
 8000890:	4614      	mov	r4, r2
 8000892:	4698      	mov	r8, r3
 8000894:	4606      	mov	r6, r0
 8000896:	b118      	cbz	r0, 80008a0 <_vfiprintf_r+0x18>
 8000898:	6a03      	ldr	r3, [r0, #32]
 800089a:	b90b      	cbnz	r3, 80008a0 <_vfiprintf_r+0x18>
 800089c:	f7ff ff4e 	bl	800073c <__sinit>
 80008a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80008a2:	07d9      	lsls	r1, r3, #31
 80008a4:	d405      	bmi.n	80008b2 <_vfiprintf_r+0x2a>
 80008a6:	89ab      	ldrh	r3, [r5, #12]
 80008a8:	059a      	lsls	r2, r3, #22
 80008aa:	d402      	bmi.n	80008b2 <_vfiprintf_r+0x2a>
 80008ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80008ae:	f7ff ffc0 	bl	8000832 <__retarget_lock_acquire_recursive>
 80008b2:	89ab      	ldrh	r3, [r5, #12]
 80008b4:	071b      	lsls	r3, r3, #28
 80008b6:	d501      	bpl.n	80008bc <_vfiprintf_r+0x34>
 80008b8:	692b      	ldr	r3, [r5, #16]
 80008ba:	b99b      	cbnz	r3, 80008e4 <_vfiprintf_r+0x5c>
 80008bc:	4629      	mov	r1, r5
 80008be:	4630      	mov	r0, r6
 80008c0:	f000 fc62 	bl	8001188 <__swsetup_r>
 80008c4:	b170      	cbz	r0, 80008e4 <_vfiprintf_r+0x5c>
 80008c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80008c8:	07dc      	lsls	r4, r3, #31
 80008ca:	d504      	bpl.n	80008d6 <_vfiprintf_r+0x4e>
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008d0:	b01d      	add	sp, #116	@ 0x74
 80008d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008d6:	89ab      	ldrh	r3, [r5, #12]
 80008d8:	0598      	lsls	r0, r3, #22
 80008da:	d4f7      	bmi.n	80008cc <_vfiprintf_r+0x44>
 80008dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80008de:	f7ff ffa9 	bl	8000834 <__retarget_lock_release_recursive>
 80008e2:	e7f3      	b.n	80008cc <_vfiprintf_r+0x44>
 80008e4:	2300      	movs	r3, #0
 80008e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80008e8:	2320      	movs	r3, #32
 80008ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80008ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80008f2:	2330      	movs	r3, #48	@ 0x30
 80008f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000aa4 <_vfiprintf_r+0x21c>
 80008f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80008fc:	f04f 0901 	mov.w	r9, #1
 8000900:	4623      	mov	r3, r4
 8000902:	469a      	mov	sl, r3
 8000904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000908:	b10a      	cbz	r2, 800090e <_vfiprintf_r+0x86>
 800090a:	2a25      	cmp	r2, #37	@ 0x25
 800090c:	d1f9      	bne.n	8000902 <_vfiprintf_r+0x7a>
 800090e:	ebba 0b04 	subs.w	fp, sl, r4
 8000912:	d00b      	beq.n	800092c <_vfiprintf_r+0xa4>
 8000914:	465b      	mov	r3, fp
 8000916:	4622      	mov	r2, r4
 8000918:	4629      	mov	r1, r5
 800091a:	4630      	mov	r0, r6
 800091c:	f7ff ffa2 	bl	8000864 <__sfputs_r>
 8000920:	3001      	adds	r0, #1
 8000922:	f000 80a7 	beq.w	8000a74 <_vfiprintf_r+0x1ec>
 8000926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000928:	445a      	add	r2, fp
 800092a:	9209      	str	r2, [sp, #36]	@ 0x24
 800092c:	f89a 3000 	ldrb.w	r3, [sl]
 8000930:	2b00      	cmp	r3, #0
 8000932:	f000 809f 	beq.w	8000a74 <_vfiprintf_r+0x1ec>
 8000936:	2300      	movs	r3, #0
 8000938:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800093c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000940:	f10a 0a01 	add.w	sl, sl, #1
 8000944:	9304      	str	r3, [sp, #16]
 8000946:	9307      	str	r3, [sp, #28]
 8000948:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800094c:	931a      	str	r3, [sp, #104]	@ 0x68
 800094e:	4654      	mov	r4, sl
 8000950:	2205      	movs	r2, #5
 8000952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000956:	4853      	ldr	r0, [pc, #332]	@ (8000aa4 <_vfiprintf_r+0x21c>)
 8000958:	f7ff fc42 	bl	80001e0 <memchr>
 800095c:	9a04      	ldr	r2, [sp, #16]
 800095e:	b9d8      	cbnz	r0, 8000998 <_vfiprintf_r+0x110>
 8000960:	06d1      	lsls	r1, r2, #27
 8000962:	bf44      	itt	mi
 8000964:	2320      	movmi	r3, #32
 8000966:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800096a:	0713      	lsls	r3, r2, #28
 800096c:	bf44      	itt	mi
 800096e:	232b      	movmi	r3, #43	@ 0x2b
 8000970:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000974:	f89a 3000 	ldrb.w	r3, [sl]
 8000978:	2b2a      	cmp	r3, #42	@ 0x2a
 800097a:	d015      	beq.n	80009a8 <_vfiprintf_r+0x120>
 800097c:	9a07      	ldr	r2, [sp, #28]
 800097e:	4654      	mov	r4, sl
 8000980:	2000      	movs	r0, #0
 8000982:	f04f 0c0a 	mov.w	ip, #10
 8000986:	4621      	mov	r1, r4
 8000988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800098c:	3b30      	subs	r3, #48	@ 0x30
 800098e:	2b09      	cmp	r3, #9
 8000990:	d94b      	bls.n	8000a2a <_vfiprintf_r+0x1a2>
 8000992:	b1b0      	cbz	r0, 80009c2 <_vfiprintf_r+0x13a>
 8000994:	9207      	str	r2, [sp, #28]
 8000996:	e014      	b.n	80009c2 <_vfiprintf_r+0x13a>
 8000998:	eba0 0308 	sub.w	r3, r0, r8
 800099c:	fa09 f303 	lsl.w	r3, r9, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	9304      	str	r3, [sp, #16]
 80009a4:	46a2      	mov	sl, r4
 80009a6:	e7d2      	b.n	800094e <_vfiprintf_r+0xc6>
 80009a8:	9b03      	ldr	r3, [sp, #12]
 80009aa:	1d19      	adds	r1, r3, #4
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	9103      	str	r1, [sp, #12]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bfbb      	ittet	lt
 80009b4:	425b      	neglt	r3, r3
 80009b6:	f042 0202 	orrlt.w	r2, r2, #2
 80009ba:	9307      	strge	r3, [sp, #28]
 80009bc:	9307      	strlt	r3, [sp, #28]
 80009be:	bfb8      	it	lt
 80009c0:	9204      	strlt	r2, [sp, #16]
 80009c2:	7823      	ldrb	r3, [r4, #0]
 80009c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80009c6:	d10a      	bne.n	80009de <_vfiprintf_r+0x156>
 80009c8:	7863      	ldrb	r3, [r4, #1]
 80009ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80009cc:	d132      	bne.n	8000a34 <_vfiprintf_r+0x1ac>
 80009ce:	9b03      	ldr	r3, [sp, #12]
 80009d0:	1d1a      	adds	r2, r3, #4
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	9203      	str	r2, [sp, #12]
 80009d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80009da:	3402      	adds	r4, #2
 80009dc:	9305      	str	r3, [sp, #20]
 80009de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000ab4 <_vfiprintf_r+0x22c>
 80009e2:	7821      	ldrb	r1, [r4, #0]
 80009e4:	2203      	movs	r2, #3
 80009e6:	4650      	mov	r0, sl
 80009e8:	f7ff fbfa 	bl	80001e0 <memchr>
 80009ec:	b138      	cbz	r0, 80009fe <_vfiprintf_r+0x176>
 80009ee:	9b04      	ldr	r3, [sp, #16]
 80009f0:	eba0 000a 	sub.w	r0, r0, sl
 80009f4:	2240      	movs	r2, #64	@ 0x40
 80009f6:	4082      	lsls	r2, r0
 80009f8:	4313      	orrs	r3, r2
 80009fa:	3401      	adds	r4, #1
 80009fc:	9304      	str	r3, [sp, #16]
 80009fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a02:	4829      	ldr	r0, [pc, #164]	@ (8000aa8 <_vfiprintf_r+0x220>)
 8000a04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a08:	2206      	movs	r2, #6
 8000a0a:	f7ff fbe9 	bl	80001e0 <memchr>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d03f      	beq.n	8000a92 <_vfiprintf_r+0x20a>
 8000a12:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <_vfiprintf_r+0x224>)
 8000a14:	bb1b      	cbnz	r3, 8000a5e <_vfiprintf_r+0x1d6>
 8000a16:	9b03      	ldr	r3, [sp, #12]
 8000a18:	3307      	adds	r3, #7
 8000a1a:	f023 0307 	bic.w	r3, r3, #7
 8000a1e:	3308      	adds	r3, #8
 8000a20:	9303      	str	r3, [sp, #12]
 8000a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a24:	443b      	add	r3, r7
 8000a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a28:	e76a      	b.n	8000900 <_vfiprintf_r+0x78>
 8000a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a2e:	460c      	mov	r4, r1
 8000a30:	2001      	movs	r0, #1
 8000a32:	e7a8      	b.n	8000986 <_vfiprintf_r+0xfe>
 8000a34:	2300      	movs	r3, #0
 8000a36:	3401      	adds	r4, #1
 8000a38:	9305      	str	r3, [sp, #20]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f04f 0c0a 	mov.w	ip, #10
 8000a40:	4620      	mov	r0, r4
 8000a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a46:	3a30      	subs	r2, #48	@ 0x30
 8000a48:	2a09      	cmp	r2, #9
 8000a4a:	d903      	bls.n	8000a54 <_vfiprintf_r+0x1cc>
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0c6      	beq.n	80009de <_vfiprintf_r+0x156>
 8000a50:	9105      	str	r1, [sp, #20]
 8000a52:	e7c4      	b.n	80009de <_vfiprintf_r+0x156>
 8000a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a58:	4604      	mov	r4, r0
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e7f0      	b.n	8000a40 <_vfiprintf_r+0x1b8>
 8000a5e:	ab03      	add	r3, sp, #12
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	462a      	mov	r2, r5
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <_vfiprintf_r+0x228>)
 8000a66:	a904      	add	r1, sp, #16
 8000a68:	4630      	mov	r0, r6
 8000a6a:	f3af 8000 	nop.w
 8000a6e:	4607      	mov	r7, r0
 8000a70:	1c78      	adds	r0, r7, #1
 8000a72:	d1d6      	bne.n	8000a22 <_vfiprintf_r+0x19a>
 8000a74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a76:	07d9      	lsls	r1, r3, #31
 8000a78:	d405      	bmi.n	8000a86 <_vfiprintf_r+0x1fe>
 8000a7a:	89ab      	ldrh	r3, [r5, #12]
 8000a7c:	059a      	lsls	r2, r3, #22
 8000a7e:	d402      	bmi.n	8000a86 <_vfiprintf_r+0x1fe>
 8000a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a82:	f7ff fed7 	bl	8000834 <__retarget_lock_release_recursive>
 8000a86:	89ab      	ldrh	r3, [r5, #12]
 8000a88:	065b      	lsls	r3, r3, #25
 8000a8a:	f53f af1f 	bmi.w	80008cc <_vfiprintf_r+0x44>
 8000a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000a90:	e71e      	b.n	80008d0 <_vfiprintf_r+0x48>
 8000a92:	ab03      	add	r3, sp, #12
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	462a      	mov	r2, r5
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <_vfiprintf_r+0x228>)
 8000a9a:	a904      	add	r1, sp, #16
 8000a9c:	4630      	mov	r0, r6
 8000a9e:	f000 f91b 	bl	8000cd8 <_printf_i>
 8000aa2:	e7e4      	b.n	8000a6e <_vfiprintf_r+0x1e6>
 8000aa4:	080014a8 	.word	0x080014a8
 8000aa8:	080014b2 	.word	0x080014b2
 8000aac:	00000000 	.word	0x00000000
 8000ab0:	08000865 	.word	0x08000865
 8000ab4:	080014ae 	.word	0x080014ae

08000ab8 <sbrk_aligned>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4e0f      	ldr	r6, [pc, #60]	@ (8000af8 <sbrk_aligned+0x40>)
 8000abc:	460c      	mov	r4, r1
 8000abe:	6831      	ldr	r1, [r6, #0]
 8000ac0:	4605      	mov	r5, r0
 8000ac2:	b911      	cbnz	r1, 8000aca <sbrk_aligned+0x12>
 8000ac4:	f000 fc4c 	bl	8001360 <_sbrk_r>
 8000ac8:	6030      	str	r0, [r6, #0]
 8000aca:	4621      	mov	r1, r4
 8000acc:	4628      	mov	r0, r5
 8000ace:	f000 fc47 	bl	8001360 <_sbrk_r>
 8000ad2:	1c43      	adds	r3, r0, #1
 8000ad4:	d103      	bne.n	8000ade <sbrk_aligned+0x26>
 8000ad6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000ada:	4620      	mov	r0, r4
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
 8000ade:	1cc4      	adds	r4, r0, #3
 8000ae0:	f024 0403 	bic.w	r4, r4, #3
 8000ae4:	42a0      	cmp	r0, r4
 8000ae6:	d0f8      	beq.n	8000ada <sbrk_aligned+0x22>
 8000ae8:	1a21      	subs	r1, r4, r0
 8000aea:	4628      	mov	r0, r5
 8000aec:	f000 fc38 	bl	8001360 <_sbrk_r>
 8000af0:	3001      	adds	r0, #1
 8000af2:	d1f2      	bne.n	8000ada <sbrk_aligned+0x22>
 8000af4:	e7ef      	b.n	8000ad6 <sbrk_aligned+0x1e>
 8000af6:	bf00      	nop
 8000af8:	200001c0 	.word	0x200001c0

08000afc <_malloc_r>:
 8000afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b00:	1ccd      	adds	r5, r1, #3
 8000b02:	f025 0503 	bic.w	r5, r5, #3
 8000b06:	3508      	adds	r5, #8
 8000b08:	2d0c      	cmp	r5, #12
 8000b0a:	bf38      	it	cc
 8000b0c:	250c      	movcc	r5, #12
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	4606      	mov	r6, r0
 8000b12:	db01      	blt.n	8000b18 <_malloc_r+0x1c>
 8000b14:	42a9      	cmp	r1, r5
 8000b16:	d904      	bls.n	8000b22 <_malloc_r+0x26>
 8000b18:	230c      	movs	r3, #12
 8000b1a:	6033      	str	r3, [r6, #0]
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bf8 <_malloc_r+0xfc>
 8000b26:	f000 faa1 	bl	800106c <__malloc_lock>
 8000b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b2e:	461c      	mov	r4, r3
 8000b30:	bb44      	cbnz	r4, 8000b84 <_malloc_r+0x88>
 8000b32:	4629      	mov	r1, r5
 8000b34:	4630      	mov	r0, r6
 8000b36:	f7ff ffbf 	bl	8000ab8 <sbrk_aligned>
 8000b3a:	1c43      	adds	r3, r0, #1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	d158      	bne.n	8000bf2 <_malloc_r+0xf6>
 8000b40:	f8d8 4000 	ldr.w	r4, [r8]
 8000b44:	4627      	mov	r7, r4
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d143      	bne.n	8000bd2 <_malloc_r+0xd6>
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	d04b      	beq.n	8000be6 <_malloc_r+0xea>
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	4639      	mov	r1, r7
 8000b52:	4630      	mov	r0, r6
 8000b54:	eb04 0903 	add.w	r9, r4, r3
 8000b58:	f000 fc02 	bl	8001360 <_sbrk_r>
 8000b5c:	4581      	cmp	r9, r0
 8000b5e:	d142      	bne.n	8000be6 <_malloc_r+0xea>
 8000b60:	6821      	ldr	r1, [r4, #0]
 8000b62:	1a6d      	subs	r5, r5, r1
 8000b64:	4629      	mov	r1, r5
 8000b66:	4630      	mov	r0, r6
 8000b68:	f7ff ffa6 	bl	8000ab8 <sbrk_aligned>
 8000b6c:	3001      	adds	r0, #1
 8000b6e:	d03a      	beq.n	8000be6 <_malloc_r+0xea>
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	442b      	add	r3, r5
 8000b74:	6023      	str	r3, [r4, #0]
 8000b76:	f8d8 3000 	ldr.w	r3, [r8]
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	bb62      	cbnz	r2, 8000bd8 <_malloc_r+0xdc>
 8000b7e:	f8c8 7000 	str.w	r7, [r8]
 8000b82:	e00f      	b.n	8000ba4 <_malloc_r+0xa8>
 8000b84:	6822      	ldr	r2, [r4, #0]
 8000b86:	1b52      	subs	r2, r2, r5
 8000b88:	d420      	bmi.n	8000bcc <_malloc_r+0xd0>
 8000b8a:	2a0b      	cmp	r2, #11
 8000b8c:	d917      	bls.n	8000bbe <_malloc_r+0xc2>
 8000b8e:	1961      	adds	r1, r4, r5
 8000b90:	42a3      	cmp	r3, r4
 8000b92:	6025      	str	r5, [r4, #0]
 8000b94:	bf18      	it	ne
 8000b96:	6059      	strne	r1, [r3, #4]
 8000b98:	6863      	ldr	r3, [r4, #4]
 8000b9a:	bf08      	it	eq
 8000b9c:	f8c8 1000 	streq.w	r1, [r8]
 8000ba0:	5162      	str	r2, [r4, r5]
 8000ba2:	604b      	str	r3, [r1, #4]
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f000 fa67 	bl	8001078 <__malloc_unlock>
 8000baa:	f104 000b 	add.w	r0, r4, #11
 8000bae:	1d23      	adds	r3, r4, #4
 8000bb0:	f020 0007 	bic.w	r0, r0, #7
 8000bb4:	1ac2      	subs	r2, r0, r3
 8000bb6:	bf1c      	itt	ne
 8000bb8:	1a1b      	subne	r3, r3, r0
 8000bba:	50a3      	strne	r3, [r4, r2]
 8000bbc:	e7af      	b.n	8000b1e <_malloc_r+0x22>
 8000bbe:	6862      	ldr	r2, [r4, #4]
 8000bc0:	42a3      	cmp	r3, r4
 8000bc2:	bf0c      	ite	eq
 8000bc4:	f8c8 2000 	streq.w	r2, [r8]
 8000bc8:	605a      	strne	r2, [r3, #4]
 8000bca:	e7eb      	b.n	8000ba4 <_malloc_r+0xa8>
 8000bcc:	4623      	mov	r3, r4
 8000bce:	6864      	ldr	r4, [r4, #4]
 8000bd0:	e7ae      	b.n	8000b30 <_malloc_r+0x34>
 8000bd2:	463c      	mov	r4, r7
 8000bd4:	687f      	ldr	r7, [r7, #4]
 8000bd6:	e7b6      	b.n	8000b46 <_malloc_r+0x4a>
 8000bd8:	461a      	mov	r2, r3
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	42a3      	cmp	r3, r4
 8000bde:	d1fb      	bne.n	8000bd8 <_malloc_r+0xdc>
 8000be0:	2300      	movs	r3, #0
 8000be2:	6053      	str	r3, [r2, #4]
 8000be4:	e7de      	b.n	8000ba4 <_malloc_r+0xa8>
 8000be6:	230c      	movs	r3, #12
 8000be8:	6033      	str	r3, [r6, #0]
 8000bea:	4630      	mov	r0, r6
 8000bec:	f000 fa44 	bl	8001078 <__malloc_unlock>
 8000bf0:	e794      	b.n	8000b1c <_malloc_r+0x20>
 8000bf2:	6005      	str	r5, [r0, #0]
 8000bf4:	e7d6      	b.n	8000ba4 <_malloc_r+0xa8>
 8000bf6:	bf00      	nop
 8000bf8:	200001c4 	.word	0x200001c4

08000bfc <_printf_common>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	4616      	mov	r6, r2
 8000c02:	4698      	mov	r8, r3
 8000c04:	688a      	ldr	r2, [r1, #8]
 8000c06:	690b      	ldr	r3, [r1, #16]
 8000c08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	bfb8      	it	lt
 8000c10:	4613      	movlt	r3, r2
 8000c12:	6033      	str	r3, [r6, #0]
 8000c14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c18:	4607      	mov	r7, r0
 8000c1a:	460c      	mov	r4, r1
 8000c1c:	b10a      	cbz	r2, 8000c22 <_printf_common+0x26>
 8000c1e:	3301      	adds	r3, #1
 8000c20:	6033      	str	r3, [r6, #0]
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	0699      	lsls	r1, r3, #26
 8000c26:	bf42      	ittt	mi
 8000c28:	6833      	ldrmi	r3, [r6, #0]
 8000c2a:	3302      	addmi	r3, #2
 8000c2c:	6033      	strmi	r3, [r6, #0]
 8000c2e:	6825      	ldr	r5, [r4, #0]
 8000c30:	f015 0506 	ands.w	r5, r5, #6
 8000c34:	d106      	bne.n	8000c44 <_printf_common+0x48>
 8000c36:	f104 0a19 	add.w	sl, r4, #25
 8000c3a:	68e3      	ldr	r3, [r4, #12]
 8000c3c:	6832      	ldr	r2, [r6, #0]
 8000c3e:	1a9b      	subs	r3, r3, r2
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	dc26      	bgt.n	8000c92 <_printf_common+0x96>
 8000c44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c48:	6822      	ldr	r2, [r4, #0]
 8000c4a:	3b00      	subs	r3, #0
 8000c4c:	bf18      	it	ne
 8000c4e:	2301      	movne	r3, #1
 8000c50:	0692      	lsls	r2, r2, #26
 8000c52:	d42b      	bmi.n	8000cac <_printf_common+0xb0>
 8000c54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c58:	4641      	mov	r1, r8
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	47c8      	blx	r9
 8000c5e:	3001      	adds	r0, #1
 8000c60:	d01e      	beq.n	8000ca0 <_printf_common+0xa4>
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	6922      	ldr	r2, [r4, #16]
 8000c66:	f003 0306 	and.w	r3, r3, #6
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf02      	ittt	eq
 8000c6e:	68e5      	ldreq	r5, [r4, #12]
 8000c70:	6833      	ldreq	r3, [r6, #0]
 8000c72:	1aed      	subeq	r5, r5, r3
 8000c74:	68a3      	ldr	r3, [r4, #8]
 8000c76:	bf0c      	ite	eq
 8000c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c7c:	2500      	movne	r5, #0
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	bfc4      	itt	gt
 8000c82:	1a9b      	subgt	r3, r3, r2
 8000c84:	18ed      	addgt	r5, r5, r3
 8000c86:	2600      	movs	r6, #0
 8000c88:	341a      	adds	r4, #26
 8000c8a:	42b5      	cmp	r5, r6
 8000c8c:	d11a      	bne.n	8000cc4 <_printf_common+0xc8>
 8000c8e:	2000      	movs	r0, #0
 8000c90:	e008      	b.n	8000ca4 <_printf_common+0xa8>
 8000c92:	2301      	movs	r3, #1
 8000c94:	4652      	mov	r2, sl
 8000c96:	4641      	mov	r1, r8
 8000c98:	4638      	mov	r0, r7
 8000c9a:	47c8      	blx	r9
 8000c9c:	3001      	adds	r0, #1
 8000c9e:	d103      	bne.n	8000ca8 <_printf_common+0xac>
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	3501      	adds	r5, #1
 8000caa:	e7c6      	b.n	8000c3a <_printf_common+0x3e>
 8000cac:	18e1      	adds	r1, r4, r3
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	2030      	movs	r0, #48	@ 0x30
 8000cb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000cb6:	4422      	add	r2, r4
 8000cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000cbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	e7c7      	b.n	8000c54 <_printf_common+0x58>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	4622      	mov	r2, r4
 8000cc8:	4641      	mov	r1, r8
 8000cca:	4638      	mov	r0, r7
 8000ccc:	47c8      	blx	r9
 8000cce:	3001      	adds	r0, #1
 8000cd0:	d0e6      	beq.n	8000ca0 <_printf_common+0xa4>
 8000cd2:	3601      	adds	r6, #1
 8000cd4:	e7d9      	b.n	8000c8a <_printf_common+0x8e>
	...

08000cd8 <_printf_i>:
 8000cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	7e0f      	ldrb	r7, [r1, #24]
 8000cde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000ce0:	2f78      	cmp	r7, #120	@ 0x78
 8000ce2:	4691      	mov	r9, r2
 8000ce4:	4680      	mov	r8, r0
 8000ce6:	460c      	mov	r4, r1
 8000ce8:	469a      	mov	sl, r3
 8000cea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000cee:	d807      	bhi.n	8000d00 <_printf_i+0x28>
 8000cf0:	2f62      	cmp	r7, #98	@ 0x62
 8000cf2:	d80a      	bhi.n	8000d0a <_printf_i+0x32>
 8000cf4:	2f00      	cmp	r7, #0
 8000cf6:	f000 80d1 	beq.w	8000e9c <_printf_i+0x1c4>
 8000cfa:	2f58      	cmp	r7, #88	@ 0x58
 8000cfc:	f000 80b8 	beq.w	8000e70 <_printf_i+0x198>
 8000d00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d08:	e03a      	b.n	8000d80 <_printf_i+0xa8>
 8000d0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d0e:	2b15      	cmp	r3, #21
 8000d10:	d8f6      	bhi.n	8000d00 <_printf_i+0x28>
 8000d12:	a101      	add	r1, pc, #4	@ (adr r1, 8000d18 <_printf_i+0x40>)
 8000d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d18:	08000d71 	.word	0x08000d71
 8000d1c:	08000d85 	.word	0x08000d85
 8000d20:	08000d01 	.word	0x08000d01
 8000d24:	08000d01 	.word	0x08000d01
 8000d28:	08000d01 	.word	0x08000d01
 8000d2c:	08000d01 	.word	0x08000d01
 8000d30:	08000d85 	.word	0x08000d85
 8000d34:	08000d01 	.word	0x08000d01
 8000d38:	08000d01 	.word	0x08000d01
 8000d3c:	08000d01 	.word	0x08000d01
 8000d40:	08000d01 	.word	0x08000d01
 8000d44:	08000e83 	.word	0x08000e83
 8000d48:	08000daf 	.word	0x08000daf
 8000d4c:	08000e3d 	.word	0x08000e3d
 8000d50:	08000d01 	.word	0x08000d01
 8000d54:	08000d01 	.word	0x08000d01
 8000d58:	08000ea5 	.word	0x08000ea5
 8000d5c:	08000d01 	.word	0x08000d01
 8000d60:	08000daf 	.word	0x08000daf
 8000d64:	08000d01 	.word	0x08000d01
 8000d68:	08000d01 	.word	0x08000d01
 8000d6c:	08000e45 	.word	0x08000e45
 8000d70:	6833      	ldr	r3, [r6, #0]
 8000d72:	1d1a      	adds	r2, r3, #4
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6032      	str	r2, [r6, #0]
 8000d78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d80:	2301      	movs	r3, #1
 8000d82:	e09c      	b.n	8000ebe <_printf_i+0x1e6>
 8000d84:	6833      	ldr	r3, [r6, #0]
 8000d86:	6820      	ldr	r0, [r4, #0]
 8000d88:	1d19      	adds	r1, r3, #4
 8000d8a:	6031      	str	r1, [r6, #0]
 8000d8c:	0606      	lsls	r6, r0, #24
 8000d8e:	d501      	bpl.n	8000d94 <_printf_i+0xbc>
 8000d90:	681d      	ldr	r5, [r3, #0]
 8000d92:	e003      	b.n	8000d9c <_printf_i+0xc4>
 8000d94:	0645      	lsls	r5, r0, #25
 8000d96:	d5fb      	bpl.n	8000d90 <_printf_i+0xb8>
 8000d98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	da03      	bge.n	8000da8 <_printf_i+0xd0>
 8000da0:	232d      	movs	r3, #45	@ 0x2d
 8000da2:	426d      	negs	r5, r5
 8000da4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000da8:	4858      	ldr	r0, [pc, #352]	@ (8000f0c <_printf_i+0x234>)
 8000daa:	230a      	movs	r3, #10
 8000dac:	e011      	b.n	8000dd2 <_printf_i+0xfa>
 8000dae:	6821      	ldr	r1, [r4, #0]
 8000db0:	6833      	ldr	r3, [r6, #0]
 8000db2:	0608      	lsls	r0, r1, #24
 8000db4:	f853 5b04 	ldr.w	r5, [r3], #4
 8000db8:	d402      	bmi.n	8000dc0 <_printf_i+0xe8>
 8000dba:	0649      	lsls	r1, r1, #25
 8000dbc:	bf48      	it	mi
 8000dbe:	b2ad      	uxthmi	r5, r5
 8000dc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8000dc2:	4852      	ldr	r0, [pc, #328]	@ (8000f0c <_printf_i+0x234>)
 8000dc4:	6033      	str	r3, [r6, #0]
 8000dc6:	bf14      	ite	ne
 8000dc8:	230a      	movne	r3, #10
 8000dca:	2308      	moveq	r3, #8
 8000dcc:	2100      	movs	r1, #0
 8000dce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000dd2:	6866      	ldr	r6, [r4, #4]
 8000dd4:	60a6      	str	r6, [r4, #8]
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	db05      	blt.n	8000de6 <_printf_i+0x10e>
 8000dda:	6821      	ldr	r1, [r4, #0]
 8000ddc:	432e      	orrs	r6, r5
 8000dde:	f021 0104 	bic.w	r1, r1, #4
 8000de2:	6021      	str	r1, [r4, #0]
 8000de4:	d04b      	beq.n	8000e7e <_printf_i+0x1a6>
 8000de6:	4616      	mov	r6, r2
 8000de8:	fbb5 f1f3 	udiv	r1, r5, r3
 8000dec:	fb03 5711 	mls	r7, r3, r1, r5
 8000df0:	5dc7      	ldrb	r7, [r0, r7]
 8000df2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000df6:	462f      	mov	r7, r5
 8000df8:	42bb      	cmp	r3, r7
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	d9f4      	bls.n	8000de8 <_printf_i+0x110>
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d10b      	bne.n	8000e1a <_printf_i+0x142>
 8000e02:	6823      	ldr	r3, [r4, #0]
 8000e04:	07df      	lsls	r7, r3, #31
 8000e06:	d508      	bpl.n	8000e1a <_printf_i+0x142>
 8000e08:	6923      	ldr	r3, [r4, #16]
 8000e0a:	6861      	ldr	r1, [r4, #4]
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	bfde      	ittt	le
 8000e10:	2330      	movle	r3, #48	@ 0x30
 8000e12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e16:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e1a:	1b92      	subs	r2, r2, r6
 8000e1c:	6122      	str	r2, [r4, #16]
 8000e1e:	f8cd a000 	str.w	sl, [sp]
 8000e22:	464b      	mov	r3, r9
 8000e24:	aa03      	add	r2, sp, #12
 8000e26:	4621      	mov	r1, r4
 8000e28:	4640      	mov	r0, r8
 8000e2a:	f7ff fee7 	bl	8000bfc <_printf_common>
 8000e2e:	3001      	adds	r0, #1
 8000e30:	d14a      	bne.n	8000ec8 <_printf_i+0x1f0>
 8000e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e36:	b004      	add	sp, #16
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	f043 0320 	orr.w	r3, r3, #32
 8000e42:	6023      	str	r3, [r4, #0]
 8000e44:	4832      	ldr	r0, [pc, #200]	@ (8000f10 <_printf_i+0x238>)
 8000e46:	2778      	movs	r7, #120	@ 0x78
 8000e48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	6831      	ldr	r1, [r6, #0]
 8000e50:	061f      	lsls	r7, r3, #24
 8000e52:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e56:	d402      	bmi.n	8000e5e <_printf_i+0x186>
 8000e58:	065f      	lsls	r7, r3, #25
 8000e5a:	bf48      	it	mi
 8000e5c:	b2ad      	uxthmi	r5, r5
 8000e5e:	6031      	str	r1, [r6, #0]
 8000e60:	07d9      	lsls	r1, r3, #31
 8000e62:	bf44      	itt	mi
 8000e64:	f043 0320 	orrmi.w	r3, r3, #32
 8000e68:	6023      	strmi	r3, [r4, #0]
 8000e6a:	b11d      	cbz	r5, 8000e74 <_printf_i+0x19c>
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	e7ad      	b.n	8000dcc <_printf_i+0xf4>
 8000e70:	4826      	ldr	r0, [pc, #152]	@ (8000f0c <_printf_i+0x234>)
 8000e72:	e7e9      	b.n	8000e48 <_printf_i+0x170>
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	f023 0320 	bic.w	r3, r3, #32
 8000e7a:	6023      	str	r3, [r4, #0]
 8000e7c:	e7f6      	b.n	8000e6c <_printf_i+0x194>
 8000e7e:	4616      	mov	r6, r2
 8000e80:	e7bd      	b.n	8000dfe <_printf_i+0x126>
 8000e82:	6833      	ldr	r3, [r6, #0]
 8000e84:	6825      	ldr	r5, [r4, #0]
 8000e86:	6961      	ldr	r1, [r4, #20]
 8000e88:	1d18      	adds	r0, r3, #4
 8000e8a:	6030      	str	r0, [r6, #0]
 8000e8c:	062e      	lsls	r6, r5, #24
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	d501      	bpl.n	8000e96 <_printf_i+0x1be>
 8000e92:	6019      	str	r1, [r3, #0]
 8000e94:	e002      	b.n	8000e9c <_printf_i+0x1c4>
 8000e96:	0668      	lsls	r0, r5, #25
 8000e98:	d5fb      	bpl.n	8000e92 <_printf_i+0x1ba>
 8000e9a:	8019      	strh	r1, [r3, #0]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	6123      	str	r3, [r4, #16]
 8000ea0:	4616      	mov	r6, r2
 8000ea2:	e7bc      	b.n	8000e1e <_printf_i+0x146>
 8000ea4:	6833      	ldr	r3, [r6, #0]
 8000ea6:	1d1a      	adds	r2, r3, #4
 8000ea8:	6032      	str	r2, [r6, #0]
 8000eaa:	681e      	ldr	r6, [r3, #0]
 8000eac:	6862      	ldr	r2, [r4, #4]
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	f7ff f995 	bl	80001e0 <memchr>
 8000eb6:	b108      	cbz	r0, 8000ebc <_printf_i+0x1e4>
 8000eb8:	1b80      	subs	r0, r0, r6
 8000eba:	6060      	str	r0, [r4, #4]
 8000ebc:	6863      	ldr	r3, [r4, #4]
 8000ebe:	6123      	str	r3, [r4, #16]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ec6:	e7aa      	b.n	8000e1e <_printf_i+0x146>
 8000ec8:	6923      	ldr	r3, [r4, #16]
 8000eca:	4632      	mov	r2, r6
 8000ecc:	4649      	mov	r1, r9
 8000ece:	4640      	mov	r0, r8
 8000ed0:	47d0      	blx	sl
 8000ed2:	3001      	adds	r0, #1
 8000ed4:	d0ad      	beq.n	8000e32 <_printf_i+0x15a>
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	079b      	lsls	r3, r3, #30
 8000eda:	d413      	bmi.n	8000f04 <_printf_i+0x22c>
 8000edc:	68e0      	ldr	r0, [r4, #12]
 8000ede:	9b03      	ldr	r3, [sp, #12]
 8000ee0:	4298      	cmp	r0, r3
 8000ee2:	bfb8      	it	lt
 8000ee4:	4618      	movlt	r0, r3
 8000ee6:	e7a6      	b.n	8000e36 <_printf_i+0x15e>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	4632      	mov	r2, r6
 8000eec:	4649      	mov	r1, r9
 8000eee:	4640      	mov	r0, r8
 8000ef0:	47d0      	blx	sl
 8000ef2:	3001      	adds	r0, #1
 8000ef4:	d09d      	beq.n	8000e32 <_printf_i+0x15a>
 8000ef6:	3501      	adds	r5, #1
 8000ef8:	68e3      	ldr	r3, [r4, #12]
 8000efa:	9903      	ldr	r1, [sp, #12]
 8000efc:	1a5b      	subs	r3, r3, r1
 8000efe:	42ab      	cmp	r3, r5
 8000f00:	dcf2      	bgt.n	8000ee8 <_printf_i+0x210>
 8000f02:	e7eb      	b.n	8000edc <_printf_i+0x204>
 8000f04:	2500      	movs	r5, #0
 8000f06:	f104 0619 	add.w	r6, r4, #25
 8000f0a:	e7f5      	b.n	8000ef8 <_printf_i+0x220>
 8000f0c:	080014b9 	.word	0x080014b9
 8000f10:	080014ca 	.word	0x080014ca

08000f14 <__sflush_r>:
 8000f14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f1c:	0716      	lsls	r6, r2, #28
 8000f1e:	4605      	mov	r5, r0
 8000f20:	460c      	mov	r4, r1
 8000f22:	d454      	bmi.n	8000fce <__sflush_r+0xba>
 8000f24:	684b      	ldr	r3, [r1, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	dc02      	bgt.n	8000f30 <__sflush_r+0x1c>
 8000f2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	dd48      	ble.n	8000fc2 <__sflush_r+0xae>
 8000f30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f32:	2e00      	cmp	r6, #0
 8000f34:	d045      	beq.n	8000fc2 <__sflush_r+0xae>
 8000f36:	2300      	movs	r3, #0
 8000f38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000f3c:	682f      	ldr	r7, [r5, #0]
 8000f3e:	6a21      	ldr	r1, [r4, #32]
 8000f40:	602b      	str	r3, [r5, #0]
 8000f42:	d030      	beq.n	8000fa6 <__sflush_r+0x92>
 8000f44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f46:	89a3      	ldrh	r3, [r4, #12]
 8000f48:	0759      	lsls	r1, r3, #29
 8000f4a:	d505      	bpl.n	8000f58 <__sflush_r+0x44>
 8000f4c:	6863      	ldr	r3, [r4, #4]
 8000f4e:	1ad2      	subs	r2, r2, r3
 8000f50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000f52:	b10b      	cbz	r3, 8000f58 <__sflush_r+0x44>
 8000f54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f56:	1ad2      	subs	r2, r2, r3
 8000f58:	2300      	movs	r3, #0
 8000f5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f5c:	6a21      	ldr	r1, [r4, #32]
 8000f5e:	4628      	mov	r0, r5
 8000f60:	47b0      	blx	r6
 8000f62:	1c43      	adds	r3, r0, #1
 8000f64:	89a3      	ldrh	r3, [r4, #12]
 8000f66:	d106      	bne.n	8000f76 <__sflush_r+0x62>
 8000f68:	6829      	ldr	r1, [r5, #0]
 8000f6a:	291d      	cmp	r1, #29
 8000f6c:	d82b      	bhi.n	8000fc6 <__sflush_r+0xb2>
 8000f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001018 <__sflush_r+0x104>)
 8000f70:	40ca      	lsrs	r2, r1
 8000f72:	07d6      	lsls	r6, r2, #31
 8000f74:	d527      	bpl.n	8000fc6 <__sflush_r+0xb2>
 8000f76:	2200      	movs	r2, #0
 8000f78:	6062      	str	r2, [r4, #4]
 8000f7a:	04d9      	lsls	r1, r3, #19
 8000f7c:	6922      	ldr	r2, [r4, #16]
 8000f7e:	6022      	str	r2, [r4, #0]
 8000f80:	d504      	bpl.n	8000f8c <__sflush_r+0x78>
 8000f82:	1c42      	adds	r2, r0, #1
 8000f84:	d101      	bne.n	8000f8a <__sflush_r+0x76>
 8000f86:	682b      	ldr	r3, [r5, #0]
 8000f88:	b903      	cbnz	r3, 8000f8c <__sflush_r+0x78>
 8000f8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8000f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000f8e:	602f      	str	r7, [r5, #0]
 8000f90:	b1b9      	cbz	r1, 8000fc2 <__sflush_r+0xae>
 8000f92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000f96:	4299      	cmp	r1, r3
 8000f98:	d002      	beq.n	8000fa0 <__sflush_r+0x8c>
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	f000 fa24 	bl	80013e8 <_free_r>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8000fa4:	e00d      	b.n	8000fc2 <__sflush_r+0xae>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4628      	mov	r0, r5
 8000faa:	47b0      	blx	r6
 8000fac:	4602      	mov	r2, r0
 8000fae:	1c50      	adds	r0, r2, #1
 8000fb0:	d1c9      	bne.n	8000f46 <__sflush_r+0x32>
 8000fb2:	682b      	ldr	r3, [r5, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0c6      	beq.n	8000f46 <__sflush_r+0x32>
 8000fb8:	2b1d      	cmp	r3, #29
 8000fba:	d001      	beq.n	8000fc0 <__sflush_r+0xac>
 8000fbc:	2b16      	cmp	r3, #22
 8000fbe:	d11e      	bne.n	8000ffe <__sflush_r+0xea>
 8000fc0:	602f      	str	r7, [r5, #0]
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	e022      	b.n	800100c <__sflush_r+0xf8>
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	e01b      	b.n	8001006 <__sflush_r+0xf2>
 8000fce:	690f      	ldr	r7, [r1, #16]
 8000fd0:	2f00      	cmp	r7, #0
 8000fd2:	d0f6      	beq.n	8000fc2 <__sflush_r+0xae>
 8000fd4:	0793      	lsls	r3, r2, #30
 8000fd6:	680e      	ldr	r6, [r1, #0]
 8000fd8:	bf08      	it	eq
 8000fda:	694b      	ldreq	r3, [r1, #20]
 8000fdc:	600f      	str	r7, [r1, #0]
 8000fde:	bf18      	it	ne
 8000fe0:	2300      	movne	r3, #0
 8000fe2:	eba6 0807 	sub.w	r8, r6, r7
 8000fe6:	608b      	str	r3, [r1, #8]
 8000fe8:	f1b8 0f00 	cmp.w	r8, #0
 8000fec:	dde9      	ble.n	8000fc2 <__sflush_r+0xae>
 8000fee:	6a21      	ldr	r1, [r4, #32]
 8000ff0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000ff2:	4643      	mov	r3, r8
 8000ff4:	463a      	mov	r2, r7
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	47b0      	blx	r6
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	dc08      	bgt.n	8001010 <__sflush_r+0xfc>
 8000ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001006:	81a3      	strh	r3, [r4, #12]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800100c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001010:	4407      	add	r7, r0
 8001012:	eba8 0800 	sub.w	r8, r8, r0
 8001016:	e7e7      	b.n	8000fe8 <__sflush_r+0xd4>
 8001018:	20400001 	.word	0x20400001

0800101c <_fflush_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	690b      	ldr	r3, [r1, #16]
 8001020:	4605      	mov	r5, r0
 8001022:	460c      	mov	r4, r1
 8001024:	b913      	cbnz	r3, 800102c <_fflush_r+0x10>
 8001026:	2500      	movs	r5, #0
 8001028:	4628      	mov	r0, r5
 800102a:	bd38      	pop	{r3, r4, r5, pc}
 800102c:	b118      	cbz	r0, 8001036 <_fflush_r+0x1a>
 800102e:	6a03      	ldr	r3, [r0, #32]
 8001030:	b90b      	cbnz	r3, 8001036 <_fflush_r+0x1a>
 8001032:	f7ff fb83 	bl	800073c <__sinit>
 8001036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f3      	beq.n	8001026 <_fflush_r+0xa>
 800103e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001040:	07d0      	lsls	r0, r2, #31
 8001042:	d404      	bmi.n	800104e <_fflush_r+0x32>
 8001044:	0599      	lsls	r1, r3, #22
 8001046:	d402      	bmi.n	800104e <_fflush_r+0x32>
 8001048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800104a:	f7ff fbf2 	bl	8000832 <__retarget_lock_acquire_recursive>
 800104e:	4628      	mov	r0, r5
 8001050:	4621      	mov	r1, r4
 8001052:	f7ff ff5f 	bl	8000f14 <__sflush_r>
 8001056:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001058:	07da      	lsls	r2, r3, #31
 800105a:	4605      	mov	r5, r0
 800105c:	d4e4      	bmi.n	8001028 <_fflush_r+0xc>
 800105e:	89a3      	ldrh	r3, [r4, #12]
 8001060:	059b      	lsls	r3, r3, #22
 8001062:	d4e1      	bmi.n	8001028 <_fflush_r+0xc>
 8001064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001066:	f7ff fbe5 	bl	8000834 <__retarget_lock_release_recursive>
 800106a:	e7dd      	b.n	8001028 <_fflush_r+0xc>

0800106c <__malloc_lock>:
 800106c:	4801      	ldr	r0, [pc, #4]	@ (8001074 <__malloc_lock+0x8>)
 800106e:	f7ff bbe0 	b.w	8000832 <__retarget_lock_acquire_recursive>
 8001072:	bf00      	nop
 8001074:	200001bc 	.word	0x200001bc

08001078 <__malloc_unlock>:
 8001078:	4801      	ldr	r0, [pc, #4]	@ (8001080 <__malloc_unlock+0x8>)
 800107a:	f7ff bbdb 	b.w	8000834 <__retarget_lock_release_recursive>
 800107e:	bf00      	nop
 8001080:	200001bc 	.word	0x200001bc

08001084 <__sread>:
 8001084:	b510      	push	{r4, lr}
 8001086:	460c      	mov	r4, r1
 8001088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800108c:	f000 f956 	bl	800133c <_read_r>
 8001090:	2800      	cmp	r0, #0
 8001092:	bfab      	itete	ge
 8001094:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001096:	89a3      	ldrhlt	r3, [r4, #12]
 8001098:	181b      	addge	r3, r3, r0
 800109a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800109e:	bfac      	ite	ge
 80010a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80010a2:	81a3      	strhlt	r3, [r4, #12]
 80010a4:	bd10      	pop	{r4, pc}

080010a6 <__swrite>:
 80010a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010aa:	461f      	mov	r7, r3
 80010ac:	898b      	ldrh	r3, [r1, #12]
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	4605      	mov	r5, r0
 80010b2:	460c      	mov	r4, r1
 80010b4:	4616      	mov	r6, r2
 80010b6:	d505      	bpl.n	80010c4 <__swrite+0x1e>
 80010b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010bc:	2302      	movs	r3, #2
 80010be:	2200      	movs	r2, #0
 80010c0:	f000 f92a 	bl	8001318 <_lseek_r>
 80010c4:	89a3      	ldrh	r3, [r4, #12]
 80010c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010ce:	81a3      	strh	r3, [r4, #12]
 80010d0:	4632      	mov	r2, r6
 80010d2:	463b      	mov	r3, r7
 80010d4:	4628      	mov	r0, r5
 80010d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010da:	f000 b951 	b.w	8001380 <_write_r>

080010de <__sseek>:
 80010de:	b510      	push	{r4, lr}
 80010e0:	460c      	mov	r4, r1
 80010e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010e6:	f000 f917 	bl	8001318 <_lseek_r>
 80010ea:	1c43      	adds	r3, r0, #1
 80010ec:	89a3      	ldrh	r3, [r4, #12]
 80010ee:	bf15      	itete	ne
 80010f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80010f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80010fa:	81a3      	strheq	r3, [r4, #12]
 80010fc:	bf18      	it	ne
 80010fe:	81a3      	strhne	r3, [r4, #12]
 8001100:	bd10      	pop	{r4, pc}

08001102 <__sclose>:
 8001102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001106:	f000 b94d 	b.w	80013a4 <_close_r>

0800110a <__swbuf_r>:
 800110a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110c:	460e      	mov	r6, r1
 800110e:	4614      	mov	r4, r2
 8001110:	4605      	mov	r5, r0
 8001112:	b118      	cbz	r0, 800111c <__swbuf_r+0x12>
 8001114:	6a03      	ldr	r3, [r0, #32]
 8001116:	b90b      	cbnz	r3, 800111c <__swbuf_r+0x12>
 8001118:	f7ff fb10 	bl	800073c <__sinit>
 800111c:	69a3      	ldr	r3, [r4, #24]
 800111e:	60a3      	str	r3, [r4, #8]
 8001120:	89a3      	ldrh	r3, [r4, #12]
 8001122:	071a      	lsls	r2, r3, #28
 8001124:	d501      	bpl.n	800112a <__swbuf_r+0x20>
 8001126:	6923      	ldr	r3, [r4, #16]
 8001128:	b943      	cbnz	r3, 800113c <__swbuf_r+0x32>
 800112a:	4621      	mov	r1, r4
 800112c:	4628      	mov	r0, r5
 800112e:	f000 f82b 	bl	8001188 <__swsetup_r>
 8001132:	b118      	cbz	r0, 800113c <__swbuf_r+0x32>
 8001134:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001138:	4638      	mov	r0, r7
 800113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	6922      	ldr	r2, [r4, #16]
 8001140:	1a98      	subs	r0, r3, r2
 8001142:	6963      	ldr	r3, [r4, #20]
 8001144:	b2f6      	uxtb	r6, r6
 8001146:	4283      	cmp	r3, r0
 8001148:	4637      	mov	r7, r6
 800114a:	dc05      	bgt.n	8001158 <__swbuf_r+0x4e>
 800114c:	4621      	mov	r1, r4
 800114e:	4628      	mov	r0, r5
 8001150:	f7ff ff64 	bl	800101c <_fflush_r>
 8001154:	2800      	cmp	r0, #0
 8001156:	d1ed      	bne.n	8001134 <__swbuf_r+0x2a>
 8001158:	68a3      	ldr	r3, [r4, #8]
 800115a:	3b01      	subs	r3, #1
 800115c:	60a3      	str	r3, [r4, #8]
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	6022      	str	r2, [r4, #0]
 8001164:	701e      	strb	r6, [r3, #0]
 8001166:	6962      	ldr	r2, [r4, #20]
 8001168:	1c43      	adds	r3, r0, #1
 800116a:	429a      	cmp	r2, r3
 800116c:	d004      	beq.n	8001178 <__swbuf_r+0x6e>
 800116e:	89a3      	ldrh	r3, [r4, #12]
 8001170:	07db      	lsls	r3, r3, #31
 8001172:	d5e1      	bpl.n	8001138 <__swbuf_r+0x2e>
 8001174:	2e0a      	cmp	r6, #10
 8001176:	d1df      	bne.n	8001138 <__swbuf_r+0x2e>
 8001178:	4621      	mov	r1, r4
 800117a:	4628      	mov	r0, r5
 800117c:	f7ff ff4e 	bl	800101c <_fflush_r>
 8001180:	2800      	cmp	r0, #0
 8001182:	d0d9      	beq.n	8001138 <__swbuf_r+0x2e>
 8001184:	e7d6      	b.n	8001134 <__swbuf_r+0x2a>
	...

08001188 <__swsetup_r>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <__swsetup_r+0xa8>)
 800118c:	4605      	mov	r5, r0
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	460c      	mov	r4, r1
 8001192:	b118      	cbz	r0, 800119c <__swsetup_r+0x14>
 8001194:	6a03      	ldr	r3, [r0, #32]
 8001196:	b90b      	cbnz	r3, 800119c <__swsetup_r+0x14>
 8001198:	f7ff fad0 	bl	800073c <__sinit>
 800119c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011a0:	0719      	lsls	r1, r3, #28
 80011a2:	d422      	bmi.n	80011ea <__swsetup_r+0x62>
 80011a4:	06da      	lsls	r2, r3, #27
 80011a6:	d407      	bmi.n	80011b8 <__swsetup_r+0x30>
 80011a8:	2209      	movs	r2, #9
 80011aa:	602a      	str	r2, [r5, #0]
 80011ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011b0:	81a3      	strh	r3, [r4, #12]
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011b6:	e033      	b.n	8001220 <__swsetup_r+0x98>
 80011b8:	0758      	lsls	r0, r3, #29
 80011ba:	d512      	bpl.n	80011e2 <__swsetup_r+0x5a>
 80011bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011be:	b141      	cbz	r1, 80011d2 <__swsetup_r+0x4a>
 80011c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011c4:	4299      	cmp	r1, r3
 80011c6:	d002      	beq.n	80011ce <__swsetup_r+0x46>
 80011c8:	4628      	mov	r0, r5
 80011ca:	f000 f90d 	bl	80013e8 <_free_r>
 80011ce:	2300      	movs	r3, #0
 80011d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80011d8:	81a3      	strh	r3, [r4, #12]
 80011da:	2300      	movs	r3, #0
 80011dc:	6063      	str	r3, [r4, #4]
 80011de:	6923      	ldr	r3, [r4, #16]
 80011e0:	6023      	str	r3, [r4, #0]
 80011e2:	89a3      	ldrh	r3, [r4, #12]
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	81a3      	strh	r3, [r4, #12]
 80011ea:	6923      	ldr	r3, [r4, #16]
 80011ec:	b94b      	cbnz	r3, 8001202 <__swsetup_r+0x7a>
 80011ee:	89a3      	ldrh	r3, [r4, #12]
 80011f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80011f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011f8:	d003      	beq.n	8001202 <__swsetup_r+0x7a>
 80011fa:	4621      	mov	r1, r4
 80011fc:	4628      	mov	r0, r5
 80011fe:	f000 f83f 	bl	8001280 <__smakebuf_r>
 8001202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001206:	f013 0201 	ands.w	r2, r3, #1
 800120a:	d00a      	beq.n	8001222 <__swsetup_r+0x9a>
 800120c:	2200      	movs	r2, #0
 800120e:	60a2      	str	r2, [r4, #8]
 8001210:	6962      	ldr	r2, [r4, #20]
 8001212:	4252      	negs	r2, r2
 8001214:	61a2      	str	r2, [r4, #24]
 8001216:	6922      	ldr	r2, [r4, #16]
 8001218:	b942      	cbnz	r2, 800122c <__swsetup_r+0xa4>
 800121a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800121e:	d1c5      	bne.n	80011ac <__swsetup_r+0x24>
 8001220:	bd38      	pop	{r3, r4, r5, pc}
 8001222:	0799      	lsls	r1, r3, #30
 8001224:	bf58      	it	pl
 8001226:	6962      	ldrpl	r2, [r4, #20]
 8001228:	60a2      	str	r2, [r4, #8]
 800122a:	e7f4      	b.n	8001216 <__swsetup_r+0x8e>
 800122c:	2000      	movs	r0, #0
 800122e:	e7f7      	b.n	8001220 <__swsetup_r+0x98>
 8001230:	2000000c 	.word	0x2000000c

08001234 <__swhatbuf_r>:
 8001234:	b570      	push	{r4, r5, r6, lr}
 8001236:	460c      	mov	r4, r1
 8001238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800123c:	2900      	cmp	r1, #0
 800123e:	b096      	sub	sp, #88	@ 0x58
 8001240:	4615      	mov	r5, r2
 8001242:	461e      	mov	r6, r3
 8001244:	da0d      	bge.n	8001262 <__swhatbuf_r+0x2e>
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800124c:	f04f 0100 	mov.w	r1, #0
 8001250:	bf14      	ite	ne
 8001252:	2340      	movne	r3, #64	@ 0x40
 8001254:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001258:	2000      	movs	r0, #0
 800125a:	6031      	str	r1, [r6, #0]
 800125c:	602b      	str	r3, [r5, #0]
 800125e:	b016      	add	sp, #88	@ 0x58
 8001260:	bd70      	pop	{r4, r5, r6, pc}
 8001262:	466a      	mov	r2, sp
 8001264:	f000 f8ae 	bl	80013c4 <_fstat_r>
 8001268:	2800      	cmp	r0, #0
 800126a:	dbec      	blt.n	8001246 <__swhatbuf_r+0x12>
 800126c:	9901      	ldr	r1, [sp, #4]
 800126e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001272:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001276:	4259      	negs	r1, r3
 8001278:	4159      	adcs	r1, r3
 800127a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800127e:	e7eb      	b.n	8001258 <__swhatbuf_r+0x24>

08001280 <__smakebuf_r>:
 8001280:	898b      	ldrh	r3, [r1, #12]
 8001282:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001284:	079d      	lsls	r5, r3, #30
 8001286:	4606      	mov	r6, r0
 8001288:	460c      	mov	r4, r1
 800128a:	d507      	bpl.n	800129c <__smakebuf_r+0x1c>
 800128c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001290:	6023      	str	r3, [r4, #0]
 8001292:	6123      	str	r3, [r4, #16]
 8001294:	2301      	movs	r3, #1
 8001296:	6163      	str	r3, [r4, #20]
 8001298:	b003      	add	sp, #12
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	ab01      	add	r3, sp, #4
 800129e:	466a      	mov	r2, sp
 80012a0:	f7ff ffc8 	bl	8001234 <__swhatbuf_r>
 80012a4:	9f00      	ldr	r7, [sp, #0]
 80012a6:	4605      	mov	r5, r0
 80012a8:	4639      	mov	r1, r7
 80012aa:	4630      	mov	r0, r6
 80012ac:	f7ff fc26 	bl	8000afc <_malloc_r>
 80012b0:	b948      	cbnz	r0, 80012c6 <__smakebuf_r+0x46>
 80012b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012b6:	059a      	lsls	r2, r3, #22
 80012b8:	d4ee      	bmi.n	8001298 <__smakebuf_r+0x18>
 80012ba:	f023 0303 	bic.w	r3, r3, #3
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	81a3      	strh	r3, [r4, #12]
 80012c4:	e7e2      	b.n	800128c <__smakebuf_r+0xc>
 80012c6:	89a3      	ldrh	r3, [r4, #12]
 80012c8:	6020      	str	r0, [r4, #0]
 80012ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ce:	81a3      	strh	r3, [r4, #12]
 80012d0:	9b01      	ldr	r3, [sp, #4]
 80012d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80012d6:	b15b      	cbz	r3, 80012f0 <__smakebuf_r+0x70>
 80012d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012dc:	4630      	mov	r0, r6
 80012de:	f000 f80b 	bl	80012f8 <_isatty_r>
 80012e2:	b128      	cbz	r0, 80012f0 <__smakebuf_r+0x70>
 80012e4:	89a3      	ldrh	r3, [r4, #12]
 80012e6:	f023 0303 	bic.w	r3, r3, #3
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	81a3      	strh	r3, [r4, #12]
 80012f0:	89a3      	ldrh	r3, [r4, #12]
 80012f2:	431d      	orrs	r5, r3
 80012f4:	81a5      	strh	r5, [r4, #12]
 80012f6:	e7cf      	b.n	8001298 <__smakebuf_r+0x18>

080012f8 <_isatty_r>:
 80012f8:	b538      	push	{r3, r4, r5, lr}
 80012fa:	4d06      	ldr	r5, [pc, #24]	@ (8001314 <_isatty_r+0x1c>)
 80012fc:	2300      	movs	r3, #0
 80012fe:	4604      	mov	r4, r0
 8001300:	4608      	mov	r0, r1
 8001302:	602b      	str	r3, [r5, #0]
 8001304:	f7ff f87f 	bl	8000406 <_isatty>
 8001308:	1c43      	adds	r3, r0, #1
 800130a:	d102      	bne.n	8001312 <_isatty_r+0x1a>
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	b103      	cbz	r3, 8001312 <_isatty_r+0x1a>
 8001310:	6023      	str	r3, [r4, #0]
 8001312:	bd38      	pop	{r3, r4, r5, pc}
 8001314:	200001c8 	.word	0x200001c8

08001318 <_lseek_r>:
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4d07      	ldr	r5, [pc, #28]	@ (8001338 <_lseek_r+0x20>)
 800131c:	4604      	mov	r4, r0
 800131e:	4608      	mov	r0, r1
 8001320:	4611      	mov	r1, r2
 8001322:	2200      	movs	r2, #0
 8001324:	602a      	str	r2, [r5, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	f7ff f878 	bl	800041c <_lseek>
 800132c:	1c43      	adds	r3, r0, #1
 800132e:	d102      	bne.n	8001336 <_lseek_r+0x1e>
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	b103      	cbz	r3, 8001336 <_lseek_r+0x1e>
 8001334:	6023      	str	r3, [r4, #0]
 8001336:	bd38      	pop	{r3, r4, r5, pc}
 8001338:	200001c8 	.word	0x200001c8

0800133c <_read_r>:
 800133c:	b538      	push	{r3, r4, r5, lr}
 800133e:	4d07      	ldr	r5, [pc, #28]	@ (800135c <_read_r+0x20>)
 8001340:	4604      	mov	r4, r0
 8001342:	4608      	mov	r0, r1
 8001344:	4611      	mov	r1, r2
 8001346:	2200      	movs	r2, #0
 8001348:	602a      	str	r2, [r5, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	f7ff f806 	bl	800035c <_read>
 8001350:	1c43      	adds	r3, r0, #1
 8001352:	d102      	bne.n	800135a <_read_r+0x1e>
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	b103      	cbz	r3, 800135a <_read_r+0x1e>
 8001358:	6023      	str	r3, [r4, #0]
 800135a:	bd38      	pop	{r3, r4, r5, pc}
 800135c:	200001c8 	.word	0x200001c8

08001360 <_sbrk_r>:
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4d06      	ldr	r5, [pc, #24]	@ (800137c <_sbrk_r+0x1c>)
 8001364:	2300      	movs	r3, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	602b      	str	r3, [r5, #0]
 800136c:	f7ff f864 	bl	8000438 <_sbrk>
 8001370:	1c43      	adds	r3, r0, #1
 8001372:	d102      	bne.n	800137a <_sbrk_r+0x1a>
 8001374:	682b      	ldr	r3, [r5, #0]
 8001376:	b103      	cbz	r3, 800137a <_sbrk_r+0x1a>
 8001378:	6023      	str	r3, [r4, #0]
 800137a:	bd38      	pop	{r3, r4, r5, pc}
 800137c:	200001c8 	.word	0x200001c8

08001380 <_write_r>:
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	4d07      	ldr	r5, [pc, #28]	@ (80013a0 <_write_r+0x20>)
 8001384:	4604      	mov	r4, r0
 8001386:	4608      	mov	r0, r1
 8001388:	4611      	mov	r1, r2
 800138a:	2200      	movs	r2, #0
 800138c:	602a      	str	r2, [r5, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	f7ff f801 	bl	8000396 <_write>
 8001394:	1c43      	adds	r3, r0, #1
 8001396:	d102      	bne.n	800139e <_write_r+0x1e>
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	b103      	cbz	r3, 800139e <_write_r+0x1e>
 800139c:	6023      	str	r3, [r4, #0]
 800139e:	bd38      	pop	{r3, r4, r5, pc}
 80013a0:	200001c8 	.word	0x200001c8

080013a4 <_close_r>:
 80013a4:	b538      	push	{r3, r4, r5, lr}
 80013a6:	4d06      	ldr	r5, [pc, #24]	@ (80013c0 <_close_r+0x1c>)
 80013a8:	2300      	movs	r3, #0
 80013aa:	4604      	mov	r4, r0
 80013ac:	4608      	mov	r0, r1
 80013ae:	602b      	str	r3, [r5, #0]
 80013b0:	f7ff f80d 	bl	80003ce <_close>
 80013b4:	1c43      	adds	r3, r0, #1
 80013b6:	d102      	bne.n	80013be <_close_r+0x1a>
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	b103      	cbz	r3, 80013be <_close_r+0x1a>
 80013bc:	6023      	str	r3, [r4, #0]
 80013be:	bd38      	pop	{r3, r4, r5, pc}
 80013c0:	200001c8 	.word	0x200001c8

080013c4 <_fstat_r>:
 80013c4:	b538      	push	{r3, r4, r5, lr}
 80013c6:	4d07      	ldr	r5, [pc, #28]	@ (80013e4 <_fstat_r+0x20>)
 80013c8:	2300      	movs	r3, #0
 80013ca:	4604      	mov	r4, r0
 80013cc:	4608      	mov	r0, r1
 80013ce:	4611      	mov	r1, r2
 80013d0:	602b      	str	r3, [r5, #0]
 80013d2:	f7ff f808 	bl	80003e6 <_fstat>
 80013d6:	1c43      	adds	r3, r0, #1
 80013d8:	d102      	bne.n	80013e0 <_fstat_r+0x1c>
 80013da:	682b      	ldr	r3, [r5, #0]
 80013dc:	b103      	cbz	r3, 80013e0 <_fstat_r+0x1c>
 80013de:	6023      	str	r3, [r4, #0]
 80013e0:	bd38      	pop	{r3, r4, r5, pc}
 80013e2:	bf00      	nop
 80013e4:	200001c8 	.word	0x200001c8

080013e8 <_free_r>:
 80013e8:	b538      	push	{r3, r4, r5, lr}
 80013ea:	4605      	mov	r5, r0
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d041      	beq.n	8001474 <_free_r+0x8c>
 80013f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013f4:	1f0c      	subs	r4, r1, #4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bfb8      	it	lt
 80013fa:	18e4      	addlt	r4, r4, r3
 80013fc:	f7ff fe36 	bl	800106c <__malloc_lock>
 8001400:	4a1d      	ldr	r2, [pc, #116]	@ (8001478 <_free_r+0x90>)
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	b933      	cbnz	r3, 8001414 <_free_r+0x2c>
 8001406:	6063      	str	r3, [r4, #4]
 8001408:	6014      	str	r4, [r2, #0]
 800140a:	4628      	mov	r0, r5
 800140c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001410:	f7ff be32 	b.w	8001078 <__malloc_unlock>
 8001414:	42a3      	cmp	r3, r4
 8001416:	d908      	bls.n	800142a <_free_r+0x42>
 8001418:	6820      	ldr	r0, [r4, #0]
 800141a:	1821      	adds	r1, r4, r0
 800141c:	428b      	cmp	r3, r1
 800141e:	bf01      	itttt	eq
 8001420:	6819      	ldreq	r1, [r3, #0]
 8001422:	685b      	ldreq	r3, [r3, #4]
 8001424:	1809      	addeq	r1, r1, r0
 8001426:	6021      	streq	r1, [r4, #0]
 8001428:	e7ed      	b.n	8001406 <_free_r+0x1e>
 800142a:	461a      	mov	r2, r3
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	b10b      	cbz	r3, 8001434 <_free_r+0x4c>
 8001430:	42a3      	cmp	r3, r4
 8001432:	d9fa      	bls.n	800142a <_free_r+0x42>
 8001434:	6811      	ldr	r1, [r2, #0]
 8001436:	1850      	adds	r0, r2, r1
 8001438:	42a0      	cmp	r0, r4
 800143a:	d10b      	bne.n	8001454 <_free_r+0x6c>
 800143c:	6820      	ldr	r0, [r4, #0]
 800143e:	4401      	add	r1, r0
 8001440:	1850      	adds	r0, r2, r1
 8001442:	4283      	cmp	r3, r0
 8001444:	6011      	str	r1, [r2, #0]
 8001446:	d1e0      	bne.n	800140a <_free_r+0x22>
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	6053      	str	r3, [r2, #4]
 800144e:	4408      	add	r0, r1
 8001450:	6010      	str	r0, [r2, #0]
 8001452:	e7da      	b.n	800140a <_free_r+0x22>
 8001454:	d902      	bls.n	800145c <_free_r+0x74>
 8001456:	230c      	movs	r3, #12
 8001458:	602b      	str	r3, [r5, #0]
 800145a:	e7d6      	b.n	800140a <_free_r+0x22>
 800145c:	6820      	ldr	r0, [r4, #0]
 800145e:	1821      	adds	r1, r4, r0
 8001460:	428b      	cmp	r3, r1
 8001462:	bf04      	itt	eq
 8001464:	6819      	ldreq	r1, [r3, #0]
 8001466:	685b      	ldreq	r3, [r3, #4]
 8001468:	6063      	str	r3, [r4, #4]
 800146a:	bf04      	itt	eq
 800146c:	1809      	addeq	r1, r1, r0
 800146e:	6021      	streq	r1, [r4, #0]
 8001470:	6054      	str	r4, [r2, #4]
 8001472:	e7ca      	b.n	800140a <_free_r+0x22>
 8001474:	bd38      	pop	{r3, r4, r5, pc}
 8001476:	bf00      	nop
 8001478:	200001c4 	.word	0x200001c4

0800147c <_init>:
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147e:	bf00      	nop
 8001480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001482:	bc08      	pop	{r3}
 8001484:	469e      	mov	lr, r3
 8001486:	4770      	bx	lr

08001488 <_fini>:
 8001488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800148a:	bf00      	nop
 800148c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800148e:	bc08      	pop	{r3}
 8001490:	469e      	mov	lr, r3
 8001492:	4770      	bx	lr
