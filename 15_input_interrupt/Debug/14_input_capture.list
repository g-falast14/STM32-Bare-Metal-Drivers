
14_input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003cc  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  000013cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003c4  080003c4  000013cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003c4  080003cc  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000013c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003c8  080003c8  000013c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003cc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003cc  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000626  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a4  00000000  00000000  00001a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004c  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000dd1  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c2e  00000000  00000000  00002a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053a37  00000000  00000000  0000368b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000570c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  00057108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000571d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003ac 	.word	0x080003ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003ac 	.word	0x080003ac

080001d8 <main>:

int timestamp = 0;

// setup: connect a jumper wire from PA5 to PA6

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	tim2_pa5_output_compare();
 80001dc:	f000 f814 	bl	8000208 <tim2_pa5_output_compare>
	tim3_pa6_input_capture();
 80001e0:	f000 f85e 	bl	80002a0 <tim3_pa6_input_capture>

	while(1) {
		// wait until edge is captured
		while (!(TIM3->SR & SR_CC1IF)) {}
 80001e4:	bf00      	nop
 80001e6:	4b06      	ldr	r3, [pc, #24]	@ (8000200 <main+0x28>)
 80001e8:	691b      	ldr	r3, [r3, #16]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f9      	beq.n	80001e6 <main+0xe>

		// read capture counter value
		timestamp = TIM3->CCR1;
 80001f2:	4b03      	ldr	r3, [pc, #12]	@ (8000200 <main+0x28>)
 80001f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b02      	ldr	r3, [pc, #8]	@ (8000204 <main+0x2c>)
 80001fa:	601a      	str	r2, [r3, #0]
		while (!(TIM3->SR & SR_CC1IF)) {}
 80001fc:	e7f2      	b.n	80001e4 <main+0xc>
 80001fe:	bf00      	nop
 8000200:	40000400 	.word	0x40000400
 8000204:	2000001c 	.word	0x2000001c

08000208 <tim2_pa5_output_compare>:
	TIM2->CR1 |= CR1_CEN;


}

void tim2_pa5_output_compare(void) {
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0

	// configure PA5
	// enable clock access to GPIOA
	RCC->APB1ENR |= GPIOAEN;
 800020c:	4b22      	ldr	r3, [pc, #136]	@ (8000298 <tim2_pa5_output_compare+0x90>)
 800020e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000210:	4a21      	ldr	r2, [pc, #132]	@ (8000298 <tim2_pa5_output_compare+0x90>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6413      	str	r3, [r2, #64]	@ 0x40

	// set PA5 mode to alternate function mode
	GPIOA->MODER &= ~(1U<<10);
 8000218:	4b20      	ldr	r3, [pc, #128]	@ (800029c <tim2_pa5_output_compare+0x94>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a1f      	ldr	r2, [pc, #124]	@ (800029c <tim2_pa5_output_compare+0x94>)
 800021e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000222:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<11);
 8000224:	4b1d      	ldr	r3, [pc, #116]	@ (800029c <tim2_pa5_output_compare+0x94>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1c      	ldr	r2, [pc, #112]	@ (800029c <tim2_pa5_output_compare+0x94>)
 800022a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800022e:	6013      	str	r3, [r2, #0]

	// set alternate function type to TIM2->CH1 (AF01)
	GPIOA->AFR[0] |= AFR5_TIM;
 8000230:	4b1a      	ldr	r3, [pc, #104]	@ (800029c <tim2_pa5_output_compare+0x94>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a19      	ldr	r2, [pc, #100]	@ (800029c <tim2_pa5_output_compare+0x94>)
 8000236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800023a:	6213      	str	r3, [r2, #32]

	// enable clock access to timer2
	RCC->APB1ENR |= TIM2EN;
 800023c:	4b16      	ldr	r3, [pc, #88]	@ (8000298 <tim2_pa5_output_compare+0x90>)
 800023e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000240:	4a15      	ldr	r2, [pc, #84]	@ (8000298 <tim2_pa5_output_compare+0x90>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6413      	str	r3, [r2, #64]	@ 0x40

	// set prescalar value
	TIM2->PSC = 1600 - 1; // 16mhz / 1600 = 10000
 8000248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024c:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000250:	629a      	str	r2, [r3, #40]	@ 0x28

	// set auto-reload value
	TIM2->ARR = 10000 - 1;
 8000252:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000256:	f242 720f 	movw	r2, #9999	@ 0x270f
 800025a:	62da      	str	r2, [r3, #44]	@ 0x2c

	// set output compare toggle mode
	TIM2->CCMR1 = OC_TOGGLE;
 800025c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000260:	2230      	movs	r2, #48	@ 0x30
 8000262:	619a      	str	r2, [r3, #24]

	// enable timer 2 channel 1 compare mode
	TIM2->CCER |= CCER_CC1E;
 8000264:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000268:	6a1b      	ldr	r3, [r3, #32]
 800026a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6213      	str	r3, [r2, #32]

	// clear timer counter
	TIM2->CNT = 0;
 8000274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000278:	2200      	movs	r2, #0
 800027a:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the timer
	TIM2->CR1 |= CR1_CEN;
 800027c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6013      	str	r3, [r2, #0]
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40023800 	.word	0x40023800
 800029c:	40020000 	.word	0x40020000

080002a0 <tim3_pa6_input_capture>:

void tim3_pa6_input_capture(void) {
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	// enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80002a4:	4b17      	ldr	r3, [pc, #92]	@ (8000304 <tim3_pa6_input_capture+0x64>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a8:	4a16      	ldr	r2, [pc, #88]	@ (8000304 <tim3_pa6_input_capture+0x64>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6313      	str	r3, [r2, #48]	@ 0x30

	// set PA6 mode to alternate function
	GPIOA->MODER &= ~(1U<<12);
 80002b0:	4b15      	ldr	r3, [pc, #84]	@ (8000308 <tim3_pa6_input_capture+0x68>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a14      	ldr	r2, [pc, #80]	@ (8000308 <tim3_pa6_input_capture+0x68>)
 80002b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<13);
 80002bc:	4b12      	ldr	r3, [pc, #72]	@ (8000308 <tim3_pa6_input_capture+0x68>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a11      	ldr	r2, [pc, #68]	@ (8000308 <tim3_pa6_input_capture+0x68>)
 80002c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002c6:	6013      	str	r3, [r2, #0]

	// set PA6 alternate function type to TIM3_CH1 (AF02)
	GPIOA->AFR[0] |= AFR6_TIM;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000308 <tim3_pa6_input_capture+0x68>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000308 <tim3_pa6_input_capture+0x68>)
 80002ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002d2:	6213      	str	r3, [r2, #32]

	// enable clock access to tim3
	RCC->APB1ENR |= TIME3EN;
 80002d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <tim3_pa6_input_capture+0x64>)
 80002d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000304 <tim3_pa6_input_capture+0x64>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6413      	str	r3, [r2, #64]	@ 0x40

	// set prescalar
	TIM3->PSC = 16000 - 1; // 16mhz / 16000
 80002e0:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <tim3_pa6_input_capture+0x6c>)
 80002e2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002e6:	629a      	str	r2, [r3, #40]	@ 0x28

	// set CH1 to input capture mode
	TIM3->CCMR1 = CCER_CC1S;
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <tim3_pa6_input_capture+0x6c>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	619a      	str	r2, [r3, #24]

	// set ch1 to capture rising edge
	TIM3->CCER = CCER_CC1E;
 80002ee:	4b07      	ldr	r3, [pc, #28]	@ (800030c <tim3_pa6_input_capture+0x6c>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	621a      	str	r2, [r3, #32]

	// enable tim3
	TIM3->CR1 = CR1_CEN;
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <tim3_pa6_input_capture+0x6c>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	601a      	str	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	40020000 	.word	0x40020000
 800030c:	40000400 	.word	0x40000400

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	@ (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	@ (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	@ (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	@ (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 f811 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000342:	f7ff ff49 	bl	80001d8 <main>

08000346 <LoopForever>:

LoopForever:
  b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	20000020 	.word	0x20000020

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4d0d      	ldr	r5, [pc, #52]	@ (800039c <__libc_init_array+0x38>)
 8000368:	4c0d      	ldr	r4, [pc, #52]	@ (80003a0 <__libc_init_array+0x3c>)
 800036a:	1b64      	subs	r4, r4, r5
 800036c:	10a4      	asrs	r4, r4, #2
 800036e:	2600      	movs	r6, #0
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	4d0b      	ldr	r5, [pc, #44]	@ (80003a4 <__libc_init_array+0x40>)
 8000376:	4c0c      	ldr	r4, [pc, #48]	@ (80003a8 <__libc_init_array+0x44>)
 8000378:	f000 f818 	bl	80003ac <_init>
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	2600      	movs	r6, #0
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	4798      	blx	r3
 800038e:	3601      	adds	r6, #1
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	4798      	blx	r3
 8000398:	3601      	adds	r6, #1
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c4 	.word	0x080003c4
 80003a8:	080003c8 	.word	0x080003c8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
