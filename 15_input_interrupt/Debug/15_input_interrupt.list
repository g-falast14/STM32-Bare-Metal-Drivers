
15_input_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002cc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000464  0800046c  0000146c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000464  08000464  0000146c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000464  08000464  0000146c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000464  0800046c  0000146c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000464  08000464  00001464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000468  08000468  00001468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000146c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800046c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800046c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f7c  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000048f  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  000028a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008a  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fcc  00000000  00000000  00002a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001407  00000000  00000000  000039ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053f27  00000000  00000000  00004dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00058cfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001e4  00000000  00000000  00058d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00058f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800044c 	.word	0x0800044c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800044c 	.word	0x0800044c

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <pc13_exti_init>:

#define GPIOCEN			(1U<<2)
#define SYSCFGEN		(1U<<14)


void pc13_exti_init(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000218:	b672      	cpsid	i
}
 800021a:	bf00      	nop
	// disable global interrupt
	__disable_irq();

	// enable clock access for GPIOC
	RCC->AHB1ENR |= GPIOCEN;
 800021c:	4b18      	ldr	r3, [pc, #96]	@ (8000280 <pc13_exti_init+0x6c>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000220:	4a17      	ldr	r2, [pc, #92]	@ (8000280 <pc13_exti_init+0x6c>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6313      	str	r3, [r2, #48]	@ 0x30

	// enable clock access to SYSCFG
	RCC->APB2ENR |= SYSCFGEN;
 8000228:	4b15      	ldr	r3, [pc, #84]	@ (8000280 <pc13_exti_init+0x6c>)
 800022a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800022c:	4a14      	ldr	r2, [pc, #80]	@ (8000280 <pc13_exti_init+0x6c>)
 800022e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000232:	6453      	str	r3, [r2, #68]	@ 0x44

	// set PC13 as input pin
	GPIOC->MODER &= ~(1U<<26);
 8000234:	4b13      	ldr	r3, [pc, #76]	@ (8000284 <pc13_exti_init+0x70>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a12      	ldr	r2, [pc, #72]	@ (8000284 <pc13_exti_init+0x70>)
 800023a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800023e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<27);
 8000240:	4b10      	ldr	r3, [pc, #64]	@ (8000284 <pc13_exti_init+0x70>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0f      	ldr	r2, [pc, #60]	@ (8000284 <pc13_exti_init+0x70>)
 8000246:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800024a:	6013      	str	r3, [r2, #0]

	// select PORTC for EXTI13
	SYSCFG->EXTICR[3] |= (1U<<5);
 800024c:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <pc13_exti_init+0x74>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a0d      	ldr	r2, [pc, #52]	@ (8000288 <pc13_exti_init+0x74>)
 8000252:	f043 0320 	orr.w	r3, r3, #32
 8000256:	6153      	str	r3, [r2, #20]

	// unmask EXTI13
	EXTI->IMR |= (1U<13);
 8000258:	4b0c      	ldr	r3, [pc, #48]	@ (800028c <pc13_exti_init+0x78>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0b      	ldr	r2, [pc, #44]	@ (800028c <pc13_exti_init+0x78>)
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6013      	str	r3, [r2, #0]

	// select falling edge trigger
	EXTI->FTSR |= (1U<13);
 8000264:	4b09      	ldr	r3, [pc, #36]	@ (800028c <pc13_exti_init+0x78>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4a08      	ldr	r2, [pc, #32]	@ (800028c <pc13_exti_init+0x78>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	60d3      	str	r3, [r2, #12]

	// enable EXTI line in NVIC
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000270:	2028      	movs	r0, #40	@ 0x28
 8000272:	f7ff ffb1 	bl	80001d8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000276:	b662      	cpsie	i
}
 8000278:	bf00      	nop

	// re-enable global interrupt
	__enable_irq();

}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40023800 	.word	0x40023800
 8000284:	40020800 	.word	0x40020800
 8000288:	40013800 	.word	0x40013800
 800028c:	40013c00 	.word	0x40013c00

08000290 <main>:
#define PIN5			(1U<<5)
#define LED_PIN			PIN5

static void exti_callback(void);

int main(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

	// enable clock access to led
	RCC->AHB1ENR |= GPIOAEN;
 8000294:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <main+0x34>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000298:	4a0a      	ldr	r2, [pc, #40]	@ (80002c4 <main+0x34>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6313      	str	r3, [r2, #48]	@ 0x30

	// set PA5 as output pin
	GPIOA->MODER |= (1U<<10);
 80002a0:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <main+0x38>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a08      	ldr	r2, [pc, #32]	@ (80002c8 <main+0x38>)
 80002a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80002ac:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <main+0x38>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a05      	ldr	r2, [pc, #20]	@ (80002c8 <main+0x38>)
 80002b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002b6:	6013      	str	r3, [r2, #0]


	pc13_exti_init();
 80002b8:	f7ff ffac 	bl	8000214 <pc13_exti_init>
	uart2_tx_init();
 80002bc:	f000 f806 	bl	80002cc <uart2_tx_init>

	while(1) {
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <main+0x30>
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020000 	.word	0x40020000

080002cc <uart2_tx_init>:

		// enable the uart module
		USART2->CR1 |= CR1_UE;
}

void uart2_tx_init(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0

	// configure the uart gpio pin
		// enable clock access to gpioa
		RCC->AHB1ENR |= GPIOAEN;
 80002d0:	4b20      	ldr	r3, [pc, #128]	@ (8000354 <uart2_tx_init+0x88>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000354 <uart2_tx_init+0x88>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6313      	str	r3, [r2, #48]	@ 0x30

		// set PA2 mode to alternate function mode
		GPIOA->MODER &= ~(1U<<4);
 80002dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <uart2_tx_init+0x8c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000358 <uart2_tx_init+0x8c>)
 80002e2:	f023 0310 	bic.w	r3, r3, #16
 80002e6:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (1U<<5);
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <uart2_tx_init+0x8c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000358 <uart2_tx_init+0x8c>)
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6013      	str	r3, [r2, #0]

		// set PA2 alternate function type to UART_TX (AF07)
		GPIOA->AFR[0] |= (1U<<8);
 80002f4:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <uart2_tx_init+0x8c>)
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	4a17      	ldr	r2, [pc, #92]	@ (8000358 <uart2_tx_init+0x8c>)
 80002fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002fe:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<9);
 8000300:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <uart2_tx_init+0x8c>)
 8000302:	6a1b      	ldr	r3, [r3, #32]
 8000304:	4a14      	ldr	r2, [pc, #80]	@ (8000358 <uart2_tx_init+0x8c>)
 8000306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800030a:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<10);
 800030c:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <uart2_tx_init+0x8c>)
 800030e:	6a1b      	ldr	r3, [r3, #32]
 8000310:	4a11      	ldr	r2, [pc, #68]	@ (8000358 <uart2_tx_init+0x8c>)
 8000312:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000316:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<11);
 8000318:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <uart2_tx_init+0x8c>)
 800031a:	6a1b      	ldr	r3, [r3, #32]
 800031c:	4a0e      	ldr	r2, [pc, #56]	@ (8000358 <uart2_tx_init+0x8c>)
 800031e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000322:	6213      	str	r3, [r2, #32]


		// configure uart module
		// enable clock access to uart2
		RCC->APB1ENR |= UART2EN;
 8000324:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <uart2_tx_init+0x88>)
 8000326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000328:	4a0a      	ldr	r2, [pc, #40]	@ (8000354 <uart2_tx_init+0x88>)
 800032a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800032e:	6413      	str	r3, [r2, #64]	@ 0x40

		// configure baudrate
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000334:	4909      	ldr	r1, [pc, #36]	@ (800035c <uart2_tx_init+0x90>)
 8000336:	480a      	ldr	r0, [pc, #40]	@ (8000360 <uart2_tx_init+0x94>)
 8000338:	f000 f814 	bl	8000364 <uart_set_baudrate>

		// configure the transfer direction
		USART2->CR1 = CR1_TE;
 800033c:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <uart2_tx_init+0x94>)
 800033e:	2208      	movs	r2, #8
 8000340:	60da      	str	r2, [r3, #12]

		// enable the uart module
		USART2->CR1 |= CR1_UE;
 8000342:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <uart2_tx_init+0x94>)
 8000344:	68db      	ldr	r3, [r3, #12]
 8000346:	4a06      	ldr	r2, [pc, #24]	@ (8000360 <uart2_tx_init+0x94>)
 8000348:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800034c:	60d3      	str	r3, [r2, #12]
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800
 8000358:	40020000 	.word	0x40020000
 800035c:	00f42400 	.word	0x00f42400
 8000360:	40004400 	.word	0x40004400

08000364 <uart_set_baudrate>:
	USART2->DR = (ch & 0xFF);

}


void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000370:	6879      	ldr	r1, [r7, #4]
 8000372:	68b8      	ldr	r0, [r7, #8]
 8000374:	f000 f808 	bl	8000388 <compute_uart_bd>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	609a      	str	r2, [r3, #8]
}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <compute_uart_bd>:

uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	085a      	lsrs	r2, r3, #1
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	441a      	add	r2, r3
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a0:	b29b      	uxth	r3, r3
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
	...

080003b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b0:	480d      	ldr	r0, [pc, #52]	@ (80003e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b8:	480c      	ldr	r0, [pc, #48]	@ (80003ec <LoopForever+0x6>)
  ldr r1, =_edata
 80003ba:	490d      	ldr	r1, [pc, #52]	@ (80003f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003bc:	4a0d      	ldr	r2, [pc, #52]	@ (80003f4 <LoopForever+0xe>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c0:	e002      	b.n	80003c8 <LoopCopyDataInit>

080003c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c6:	3304      	adds	r3, #4

080003c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003cc:	d3f9      	bcc.n	80003c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ce:	4a0a      	ldr	r2, [pc, #40]	@ (80003f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d0:	4c0a      	ldr	r4, [pc, #40]	@ (80003fc <LoopForever+0x16>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d4:	e001      	b.n	80003da <LoopFillZerobss>

080003d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d8:	3204      	adds	r2, #4

080003da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003dc:	d3fb      	bcc.n	80003d6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80003de:	f000 f811 	bl	8000404 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80003e2:	f7ff ff55 	bl	8000290 <main>

080003e6 <LoopForever>:

LoopForever:
  b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>
  ldr   r0, =_estack
 80003e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f4:	0800046c 	.word	0x0800046c
  ldr r2, =_sbss
 80003f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003fc:	2000001c 	.word	0x2000001c

08000400 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>
	...

08000404 <__libc_init_array>:
 8000404:	b570      	push	{r4, r5, r6, lr}
 8000406:	4d0d      	ldr	r5, [pc, #52]	@ (800043c <__libc_init_array+0x38>)
 8000408:	4c0d      	ldr	r4, [pc, #52]	@ (8000440 <__libc_init_array+0x3c>)
 800040a:	1b64      	subs	r4, r4, r5
 800040c:	10a4      	asrs	r4, r4, #2
 800040e:	2600      	movs	r6, #0
 8000410:	42a6      	cmp	r6, r4
 8000412:	d109      	bne.n	8000428 <__libc_init_array+0x24>
 8000414:	4d0b      	ldr	r5, [pc, #44]	@ (8000444 <__libc_init_array+0x40>)
 8000416:	4c0c      	ldr	r4, [pc, #48]	@ (8000448 <__libc_init_array+0x44>)
 8000418:	f000 f818 	bl	800044c <_init>
 800041c:	1b64      	subs	r4, r4, r5
 800041e:	10a4      	asrs	r4, r4, #2
 8000420:	2600      	movs	r6, #0
 8000422:	42a6      	cmp	r6, r4
 8000424:	d105      	bne.n	8000432 <__libc_init_array+0x2e>
 8000426:	bd70      	pop	{r4, r5, r6, pc}
 8000428:	f855 3b04 	ldr.w	r3, [r5], #4
 800042c:	4798      	blx	r3
 800042e:	3601      	adds	r6, #1
 8000430:	e7ee      	b.n	8000410 <__libc_init_array+0xc>
 8000432:	f855 3b04 	ldr.w	r3, [r5], #4
 8000436:	4798      	blx	r3
 8000438:	3601      	adds	r6, #1
 800043a:	e7f2      	b.n	8000422 <__libc_init_array+0x1e>
 800043c:	08000464 	.word	0x08000464
 8000440:	08000464 	.word	0x08000464
 8000444:	08000464 	.word	0x08000464
 8000448:	08000468 	.word	0x08000468

0800044c <_init>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr

08000458 <_fini>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr
